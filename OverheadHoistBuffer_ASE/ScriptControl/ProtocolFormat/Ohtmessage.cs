// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ohtmessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage {

  /// <summary>Holder for reflection information generated from ohtmessage.proto</summary>
  public static partial class OhtmessageReflection {

    #region Descriptor
    /// <summary>File descriptor for ohtmessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OhtmessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBvaHRtZXNzYWdlLnByb3RvEgh0dXRvcmlhbCIrCglUaW1lc3RhbXASDwoH",
            "c2Vjb25kcxgBIAEoAxINCgVuYW5vcxgCIAEoBSLoAgogSURfMV9IT1NUX0JB",
            "U0lDX0lORk9fVkVSU0lPTl9SRVASGQoRRGF0YURhdGVUaW1lX1llYXIYASAB",
            "KAkSGgoSRGF0YURhdGVUaW1lX01vbnRoGAIgASgJEhgKEERhdGFEYXRlVGlt",
            "ZV9EYXkYAyABKAkSGQoRRGF0YURhdGVUaW1lX0hvdXIYBCABKAkSGwoTRGF0",
            "YURhdGVUaW1lX01pbnV0ZRgFIAEoCRIbChNEYXRhRGF0ZVRpbWVfU2Vjb25k",
            "GAYgASgJEhgKEEN1cnJlbnRUaW1lX1llYXIYByABKAkSGQoRQ3VycmVudFRp",
            "bWVfTW9udGgYCCABKAkSFwoPQ3VycmVudFRpbWVfRGF5GAkgASgJEhgKEEN1",
            "cnJlbnRUaW1lX0hvdXIYCiABKAkSGgoSQ3VycmVudFRpbWVfTWludXRlGAsg",
            "ASgJEhoKEkN1cnJlbnRUaW1lX1NlY29uZBgMIAEoCSI8CidJRF8xMDFfSE9T",
            "VF9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEg",
            "ASgFIt0BCh1JRF8xMDJfQkFTSUNfSU5GT19WRVJTSU9OX1JFUBIdChVCYXNp",
            "Y0luZm9WZXJzaW9uX1llYXIYASABKAkSHgoWQmFzaWNJbmZvVmVyc2lvbl9N",
            "b250aBgCIAEoCRIcChRCYXNpY0luZm9WZXJzaW9uX0RheRgDIAEoCRIdChVC",
            "YXNpY0luZm9WZXJzaW9uX0hvdXIYBCABKAkSHwoXQmFzaWNJbmZvVmVyc2lv",
            "bl9NaW51dGUYBSABKAkSHwoXQmFzaWNJbmZvVmVyc2lvbl9TZWNvbmQYBiAB",
            "KAkiNQogSURfMl9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0USEQoJUmVw",
            "bHlDb2RlGAEgASgFIrEBChRJRF8xMV9CQVNJQ19JTkZPX1JFUBIcChRUcmF2",
            "ZWxCYXNpY0RhdGFDb3VudBgBIAEoBRIYChBTZWN0aW9uRGF0YUNvdW50GAIg",
            "ASgFEhgKEEFkZHJlc3NEYXRhQ291bnQYAyABKAUSFgoOU2NhbGVEYXRhQ291",
            "bnQYBCABKAUSFwoPQ29udHJsRGF0YUNvdW50GAUgASgFEhYKDkd1aWRlRGF0",
            "YUNvdW50GAYgASgFIi8KGklEXzExMV9CQVNJQ19JTkZPX1JFU1BPTlNFEhEK",
            "CVJlcGx5Q29kZRgBIAEoBSLjAgoYSURfMTNfVEFWRUxMSU5HX0RBVEFfUkVQ",
            "EhIKClJlc29sdXRpb24YASABKA0SFAoMU3RhcnRTdG9wU3BkGAIgASgNEhAK",
            "CE1heFNwZWVkGAMgASgNEhEKCUFjY2VsVGltZRgEIAEoDRISCgpTQ3VydmVS",
            "YXRlGAUgASgFEhEKCU9yaWdpbkRpchgGIAEoBRIRCglPcmlnaW5TcGQYByAB",
            "KA0SEAoIQmVhZW1TcGQYCCABKA0SEgoKTWFudWFsSFNwZBgJIAEoDRISCgpN",
            "YW51YWxMU3BkGAogASgNEhMKC1RlYWNoaW5nU3BkGAsgASgNEhEKCVJvdGF0",
            "ZURpchgMIAEoBRITCgtFbmNvZGVyUG9sZRgNIAEoBRIcChRQb3NpdGlvbkNv",
            "bXBlbnNhdGlvbhgOIAEoDRITCgtLZWVwRGlzdEZhchgPIAEoDRIUCgxLZWVw",
            "RGlzdE5lYXIYECABKA0iMwoeSURfMTEzX1RBVkVMTElOR19EQVRBX1JFU1BP",
            "TlNFEhEKCVJlcGx5Q29kZRgBIAEoBSKtAwoWSURfMTVfU0VDVElPTl9EQVRB",
            "X1JFUBI6CghTZWN0aW9ucxgBIAMoCzIoLnR1dG9yaWFsLklEXzE1X1NFQ1RJ",
            "T05fREFUQV9SRVAuU2VjdGlvbhrWAgoHU2VjdGlvbhIQCghEcml2ZURpchgB",
            "IAEoBRISCgpBZXJhU2Vjc29yGAIgASgFEhAKCEd1aWRlRGlyGAMgASgFEhEK",
            "CVNlY3Rpb25JRBgEIAEoCRIQCghGcm9tQWRkchgFIAEoCRIOCgZUb0FkZHIY",
            "BiABKAkSFAoMQ29udHJvbFRhYmxlGAcgASgFEg0KBVNwZWVkGAkgASgNEhAK",
            "CERpc3RhbmNlGAogASgNEhkKEUNoYW5nZUFyZWFTZW5zb3IxGAsgASgFEhcK",
            "D0NoYW5nZUd1aWRlRGlyMRgMIAEoBRIVCg1DaGFuZ2VTZWdOdW0xGA0gASgJ",
            "EhkKEUNoYW5nZUFyZWFTZW5zb3IyGA4gASgFEhcKD0NoYW5nZUd1aWRlRGly",
            "MhgPIAEoBRIVCg1DaGFuZ2VTZWdOdW0yGBAgASgJEhEKCUF0U2VnbWVudBgR",
            "IAEoCSIxChxJRF8xMTVfU0VDVElPTl9EQVRBX1JFU1BPTlNFEhEKCVJlcGx5",
            "Q29kZRgBIAEoBSK9AQoWSURfMTdfQUREUkVTU19EQVRBX1JFUBI6CghBZGRy",
            "ZXNzcxgBIAMoCzIoLnR1dG9yaWFsLklEXzE3X0FERFJFU1NfREFUQV9SRVAu",
            "QWRkcmVzcxpnCgdBZGRyZXNzEgwKBEFkZHIYASABKAkSEgoKUmVzb2x1dGlv",
            "bhgCIAEoBRIQCghMb2FjdGlvbhgDIAEoBRIUCgxCbG9ja1JlbGVhc2UYBCAB",
            "KAUSEgoKSElEUmVsZWFzZRgFIAEoBSIxChxJRF8xMTdfQUREUkVTU19EQVRB",
            "X1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSKjAQoUSURfMTlfU0NBTEVf",
            "REFUQV9SRVASEgoKUmVzb2x1dGlvbhgBIAEoDRIRCglJbnBvc0FyZWEYAiAB",
            "KA0SFgoOSW5wb3NTdGFiaWxpdHkYAyABKA0SEgoKU2NhbGVQdWxzZRgEIAEo",
            "DRITCgtTY2FsZU9mZnNldBgFIAEoDRISCgpTY2FsZVJlc2V0GAYgASgNEg8K",
            "B1JlYWREaXIYByABKAUiLwoaSURfMTE5X1NDQUxFX0RBVEFfUkVTUE9OU0US",
            "EQoJUmVwbHlDb2RlGAEgASgFIsYBChZJRF8yMV9DT05UUk9MX0RBVEFfUkVQ",
            "EhEKCVRpbWVvdXRUMRgBIAEoDRIRCglUaW1lb3V0VDIYAiABKA0SEQoJVGlt",
            "ZW91dFQzGAMgASgNEhEKCVRpbWVvdXRUNBgEIAEoDRIRCglUaW1lb3V0VDUY",
            "BSABKA0SEQoJVGltZW91dFQ2GAYgASgNEhEKCVRpbWVvdXRUNxgHIAEoDRIR",
            "CglUaW1lb3V0VDgYCCABKA0SFAoMVGltZW91dEJsb2NrGAkgASgNIjEKHElE",
            "XzEyMV9DT05UUk9MX0RBVEFfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgF",
            "IokCChRJRF8yM19HVUlERV9EQVRBX1JFUBIUCgxTdGFydFN0b3BTcGQYASAB",
            "KA0SEAoITWF4U3BlZWQYAiABKA0SEQoJQWNjZWxUaW1lGAMgASgNEhIKClND",
            "dXJ2ZVJhdGUYBCABKAUSEQoJTm9ybWFsU3BkGAUgASgNEhIKCk1hbnVhbEhT",
            "cGQYBiABKA0SEgoKTWFudWFsTFNwZBgHIAEoDRIRCglMRkxvY2tQb3MYCCAB",
            "KA0SEQoJTEJMb2NrUG9zGAkgASgNEhEKCVJGTG9ja1BvcxgKIAEoDRIRCglS",
            "QkxvY2tQb3MYCyABKA0SGwoTQ2hhbmdlU3RhYmlsaXR5VGltZRgMIAEoDSIv",
            "ChpJRF8xMjNfR1VJREVfREFUQV9SRVNQT05TRRIRCglSZXBseUNvZGUYASAB",
            "KAUiHQobSURfNjFfSU5ESVZJRFVBTF9VUExPQURfUkVRIn8KIUlEXzE2MV9J",
            "TkRJVklEVUFMX1VQTE9BRF9SRVNQT05TRRIVCg1PZmZzZXRHdWlkZUZMGAEg",
            "ASgNEhUKDU9mZnNldEd1aWRlUkwYAiABKA0SFQoNT2Zmc2V0R3VpZGVGUhgD",
            "IAEoDRIVCg1PZmZzZXRHdWlkZVJSGAQgASgNInoKHElEXzE2Ml9HVUlERV9E",
            "QVRBX1VQTE9BRF9SRVASFQoNT2Zmc2V0R3VpZGVGTBgBIAEoDRIVCg1PZmZz",
            "ZXRHdWlkZVJMGAIgASgNEhUKDU9mZnNldEd1aWRlRlIYAyABKA0SFQoNT2Zm",
            "c2V0R3VpZGVSUhgEIAEoDSI0Ch9JRF82Ml9HVUlEX0RBVEFfVVBMT0FEX1JF",
            "U1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSJ5ChtJRF82M19JTkRJVklEVUFM",
            "X0NIQU5HRV9SRVESFQoNT2Zmc2V0R3VpZGVGTBgBIAEoDRIVCg1PZmZzZXRH",
            "dWlkZVJMGAIgASgNEhUKDU9mZnNldEd1aWRlRlIYAyABKA0SFQoNT2Zmc2V0",
            "R3VpZGVSUhgEIAEoDSI2CiFJRF8xNjNfSU5ESVZJRFVBTF9DSEFOR0VfUkVT",
            "UE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIu4CChNJRF8zMV9UUkFOU19SRVFV",
            "RVNUEg4KBkNtZF9JRBgBIAEoCRIlCgdBY3RUeXBlGAIgASgOMhQudHV0b3Jp",
            "YWwuQWN0aXZlVHlwZRIPCgdMb2FkQWRyGAMgASgJEg0KBVRvQWRyGAQgASgJ",
            "EhIKCkxvYWRQb3J0SUQYBSABKAkSFAoMVW5sb2FkUG9ydElEGAYgASgJEhQK",
            "DFNlY19EaXN0YW5jZRgHIAEoDRIOCgZCT1hfSUQYCCABKAkSDgoGQ1NUX0lE",
            "GAkgASgJEg4KBkxPVF9JRBgKIAEoCRIiChpHdWlkZV9TZWN0aW9uc19TdGFy",
            "dFRvTG9hZBgLIAMoCRIhChlHdWlkZV9BZGRyZXNzX1N0YXJ0VG9Mb2FkGAwg",
            "AygJEiQKHEd1aWRlX1NlY3Rpb25zX1RvRGVzdGluYXRpb24YDSADKAkSIwob",
            "R3VpZGVfQWRkcmVzc19Ub0Rlc3RpbmF0aW9uGA4gAygJInMKFUlEXzEzMV9U",
            "UkFOU19SRVNQT05TRRIOCgZDbWRfSUQYASABKAkSJQoHQWN0VHlwZRgCIAEo",
            "DjIULnR1dG9yaWFsLkFjdGl2ZVR5cGUSEQoJUmVwbHlDb2RlGAMgASgFEhAK",
            "CE5nUmVhc29uGAQgASgJIuUCChxJRF8xMzJfVFJBTlNfQ09NUExFVEVfUkVQ",
            "T1JUEg4KBkNtZF9JRBgBIAEoCRIOCgZCT1hfSUQYAiABKAkSDgoGQ1NUX0lE",
            "GAMgASgJEg4KBkxPVF9JRBgEIAEoCRIrCglDbXBTdGF0dXMYBSABKA4yGC50",
            "dXRvcmlhbC5Db21wbGV0ZVN0YXR1cxIUCgxDdXJyZW50QWRySUQYBiABKAkS",
            "FAoMQ3VycmVudFNlY0lEGAcgASgJEhQKDFNlY19EaXN0YW5jZRgIIAEoDRIU",
            "CgxDbWRfRGlzdGFuY2UYCSABKAUSLQoGSGFzQm94GAogASgOMh0udHV0b3Jp",
            "YWwuVmhMb2FkQ2FycmllclN0YXR1cxIQCghDYXJCb3hJRBgLIAEoCRItCgZI",
            "YXNDc3QYDCABKA4yHS50dXRvcmlhbC5WaExvYWRDYXJyaWVyU3RhdHVzEhAK",
            "CENhckNzdElEGA0gASgJIjIKHUlEXzMyX1RSQU5TX0NPTVBMRVRFX1JFU1BP",
            "TlNFEhEKCVJlcGx5Q29kZRgBIAEoBSJsCilJRF8zM19DT05UUk9MX1pPTkVf",
            "UkVQVUVTVF9DQU5DRUxfUkVRVUVTVBIqCgtDb250cm9sVHlwZRgBIAEoDjIV",
            "LnR1dG9yaWFsLkNvbnRyb2xUeXBlEhMKC0NhbmNlbFNlY0lEGAIgASgJIoEB",
            "CitJRF8xMzNfQ09OVFJPTF9aT05FX1JFUFVFU1RfQ0FOQ0VMX1JFU1BPTlNF",
            "EioKC0NvbnRyb2xUeXBlGAEgASgOMhUudHV0b3JpYWwuQ29udHJvbFR5cGUS",
            "EwoLQ2FuY2VsU2VjSUQYAiABKAkSEQoJUmVwbHlDb2RlGAMgASgFIqsCChZJ",
            "RF8xMzRfVFJBTlNfRVZFTlRfUkVQEiYKCUV2ZW50VHlwZRgBIAEoDjITLnR1",
            "dG9yaWFsLkV2ZW50VHlwZRIUCgxDdXJyZW50QWRySUQYAiABKAkSFAoMQ3Vy",
            "cmVudFNlY0lEGAMgASgJEjQKE0xlZnRHdWlkZUxvY2tTdGF0dXMYBSABKA4y",
            "Fy50dXRvcmlhbC5WaEd1aWRlU3RhdHVzEjUKFFJpZ2h0R3VpZGVMb2NrU3Rh",
            "dHVzGAYgASgOMhcudHV0b3JpYWwuVmhHdWlkZVN0YXR1cxIUCgxTZWNfRGlz",
            "dGFuY2UYByABKA0SDQoFU3BlZWQYCCABKAESDQoFQW5nbGUYCSABKAESDQoF",
            "WEF4aXMYCiABKAESDQoFWUF4aXMYCyABKAEimQEKH0lEXzM1X0NBUlJJRVJf",
            "SURfUkVOQU1FX1JFUVVFU1QSEgoKT0xEX0JPWF9JRBgBIAEoCRISCgpORVdf",
            "Qk9YX0lEGAIgASgJEhIKCk9MRF9DU1RfSUQYAyABKAkSEgoKTkVXX0NTVF9J",
            "RBgEIAEoCRISCgpPTERfTE9UX0lEGAUgASgJEhIKCk5FV19MT1RfSUQYBiAB",
            "KAkiNgohSURfMTM1X0NBUlJJRVJfSURfUkVOQU1FX1JFU1BPTlNFEhEKCVJl",
            "cGx5Q29kZRgBIAEoBSJZCgtSZXNlcnZlSW5mbxIaChJSZXNlcnZlX1NlY3Rp",
            "b25fSUQYASABKAkSLgoNRHJpdmVEaXJjdGlvbhgCIAEoDjIXLnR1dG9yaWFs",
            "LkRyaXZlRGlyY3Rpb24iowMKFklEXzEzNl9UUkFOU19FVkVOVF9SRVASJgoJ",
            "RXZlbnRUeXBlGAEgASgOMhMudHV0b3JpYWwuRXZlbnRUeXBlEisKDFJlc2Vy",
            "dmVJbmZvcxgCIAMoCzIVLnR1dG9yaWFsLlJlc2VydmVJbmZvEhgKEFJlcXVl",
            "c3RfQmxvY2tfSUQYAyABKAkSFgoOUmVxdWVzdF9ISURfSUQYBCABKAkSDgoG",
            "Qk9YX0lEGAUgASgJEg4KBkNTVF9JRBgGIAEoCRIOCgZMT1RfSUQYByABKAkS",
            "GwoTUmVsZWFzZV9CbG9ja19BZHJJRBgIIAEoCRIZChFSZWxlYXNlX0hJRF9B",
            "ZHJJRBgJIAEoCRISCgpMb2FkUG9ydElEGAogASgJEhQKDFVubG9hZFBvcnRJ",
            "RBgLIAEoCRIUCgxDdXJyZW50QWRySUQYDCABKAkSFAoMQ3VycmVudFNlY0lE",
            "GA0gASgJEhQKDFNlY19EaXN0YW5jZRgOIAEoDRIuCg1CQ1JSZWFkUmVzdWx0",
            "GA8gASgOMhcudHV0b3JpYWwuQkNSUmVhZFJlc3VsdCLWAgoaSURfMzZfVFJB",
            "TlNfRVZFTlRfUkVTUE9OU0USKQoNSXNfQmxvY2tfUGFzcxgBIAEoDjISLnR1",
            "dG9yaWFsLlBhc3NUeXBlEjMKEklzX1Jlc2VydmVfU3VjY2VzcxgCIAEoDjIX",
            "LnR1dG9yaWFsLlJlc2VydmVSZXN1bHQSKwoMUmVzZXJ2ZUluZm9zGAMgAygL",
            "MhUudHV0b3JpYWwuUmVzZXJ2ZUluZm8SJwoLSXNfSElEX1Bhc3MYBCABKA4y",
            "Ei50dXRvcmlhbC5QYXNzVHlwZRITCgtSZW5hbWVCT1hJRBgFIAEoCRITCgtS",
            "ZW5hbWVDU1RJRBgGIAEoCRITCgtSZW5hbWVMT1RJRBgHIAEoCRIwCg9SZXBs",
            "eUFjdGl2ZVR5cGUYCCABKA4yFy50dXRvcmlhbC5DTURDYW5jZWxUeXBlEhEK",
            "CVJlcGx5Q29kZRgJIAEoBSJWChpJRF8zN19UUkFOU19DQU5DRUxfUkVRVUVT",
            "VBIOCgZDbWRfSUQYASABKAkSKAoHQWN0VHlwZRgCIAEoDjIXLnR1dG9yaWFs",
            "LkNNRENhbmNlbFR5cGUiawocSURfMTM3X1RSQU5TX0NBTkNFTF9SRVNQT05T",
            "RRIOCgZDbWRfSUQYASABKAkSKAoHQWN0VHlwZRgCIAEoDjIXLnR1dG9yaWFs",
            "LkNNRENhbmNlbFR5cGUSEQoJUmVwbHlDb2RlGAMgASgFIlwKIElEXzEzOF9U",
            "UkFOU19DQU5DRUxfRkFJTF9SRVFVRVNUEg4KBkNtZF9JRBgBIAEoCRIoCgdB",
            "Y3RUeXBlGAIgASgOMhcudHV0b3JpYWwuQ01EQ2FuY2VsVHlwZSI1CiBJRF8z",
            "OF9UUkFOU19DQU5DRUxfRkFJTF9SRVNQT05TRRIRCglSZXBseUNvZGUYASAB",
            "KAUikwEKE0lEXzM5X1BBVVNFX1JFUVVFU1QSJwoJRXZlbnRUeXBlGAEgASgO",
            "MhQudHV0b3JpYWwuUGF1c2VFdmVudBImCglQYXVzZVR5cGUYAiABKA4yEy50",
            "dXRvcmlhbC5QYXVzZVR5cGUSKwoMUmVzZXJ2ZUluZm9zGAMgAygLMhUudHV0",
            "b3JpYWwuUmVzZXJ2ZUluZm8iUwoVSURfMTM5X1BBVVNFX1JFU1BPTlNFEicK",
            "CUV2ZW50VHlwZRgBIAEoDjIULnR1dG9yaWFsLlBhdXNlRXZlbnQSEQoJUmVw",
            "bHlDb2RlGAIgASgFIksKFUlEXzQxX01PREVfQ0hBTkdFX1JFURIyCg9PcGVy",
            "YXRpbmdWSE1vZGUYASABKA4yGS50dXRvcmlhbC5PcGVyYXRpbmdWSE1vZGUi",
            "MAobSURfMTQxX01PREVfQ0hBTkdFX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgB",
            "IAEoBSIqChRJRF80M19TVEFUVVNfUkVRVUVTVBISCgpTeXN0ZW1UaW1lGAEg",
            "ASgJIqYIChZJRF8xNDNfU1RBVFVTX1JFU1BPTlNFEhQKDEN1cnJlbnRBZHJJ",
            "RBgBIAEoCRIUCgxDdXJyZW50U2VjSUQYAiABKAkSKgoKTW9kZVN0YXR1cxgD",
            "IAEoDjIWLnR1dG9yaWFsLlZITW9kZVN0YXR1cxIuCgxBY3Rpb25TdGF0dXMY",
            "BCABKA4yGC50dXRvcmlhbC5WSEFjdGlvblN0YXR1cxIsCgtQb3dlclN0YXR1",
            "cxgFIAEoDjIXLnR1dG9yaWFsLlZoUG93ZXJTdGF0dXMSLgoOT2JzdGFjbGVT",
            "dGF0dXMYBiABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSLgoOQmxvY2tp",
            "bmdTdGF0dXMYByABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSKQoJSElE",
            "U3RhdHVzGAggASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisKC1BhdXNl",
            "U3RhdHVzGAkgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisKC0Vycm9y",
            "U3RhdHVzGAogASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEi0KDVJlc2Vy",
            "dmVTdGF0dXMYCyABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSFAoMU2Vj",
            "X0Rpc3RhbmNlGAwgASgNEhUKDU9ic3RfRGlzdGFuY2UYDSABKAUSFwoPT2Jz",
            "dF9WZWhpY2xlX0lEGA4gASgJEhkKEVN0b3BwZWRfQmxvY2tfSURfGA8gASgJ",
            "EhYKDlN0b3BwZWRfSElEX0lEGBAgASgJEjYKFkVhcnRocXVha2VfUGF1c2Vf",
            "dGF0dXMYESABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSMwoTU2FmZXR5",
            "X1BhdXNlX1N0YXR1cxgSIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIr",
            "CgxSZXNlcnZlSW5mb3MYEyADKAsyFS50dXRvcmlhbC5SZXNlcnZlSW5mbxIx",
            "ChBEcml2aW5nRGlyZWN0aW9uGBQgASgOMhcudHV0b3JpYWwuRHJpdmVEaXJj",
            "dGlvbhINCgVTcGVlZBgVIAEoBRINCgVBbmdsZRgWIAEoARINCgVYQXhpcxgX",
            "IAEoARINCgVZQXhpcxgYIAEoARIOCgZDbWRfSUQYGSABKAkSDgoGQk9YX0lE",
            "GBogASgJEg4KBkNTVF9JRBgbIAEoCRIOCgZMT1RfSUQYHCABKAkSLQoGSGFz",
            "Qm94GB0gASgOMh0udHV0b3JpYWwuVmhMb2FkQ2FycmllclN0YXR1cxIQCghD",
            "YXJCb3hJRBgeIAEoCRItCgZIYXNDc3QYHyABKA4yHS50dXRvcmlhbC5WaExv",
            "YWRDYXJyaWVyU3RhdHVzEhAKCENhckNzdElEGCAgASgJIqgIChhJRF8xNDRf",
            "U1RBVFVTX0NIQU5HRV9SRVASFAoMQ3VycmVudEFkcklEGAEgASgJEhQKDEN1",
            "cnJlbnRTZWNJRBgCIAEoCRIqCgpNb2RlU3RhdHVzGAMgASgOMhYudHV0b3Jp",
            "YWwuVkhNb2RlU3RhdHVzEi4KDEFjdGlvblN0YXR1cxgEIAEoDjIYLnR1dG9y",
            "aWFsLlZIQWN0aW9uU3RhdHVzEiwKC1Bvd2VyU3RhdHVzGAUgASgOMhcudHV0",
            "b3JpYWwuVmhQb3dlclN0YXR1cxIuCg5PYnN0YWNsZVN0YXR1cxgGIAEoDjIW",
            "LnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIuCg5CbG9ja2luZ1N0YXR1cxgHIAEo",
            "DjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIpCglISURTdGF0dXMYCCABKA4y",
            "Fi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSKwoLUGF1c2VTdGF0dXMYCSABKA4y",
            "Fi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSKwoLRXJyb3JTdGF0dXMYCiABKA4y",
            "Fi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSLQoNUmVzZXJ2ZVN0YXR1cxgLIAEo",
            "DjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIUCgxTZWNfRGlzdGFuY2UYDCAB",
            "KA0SFQoNT2JzdF9EaXN0YW5jZRgNIAEoBRIXCg9PYnN0X1ZlaGljbGVfSUQY",
            "DiABKAkSGQoRU3RvcHBlZF9CbG9ja19JRF8YDyABKAkSFgoOU3RvcHBlZF9I",
            "SURfSUQYECABKAkSNgoWRWFydGhxdWFrZV9QYXVzZV90YXR1cxgRIAEoDjIW",
            "LnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIzChNTYWZldHlfUGF1c2VfU3RhdHVz",
            "GBIgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisKDFJlc2VydmVJbmZv",
            "cxgTIAMoCzIVLnR1dG9yaWFsLlJlc2VydmVJbmZvEjEKEERyaXZpbmdEaXJl",
            "Y3Rpb24YFCABKA4yFy50dXRvcmlhbC5Ecml2ZURpcmN0aW9uEg0KBVNwZWVk",
            "GBUgASgFEg0KBUFuZ2xlGBYgASgBEg0KBVhBeGlzGBcgASgBEg0KBVlBeGlz",
            "GBggASgBEg4KBkNtZF9JRBgZIAEoCRIOCgZCT1hfSUQYGiABKAkSDgoGQ1NU",
            "X0lEGBsgASgJEg4KBkxPVF9JRBgcIAEoCRItCgZIYXNCb3gYHSABKA4yHS50",
            "dXRvcmlhbC5WaExvYWRDYXJyaWVyU3RhdHVzEhAKCENhckJveElEGB4gASgJ",
            "Ei0KBkhhc0NzdBgfIAEoDjIdLnR1dG9yaWFsLlZoTG9hZENhcnJpZXJTdGF0",
            "dXMSEAoIQ2FyQ3N0SUQYICABKAkiMQocSURfNDRfU1RBVFVTX0NIQU5HRV9S",
            "RVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiTwoTSURfNDVfUE9XRVJfT1BF",
            "X1JFURI4ChJPcGVyYXRpbmdQb3dlck1vZGUYASABKA4yHC50dXRvcmlhbC5P",
            "cGVyYXRpbmdQb3dlck1vZGUiLgoZSURfMTQ1X1BPV0VSX09QRV9SRVNQT05T",
            "RRIRCglSZXBseUNvZGUYASABKAUiXgoTSURfNTFfQVZPSURfUkVRVUVTVBIW",
            "Cg5EZXN0aW5hdGlvbkFkchgBIAEoCRIWCg5HdWlkZV9TZWN0aW9ucxgCIAMo",
            "CRIXCg9HdWlkZV9BZGRyZXNzZXMYAyADKAkiPAoVSURfMTUxX0FWT0lEX1JF",
            "U1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBRIQCghOZ1JlYXNvbhgCIAEoCSK/",
            "AQocSURfMTUyX0FWT0lEX0NPTVBMRVRFX1JFUE9SVBIRCglDbXBTdGF0dXMY",
            "ASABKAUSFAoMQ3VycmVudEFkcklEGAIgASgJEhQKDEN1cnJlbnRTZWNJRBgD",
            "IAEoCRIUCgxTZWNfRGlzdGFuY2UYBCABKA0SDQoFWEF4aXMYBSABKAESDQoF",
            "WUF4aXMYBiABKAESFgoORGlyZWN0aW9uQW5nbGUYByABKAESFAoMVmVoaWNs",
            "ZUFuZ2xlGAggASgBIjIKHUlEXzUyX0FWT0lEX0NPTVBMRVRFX1JFU1BPTlNF",
            "EhEKCVJlcGx5Q29kZRgBIAEoBSI+ChxJRF83MV9SQU5HRV9URUFDSElOR19S",
            "RVFVRVNUEg8KB0Zyb21BZHIYASABKAkSDQoFVG9BZHIYAiABKAkiMwoeSURf",
            "MTcxX1JBTkdFX1RFQUNISU5HX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEo",
            "BSJ0CiVJRF8xNzJfUkFOR0VfVEVBQ0hJTkdfQ09NUExFVEVfUkVQT1JUEg8K",
            "B0Zyb21BZHIYASABKAkSDQoFVG9BZHIYAiABKAkSFAoMU2VjX0Rpc3RhbmNl",
            "GAMgASgNEhUKDUNvbXBsZXRlX0NvZGUYBCABKAUiOwomSURfNzJfUkFOR0Vf",
            "VEVBQ0hJTkdfQ09NUExFVEVfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgF",
            "Ij0KG0lEXzE3NF9BRERSRVNTX1RFQUNIX1JFUE9SVBIMCgRBZGRyGAEgASgJ",
            "EhAKCFBvc2l0aW9uGAIgASgFIjEKHElEXzc0X0FERFJFU1NfVEVBQ0hfUkVT",
            "UE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIhsKGUlEXzkxX0FMQVJNX1JFU0VU",
            "X1JFUVVFU1QiMAobSURfMTkxX0FMQVJNX1JFU0VUX1JFU1BPTlNFEhEKCVJl",
            "cGx5Q29kZRgBIAEoBSJoChNJRF8xOTRfQUxBUk1fUkVQT1JUEg8KB0VyckNv",
            "ZGUYASABKAkSKAoJRXJyU3RhdHVzGAIgASgOMhUudHV0b3JpYWwuRXJyb3JT",
            "dGF0dXMSFgoORXJyRGVzY3JpcHRpb24YAyABKAkiKQoUSURfOTRfQUxBUk1f",
            "UkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIpYMCgxWRUhJQ0xFX0lORk8S",
            "FgoOaXNUY3BJcENvbm5lY3QYASABKAgSEgoKVkVISUNMRV9JRBgCIAEoCRIr",
            "CgxWRUhJQ0xFX1RZUEUYAyABKA4yFS50dXRvcmlhbC5WZWhpY2xlVHlwZRIS",
            "CgpDVVJfQURSX0lEGAQgASgJEhIKCkNVUl9TRUNfSUQYBSABKAkSFAoMQUND",
            "X1NFQ19ESVNUGAYgASgBEisKC01PREVfU1RBVFVTGAcgASgOMhYudHV0b3Jp",
            "YWwuVkhNb2RlU3RhdHVzEiwKCkFDVF9TVEFUVVMYCCABKA4yGC50dXRvcmlh",
            "bC5WSEFjdGlvblN0YXR1cxIPCgdNQ1NfQ01EGAkgASgJEhAKCE9IVENfQ01E",
            "GAogASgJEisKC0JMT0NLX1BBVVNFGAsgASgOMhYudHV0b3JpYWwuVmhTdG9w",
            "U2luZ2xlEikKCUNNRF9QQVVTRRgMIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNp",
            "bmdsZRIpCglPQlNfUEFVU0UYDSABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5n",
            "bGUSKQoJSElEX1BBVVNFGA4gASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xl",
            "EiUKBUVSUk9SGA8gASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEhAKCE9C",
            "U19ESVNUGBAgASgFEg8KB0hBU19DU1QYESABKAUSDgoGQ1NUX0lEGBIgASgJ",
            "EiUKCFVQRF9USU1FGBMgASgLMhMudHV0b3JpYWwuVGltZXN0YW1wEhgKEFZF",
            "SElDTEVfQUNDX0RJU1QYFCABKAUSFQoNTUFOVF9BQ0NfRElTVBgVIAEoBRIm",
            "CglNQU5UX0RBVEUYFiABKAsyEy50dXRvcmlhbC5UaW1lc3RhbXASEgoKR1JJ",
            "UF9DT1VOVBgXIAEoBRIXCg9HUklQX01BTlRfQ09VTlQYGCABKAUSKwoOR1JJ",
            "UF9NQU5UX0RBVEUYGSABKAsyEy50dXRvcmlhbC5UaW1lc3RhbXASEgoKSVNf",
            "UEFSS0lORxgaIAEoCBImCglQQVJLX1RJTUUYGyABKAsyEy50dXRvcmlhbC5U",
            "aW1lc3RhbXASEwoLUEFSS19BRFJfSUQYHCABKAkSEgoKSVNfQ1lDTElORxgd",
            "IAEoCBIqCg1DWUNMRVJVTl9USU1FGB4gASgLMhMudHV0b3JpYWwuVGltZXN0",
            "YW1wEhMKC0NZQ0xFUlVOX0lEGB8gASgJEhMKC1ByZWRpY3RQYXRoGCAgAygJ",
            "EhMKC0N5Y2xpbmdQYXRoGCEgAygJEhAKCHN0YXJ0QWRyGCIgASgJEg8KB0Zy",
            "b21BZHIYIyABKAkSDQoFVG9BZHIYJCABKAkSDQoFU3BlZWQYJSABKAESFAoM",
            "T2JzVmVoaWNsZUlEGCYgASgJEg4KBkFsYXJtcxgnIAMoCRImCgdDbWRUeXBl",
            "GCggASgOMhUudHV0b3JpYWwuQ29tbWFuZFR5cGUSLgoNdmhfQ01EX1N0YXR1",
            "cxgpIAEoDjIXLnR1dG9yaWFsLkNvbW1hbmRTdGF0dXMSLgoRVmhSZWNlbnRU",
            "cmFuRXZlbnQYKiABKA4yEy50dXRvcmlhbC5FdmVudFR5cGUSGQoRV2lsbFBh",
            "c3NTZWN0aW9uSUQYKyADKAkSGwoTcHJvY1Byb2dyZXNzX1BlcmNlbhgsIAEo",
            "BRI1ChRDdXJyZW50RHJpdmVEaXJjdGlvbhgtIAEoDjIXLnR1dG9yaWFsLkRy",
            "aXZlRGlyY3Rpb24SFAoMQ01EX1BSSU9USVRZGC4gASgFEhIKCkNNRF9DU1Rf",
            "SUQYLyABKAkSJQoFU3RhdGUYMCABKA4yFi50dXRvcmlhbC5WZWhpY2xlU3Rh",
            "dGUSKwoLUGF1c2VTdGF0dXMYMSABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5n",
            "bGUSMQoRU0FGRVRZX0RPT1JfUEFVU0UYMiABKA4yFi50dXRvcmlhbC5WaFN0",
            "b3BTaW5nbGUSMAoQRUFSVEhRVUFLRV9QQVVTRRgzIAEoDjIWLnR1dG9yaWFs",
            "LlZoU3RvcFNpbmdsZSL7BgoJUE9SVF9JTkZPEiYKCVRpbWVzdGFtcBgBIAEo",
            "CzITLnR1dG9yaWFsLlRpbWVzdGFtcBISCgpPcEF1dG9Nb2RlGAIgASgIEhQK",
            "DE9wTWFudWFsTW9kZRgDIAEoCBIPCgdPcEVycm9yGAQgASgIEhMKC0lzSW5w",
            "dXRNb2RlGAUgASgIEhQKDElzT3V0cHV0TW9kZRgGIAEoCBIXCg9Jc01vZGVD",
            "aGFuZ2FibGUYByABKAgSEQoJSXNBR1ZNb2RlGAggASgIEhEKCUlzTUdWTW9k",
            "ZRgJIAEoCBISCgpQb3J0V2FpdEluGAogASgIEhMKC1BvcnRXYWl0T3V0GAsg",
            "ASgIEhIKCklzQXV0b01vZGUYDCABKAgSFQoNSXNSZWFkeVRvTG9hZBgNIAEo",
            "CBIXCg9Jc1JlYWR5VG9VbmxvYWQYDiABKAgSFQoNTG9hZFBvc2l0aW9uMRgP",
            "IAEoCBIVCg1Mb2FkUG9zaXRpb24yGBAgASgIEhUKDUxvYWRQb3NpdGlvbjMY",
            "ESABKAgSFQoNTG9hZFBvc2l0aW9uNBgSIAEoCBIVCg1Mb2FkUG9zaXRpb241",
            "GBMgASgIEhUKDUxvYWRQb3NpdGlvbjcYFCABKAgSFQoNTG9hZFBvc2l0aW9u",
            "NhgVIAEoCBIVCg1Jc0NTVFByZXNlbmNlGBYgASgIEhQKDEFHVlBvcnRSZWFk",
            "eRgXIAEoCBISCgpDYW5PcGVuQm94GBggASgIEhEKCUlzQm94T3BlbhgZIAEo",
            "CBITCgtCQ1JSZWFkRG9uZRgaIAEoCBIbChNDU1RQcmVzZW5jZU1pc21hdGNo",
            "GBsgASgIEhoKEklzVHJhbnNmZXJDb21wbGV0ZRgcIAEoCBIWCg5Dc3RSZW1v",
            "dmVDaGVjaxgdIAEoCBIRCglFcnJvckNvZGUYHiABKAUSDQoFQm94SUQYHyAB",
            "KAkSEgoKQ2Fzc2V0dGVJRBggIAEoCRIOCgZQb3J0SUQYISABKAkSGAoQTG9h",
            "ZFBvc2l0aW9uQk9YMRgiIAEoCRIYChBMb2FkUG9zaXRpb25CT1gyGCMgASgJ",
            "EhgKEExvYWRQb3NpdGlvbkJPWDMYJCABKAkSGAoQTG9hZFBvc2l0aW9uQk9Y",
            "NBglIAEoCRIYChBMb2FkUG9zaXRpb25CT1g1GCYgASgJEhEKCUZpcmVBbGFy",
            "bRgnIAEoCCKAAQoWREVWSUNFX0NPTk5FQ1RJT05fSU5GTxIMCgROYW1lGAEg",
            "ASgJEiwKBFR5cGUYAiABKA4yHi50dXRvcmlhbC5EZXZpY2VDb25uZWN0aW9u",
            "VHlwZRIqCgZTdGF0dXMYAyABKA4yGi50dXRvcmlhbC5Db25uZWN0aW9uU3Rh",
            "dHVzIv0ECglMSU5FX0lORk8SIQoDUExDGAEgASgOMhQudHV0b3JpYWwuTGlu",
            "a1N0YXR1cxIiCgRIb3N0GAIgASgOMhQudHV0b3JpYWwuTGlua1N0YXR1cxIk",
            "CghIb3N0TW9kZRgDIAEoDjISLnR1dG9yaWFsLkhvc3RNb2RlEiQKCFRTQ1N0",
            "YXRlGAQgASgOMhIudHV0b3JpYWwuVFNDU3RhdGUSIQoDSU1TGAUgASgOMhQu",
            "dHV0b3JpYWwuTGlua1N0YXR1cxIoCiBDdXJybnRWZWhpY2xlTW9kZUF1dG9S",
            "ZW1vdGVDb3VudBgGIAEoBRInCh9DdXJybnRWZWhpY2xlTW9kZUF1dG9Mb2Fj",
            "bENvdW50GAcgASgFEiQKHEN1cnJudFZlaGljbGVTdGF0dXNJZGVsQ291bnQY",
            "CCABKAUSJQodQ3Vycm50VmVoaWNsZVN0YXR1c0Vycm9yQ291bnQYCSABKAUS",
            "JAocQ3Vycm50Q1NUU3RhdHVlVHJhbnNmZXJDb3VudBgKIAEoBRIjChtDdXJy",
            "bnRDU1RTdGF0dWVXYWl0aW5nQ291bnQYCyABKAUSNAosQ3Vycm50SG9zdENv",
            "bW1hbmRUcmFuc2ZlclN0YXR1ZUFzc2lnbmVkQ291bnQYDCABKAUSMworQ3Vy",
            "cm50SG9zdENvbW1hbmRUcmFuc2ZlclN0YXR1ZVdhaXRpbmdDb3VuchgNIAEo",
            "BRI/ChVEZXZpY2VDb25uZWN0aW9uSW5mb3MYDiADKAsyIC50dXRvcmlhbC5E",
            "RVZJQ0VfQ09OTkVDVElPTl9JTkZPEg4KBkxpbmVJRBgPIAEoCRITCgtBbGFy",
            "bUhhcHBlbhgQIAEoCCLOAgoRT05MSU5FX0NIRUNLX0lORk8SHwoXQ3VycmVu",
            "dFBvcnRTdGF0ZUNoZWNrZWQYASABKAgSGwoTQ3VycmVudFN0YXRlQ2hlY2tl",
            "ZBgCIAEoCBIfChdFbmhhbmNlZFZlaGljbGVzQ2hlY2tlZBgDIAEoCBIXCg9U",
            "U0NTdGF0ZUNoZWNrZWQYBCABKAgSIQoZVW5pdEFsYXJtU3RhdGVMaXN0Q2hl",
            "Y2tlZBgFIAEoCBIgChhFbmhhbmNlZFRyYW5zZmVyc0NoZWNrZWQYBiABKAgS",
            "HwoXRW5oYW5jZWRDYXJyaWVyc0NoZWNrZWQYByABKAgSHwoXQ3VycmVudFBv",
            "cnRUeXBlc0NoZWNrZWQYCCABKAgSFwoPQWxhcm1TZXRDaGVja2VkGAkgASgI",
            "EiEKGUN1cnJlbnRFUVBvcnRTdGF0ZUNoZWNrZWQYCiABKAgiiwkKD1BJTkdf",
            "Q0hFQ0tfSU5GTxIcChRNQ1NDb25uZWN0aW9uU3VjY2VzcxgBIAEoCBIfChdS",
            "b3V0ZXJDb25uZWN0aW9uU3VjY2VzcxgCIAEoCBIdChVPSFQxQ29ubmVjdGlv",
            "blN1Y2Nlc3MYAyABKAgSHQoVT0hUMkNvbm5lY3Rpb25TdWNjZXNzGAQgASgI",
            "Eh0KFU9IVDNDb25uZWN0aW9uU3VjY2VzcxgFIAEoCBIdChVPSFQ0Q29ubmVj",
            "dGlvblN1Y2Nlc3MYBiABKAgSHQoVT0hUNUNvbm5lY3Rpb25TdWNjZXNzGAcg",
            "ASgIEh0KFU9IVDZDb25uZWN0aW9uU3VjY2VzcxgIIAEoCBIdChVPSFQ3Q29u",
            "bmVjdGlvblN1Y2Nlc3MYCSABKAgSHQoVT0hUOENvbm5lY3Rpb25TdWNjZXNz",
            "GAogASgIEh0KFU9IVDlDb25uZWN0aW9uU3VjY2VzcxgLIAEoCBIeChZPSFQx",
            "MENvbm5lY3Rpb25TdWNjZXNzGAwgASgIEh4KFk9IVDExQ29ubmVjdGlvblN1",
            "Y2Nlc3MYDSABKAgSHgoWT0hUMTJDb25uZWN0aW9uU3VjY2VzcxgOIAEoCBIe",
            "ChZPSFQxM0Nvbm5lY3Rpb25TdWNjZXNzGA8gASgIEh4KFk9IVDE0Q29ubmVj",
            "dGlvblN1Y2Nlc3MYECABKAgSHAoUTVRMQ29ubmVjdGlvblN1Y2Nlc3MYESAB",
            "KAgSHAoUTVRTQ29ubmVjdGlvblN1Y2Nlc3MYEiABKAgSHQoVTVRTMkNvbm5l",
            "Y3Rpb25TdWNjZXNzGBMgASgIEh0KFUhJRDFDb25uZWN0aW9uU3VjY2VzcxgU",
            "IAEoCBIdChVISUQyQ29ubmVjdGlvblN1Y2Nlc3MYFSABKAgSHQoVSElEM0Nv",
            "bm5lY3Rpb25TdWNjZXNzGBYgASgIEh0KFUhJRDRDb25uZWN0aW9uU3VjY2Vz",
            "cxgXIAEoCBIeChZBZGFtMUNvbm5lY3Rpb25TdWNjZXNzGBggASgIEh4KFkFk",
            "YW0yQ29ubmVjdGlvblN1Y2Nlc3MYGSABKAgSHgoWQWRhbTNDb25uZWN0aW9u",
            "U3VjY2VzcxgaIAEoCBIeChZBZGFtNENvbm5lY3Rpb25TdWNjZXNzGBsgASgI",
            "EhwKFEFQMUNvbm5lY3Rpb25TdWNjZXNzGBwgASgIEhwKFEFQMkNvbm5lY3Rp",
            "b25TdWNjZXNzGB0gASgIEhwKFEFQM0Nvbm5lY3Rpb25TdWNjZXNzGB4gASgI",
            "EhwKFEFQNENvbm5lY3Rpb25TdWNjZXNzGB8gASgIEhwKFEFQNUNvbm5lY3Rp",
            "b25TdWNjZXNzGCAgASgIEhwKFEFQNkNvbm5lY3Rpb25TdWNjZXNzGCEgASgI",
            "EhwKFEFQN0Nvbm5lY3Rpb25TdWNjZXNzGCIgASgIEhwKFEFQOENvbm5lY3Rp",
            "b25TdWNjZXNzGCMgASgIEhwKFEFQOUNvbm5lY3Rpb25TdWNjZXNzGCQgASgI",
            "Eh0KFUFQMTBDb25uZWN0aW9uU3VjY2VzcxglIAEoCCLFAgoKU1lTVEVNX0xP",
            "RxIQCghkYXRlVGltZRgBIAEoCRIQCghMb2dMZXZlbBgCIAEoCRIPCgdQcm9j",
            "ZXNzGAMgASgJEg0KBUNsYXNzGAQgASgJEg4KBk1ldGhvZBgFIAEoCRIOCgZE",
            "ZXZpY2UYBiABKAkSDQoFTG9nSUQYByABKAkSEAoIVGhyZWFkSUQYCCABKAkS",
            "DAoERGF0YRgJIAEoCRIMCgRWSElEGAogASgJEhEKCUNhcnJpZXJJRBgLIAEo",
            "CRILCgNMb3QYDCABKAkSDQoFTGV2ZWwYDSABKAkSEQoJU2VydmljZUlEGA4g",
            "ASgJEgsKA1hJRBgPIAEoCRIQCghTZXF1ZW5jZRgQIAEoCRIVCg1UcmFuc2Fj",
            "dGlvbklEGBEgASgJEg8KB0RldGFpbHMYEiABKAkSDQoFSW5kZXgYEyABKAki",
            "tQEKDE1UTF9NVFNfSU5GTxIRCglTdGF0aW9uSUQYASABKAkSEwoLTmV0d29y",
            "a0xpbmsYAiABKAgSDQoFQWxpdmUYAyABKAgSDAoETW9kZRgEIAEoCBIRCglJ",
            "bnRlcmxvY2sYBSABKAgSDQoFQ2FySUQYBiABKAkSEwoLTVRMTG9jYXRpb24Y",
            "ByABKAkSFwoPU3luY2hyb25pemVUaW1lGAggASgJEhAKCGRpc3RhbmNlGAkg",
            "ASgJIi0KDVRSQU5TRkVSX0lORk8SHAoUTUNTQ29tbWFuZEF1dG9Bc3NpZ24Y",
            "ASABKAgiZAoQVElQX01FU1NBR0VfSU5GTxIMCgRUaW1lGAEgASgJEiQKCE1z",
            "Z0xldmVsGAIgASgOMhIudHV0b3JpYWwuTXNnTGV2ZWwSDwoHTWVzc2FnZRgD",
            "IAEoCRILCgNYSUQYBCABKAkiTwoWVElQX01FU1NBR0VfQ09MTEVDVElPThI1",
            "ChFUSVBfTUVTU0FHRV9JTkZPUxgBIAMoCzIaLnR1dG9yaWFsLlRJUF9NRVNT",
            "QUdFX0lORk8i4iEKDldyYXBwZXJNZXNzYWdlEgsKAklEGOgHIAEoBRIPCgZT",
            "ZXFOdW0Y6QcgASgFEkkKE0hvc3RfQmFzaWNfSW5mb19SZXAYASABKAsyKi50",
            "dXRvcmlhbC5JRF8xX0hPU1RfQkFTSUNfSU5GT19WRVJTSU9OX1JFUEgAElEK",
            "FEhvc3RfQmFzaWNfSW5mb19SZXNwGGUgASgLMjEudHV0b3JpYWwuSURfMTAx",
            "X0hPU1RfQkFTSUNfSU5GT19WRVJTSU9OX1JFU1BPTlNFSAASSQoWQmFzaWNf",
            "SW5mb19WZXJzaW9uX1JlcBhmIAEoCzInLnR1dG9yaWFsLklEXzEwMl9CQVNJ",
            "Q19JTkZPX1ZFUlNJT05fUkVQSAASTQoXQmFzaWNfSW5mb19WZXJzaW9uX1Jl",
            "c3AYAiABKAsyKi50dXRvcmlhbC5JRF8yX0JBU0lDX0lORk9fVkVSU0lPTl9S",
            "RVNQT05TRUgAEjgKDkJhc2ljX0luZm9fUmVwGAsgASgLMh4udHV0b3JpYWwu",
            "SURfMTFfQkFTSUNfSU5GT19SRVBIABI/Cg9CYXNpY19JbmZvX1Jlc3AYbyAB",
            "KAsyJC50dXRvcmlhbC5JRF8xMTFfQkFTSUNfSU5GT19SRVNQT05TRUgAEkAK",
            "ElRhdmVsbGluZ19EYXRhX1JlcBgNIAEoCzIiLnR1dG9yaWFsLklEXzEzX1RB",
            "VkVMTElOR19EQVRBX1JFUEgAEkcKE1RhdmVsbGluZ19EYXRhX1Jlc3AYcSAB",
            "KAsyKC50dXRvcmlhbC5JRF8xMTNfVEFWRUxMSU5HX0RBVEFfUkVTUE9OU0VI",
            "ABI8ChBTZWN0aW9uX0RhdGFfUmVwGA8gASgLMiAudHV0b3JpYWwuSURfMTVf",
            "U0VDVElPTl9EQVRBX1JFUEgAEkMKEVNlY3Rpb25fRGF0YV9SZXNwGHMgASgL",
            "MiYudHV0b3JpYWwuSURfMTE1X1NFQ1RJT05fREFUQV9SRVNQT05TRUgAEjwK",
            "EEFkZHJlc3NfRGF0YV9SZXAYESABKAsyIC50dXRvcmlhbC5JRF8xN19BRERS",
            "RVNTX0RBVEFfUkVQSAASQwoRQWRkcmVzc19EYXRhX1Jlc3AYdSABKAsyJi50",
            "dXRvcmlhbC5JRF8xMTdfQUREUkVTU19EQVRBX1JFU1BPTlNFSAASOAoOU2Nh",
            "bGVfRGF0YV9SZXAYEyABKAsyHi50dXRvcmlhbC5JRF8xOV9TQ0FMRV9EQVRB",
            "X1JFUEgAEj8KD1NjYWxlX0RhdGFfUmVzcBh3IAEoCzIkLnR1dG9yaWFsLklE",
            "XzExOV9TQ0FMRV9EQVRBX1JFU1BPTlNFSAASPAoQQ29udHJvbF9EYXRhX1Jl",
            "cBgVIAEoCzIgLnR1dG9yaWFsLklEXzIxX0NPTlRST0xfREFUQV9SRVBIABJD",
            "ChFDb250cm9sX0RhdGFfUmVzcBh5IAEoCzImLnR1dG9yaWFsLklEXzEyMV9D",
            "T05UUk9MX0RBVEFfUkVTUE9OU0VIABI4Cg5HdWlkZV9EYXRhX1JlcBgXIAEo",
            "CzIeLnR1dG9yaWFsLklEXzIzX0dVSURFX0RBVEFfUkVQSAASPwoPR3VpZGVf",
            "RGF0YV9SZXNwGHsgASgLMiQudHV0b3JpYWwuSURfMTIzX0dVSURFX0RBVEFf",
            "UkVTUE9OU0VIABJGChVJbmRpdmlkdWFsX1VwbG9hZF9SZXEYPSABKAsyJS50",
            "dXRvcmlhbC5JRF82MV9JTkRJVklEVUFMX1VQTE9BRF9SRVFIABJOChZJbmRp",
            "dmlkdWFsX1VwbG9hZF9SZXNwGKEBIAEoCzIrLnR1dG9yaWFsLklEXzE2MV9J",
            "TkRJVklEVUFMX1VQTE9BRF9SRVNQT05TRUgAEkgKFUdVSURFX0RhdGFfVXBs",
            "b2FkX1JlcRiiASABKAsyJi50dXRvcmlhbC5JRF8xNjJfR1VJREVfREFUQV9V",
            "UExPQURfUkVQSAASSwoWR1VJREVfRGF0YV9VcGxvYWRfUmVzcBg+IAEoCzIp",
            "LnR1dG9yaWFsLklEXzYyX0dVSURfREFUQV9VUExPQURfUkVTUE9OU0VIABJG",
            "ChVJbmRpdmlkdWFsX0NoYW5nZV9SZXEYPyABKAsyJS50dXRvcmlhbC5JRF82",
            "M19JTkRJVklEVUFMX0NIQU5HRV9SRVFIABJOChZJbmRpdmlkdWFsX0NoYW5n",
            "ZV9SZXNwGKMBIAEoCzIrLnR1dG9yaWFsLklEXzE2M19JTkRJVklEVUFMX0NI",
            "QU5HRV9SRVNQT05TRUgAEjoKD01vZGVfQ2hhbmdlX1JlcRgpIAEoCzIfLnR1",
            "dG9yaWFsLklEXzQxX01PREVfQ0hBTkdFX1JFUUgAEkIKEE1vZGVfQ2hhbmdl",
            "X1Jlc3AYjQEgASgLMiUudHV0b3JpYWwuSURfMTQxX01PREVfQ0hBTkdFX1JF",
            "U1BPTlNFSAASMgoJVHJhbnNfUmVxGB8gASgLMh0udHV0b3JpYWwuSURfMzFf",
            "VFJBTlNfUkVRVUVTVEgAEjYKClRyYW5zX1Jlc3AYgwEgASgLMh8udHV0b3Jp",
            "YWwuSURfMTMxX1RSQU5TX1JFU1BPTlNFSAASPwoMVHJhbl9DbXBfUmVwGIQB",
            "IAEoCzImLnR1dG9yaWFsLklEXzEzMl9UUkFOU19DT01QTEVURV9SRVBPUlRI",
            "ABJACg1UcmFuX0NtcF9SZXNwGCAgASgLMicudHV0b3JpYWwuSURfMzJfVFJB",
            "TlNfQ09NUExFVEVfUkVTUE9OU0VIABJPChBDb250cm9sX1pvbmVfUmVxGCEg",
            "ASgLMjMudHV0b3JpYWwuSURfMzNfQ09OVFJPTF9aT05FX1JFUFVFU1RfQ0FO",
            "Q0VMX1JFUVVFU1RIABJTChFDb250cm9sX1pvbmVfUmVzcBiFASABKAsyNS50",
            "dXRvcmlhbC5JRF8xMzNfQ09OVFJPTF9aT05FX1JFUFVFU1RfQ0FOQ0VMX1JF",
            "U1BPTlNFSAASSgoVQ0FSUklFUl9JRF9SZW5hbWVfUmVxGCMgASgLMikudHV0",
            "b3JpYWwuSURfMzVfQ0FSUklFUl9JRF9SRU5BTUVfUkVRVUVTVEgAEk4KFkNB",
            "UlJJRVJfSURfUmVuYW1lX1Jlc3AYhwEgASgLMisudHV0b3JpYWwuSURfMTM1",
            "X0NBUlJJRVJfSURfUkVOQU1FX1JFU1BPTlNFSAASQAoQVHJhbnNfQ2FuY2Vs",
            "X1JlcRglIAEoCzIkLnR1dG9yaWFsLklEXzM3X1RSQU5TX0NBTkNFTF9SRVFV",
            "RVNUSAASRAoRVHJhbnNfQ2FuY2VsX1Jlc3AYiQEgASgLMiYudHV0b3JpYWwu",
            "SURfMTM3X1RSQU5TX0NBTkNFTF9SRVNQT05TRUgAEkwKFVRyYW5zX0NhbmNl",
            "bF9GYWlsX1JlcRiKASABKAsyKi50dXRvcmlhbC5JRF8xMzhfVFJBTlNfQ0FO",
            "Q0VMX0ZBSUxfUkVRVUVTVEgAEkwKFlRyYW5zX0NhbmNlbF9GYWlsX1Jlc3AY",
            "JiABKAsyKi50dXRvcmlhbC5JRF8zOF9UUkFOU19DQU5DRUxfRkFJTF9SRVNQ",
            "T05TRUgAEjIKCVBhdXNlX1JlcRgnIAEoCzIdLnR1dG9yaWFsLklEXzM5X1BB",
            "VVNFX1JFUVVFU1RIABI2CgpQYXVzZV9SZXNwGIsBIAEoCzIfLnR1dG9yaWFs",
            "LklEXzEzOV9QQVVTRV9SRVNQT05TRUgAEjwKD1RyYW5zX0V2ZW50X1JlcBiG",
            "ASABKAsyIC50dXRvcmlhbC5JRF8xMzRfVFJBTlNfRVZFTlRfUkVQSAASQAoT",
            "SW1wX1RyYW5zX0V2ZW50X1JlcBiIASABKAsyIC50dXRvcmlhbC5JRF8xMzZf",
            "VFJBTlNfRVZFTlRfUkVQSAASRAoUSW1wX1RyYW5zX0V2ZW50X1Jlc3AYJCAB",
            "KAsyJC50dXRvcmlhbC5JRF8zNl9UUkFOU19FVkVOVF9SRVNQT05TRUgAEjQK",
            "ClN0YXR1c19SZXEYKyABKAsyHi50dXRvcmlhbC5JRF80M19TVEFUVVNfUkVR",
            "VUVTVEgAEjwKD1N0YXR1c19SZXFfUmVzcBiPASABKAsyIC50dXRvcmlhbC5J",
            "RF8xNDNfU1RBVFVTX1JFU1BPTlNFSAASQAoRU3RhdHVlX0NoYW5nZV9SZXAY",
            "kAEgASgLMiIudHV0b3JpYWwuSURfMTQ0X1NUQVRVU19DSEFOR0VfUkVQSAAS",
            "RAoSU3RhdHVzX0NoYW5nZV9SZXNwGCwgASgLMiYudHV0b3JpYWwuSURfNDRf",
            "U1RBVFVTX0NIQU5HRV9SRVNQT05TRUgAEjYKDVBvd2VyX09wZV9SZXEYLSAB",
            "KAsyHS50dXRvcmlhbC5JRF80NV9QT1dFUl9PUEVfUkVRSAASPgoOUG93ZXJf",
            "T3BlX1Jlc3AYkQEgASgLMiMudHV0b3JpYWwuSURfMTQ1X1BPV0VSX09QRV9S",
            "RVNQT05TRUgAEjIKCUF2b2lkX1JlcRgzIAEoCzIdLnR1dG9yaWFsLklEXzUx",
            "X0FWT0lEX1JFUVVFU1RIABI2CgpBdm9pZF9SZXNwGJcBIAEoCzIfLnR1dG9y",
            "aWFsLklEXzE1MV9BVk9JRF9SRVNQT05TRUgAEkUKEkF2b2lkX0NvbXBsZXRl",
            "X1JlcBiYASABKAsyJi50dXRvcmlhbC5JRF8xNTJfQVZPSURfQ09NUExFVEVf",
            "UkVQT1JUSAASRgoTQXZvaWRfQ29tcGxldGVfUmVzcBg0IAEoCzInLnR1dG9y",
            "aWFsLklEXzUyX0FWT0lEX0NPTVBMRVRFX1JFU1BPTlNFSAASRAoSUmFuZ2Vf",
            "VGVhY2hpbmdfUmVxGEcgASgLMiYudHV0b3JpYWwuSURfNzFfUkFOR0VfVEVB",
            "Q0hJTkdfUkVRVUVTVEgAEkgKE1JhbmdlX1RlYWNoaW5nX1Jlc3AYqwEgASgL",
            "MigudHV0b3JpYWwuSURfMTcxX1JBTkdFX1RFQUNISU5HX1JFU1BPTlNFSAAS",
            "UgoWUmFuZ2VfVGVhY2hpbmdfQ21wX1JlcBisASABKAsyLy50dXRvcmlhbC5J",
            "RF8xNzJfUkFOR0VfVEVBQ0hJTkdfQ09NUExFVEVfUkVQT1JUSAASUwoXUmFu",
            "Z2VfVGVhY2hpbmdfQ21wX1Jlc3AYSCABKAsyMC50dXRvcmlhbC5JRF83Ml9S",
            "QU5HRV9URUFDSElOR19DT01QTEVURV9SRVNQT05TRUgAEkMKEUFkZHJlc3Nf",
            "VGVhY2hfUmVwGK4BIAEoCzIlLnR1dG9yaWFsLklEXzE3NF9BRERSRVNTX1RF",
            "QUNIX1JFUE9SVEgAEkQKEkFkZHJlc3NfVGVhY2hfUmVzcBhKIAEoCzImLnR1",
            "dG9yaWFsLklEXzc0X0FERFJFU1NfVEVBQ0hfUkVTUE9OU0VIABI+Cg9BbGFy",
            "bV9SZXNldF9SZXEYWyABKAsyIy50dXRvcmlhbC5JRF85MV9BTEFSTV9SRVNF",
            "VF9SRVFVRVNUSAASQgoQQWxhcm1fUmVzZXRfUmVzcBi/ASABKAsyJS50dXRv",
            "cmlhbC5JRF8xOTFfQUxBUk1fUkVTRVRfUkVTUE9OU0VIABIzCglBbGFybV9S",
            "ZXAYwgEgASgLMh0udHV0b3JpYWwuSURfMTk0X0FMQVJNX1JFUE9SVEgAEjQK",
            "CkFsYXJtX1Jlc3AYXiABKAsyHi50dXRvcmlhbC5JRF85NF9BTEFSTV9SRVNQ",
            "T05TRUgAQgUKA21zZyKZAgoSU1lTVEVNUFJPQ0VTU19JTkZPEgwKBFRJTUUY",
            "ASABKAkSCwoDU0VRGAIgASgEEhEKCUxPR19MRVZFTBgDIAEoCRINCgVDTEFT",
            "UxgEIAEoCRIOCgZNRVRIT0QYBSABKAkSDgoGREVWSUNFGAYgASgJEgwKBERB",
            "VEEYByABKAkSDQoFVkhfSUQYCCABKAkSDgoGQ1JSX0lEGAkgASgJEgwKBFRZ",
            "UEUYCiABKAkSDgoGTE9HX0lEGAsgASgJEhEKCVRIUkVBRF9JRBgMIAEoCRIL",
            "CgNMT1QYDSABKAkSDQoFTEVWRUwYDiABKAkSCwoDWElEGA8gASgJEg4KBlRS",
            "WF9JRBgQIAEoCRIPCgdERVRBSUxTGBEgASgJIowBCgxIT1NUTE9HX0lORk8S",
            "DAoEVElNRRgBIAEoCRINCgVFUV9JRBgCIAEoCRIUCgxTRU5EX1JFQ0VJVkUY",
            "AyABKAkSCgoCU1gYBCABKAkSCgoCRlkYBSABKAkSDgoGREVWSUNFGAYgASgJ",
            "EhAKCEZVTl9OQU1FGAcgASgJEg8KB01FU1NBR0UYCCABKAki1AEKCkVRTE9H",
            "X0lORk8SDAoEVElNRRgBIAEoCRIUCgxTRU5EX1JFQ0VJVkUYAiABKAkSEAoI",
            "RlVOX05BTUUYAyABKAkSDgoGU0VRX05PGAQgASgFEg0KBVZIX0lEGAUgASgJ",
            "EhMKC09IVENfQ01EX0lEGAYgASgJEhAKCEFDVF9UWVBFGAcgASgJEhIKCk1D",
            "U19DTURfSUQYCCABKAkSEgoKRVZFTlRfVFlQRRgJIAEoCRIRCglWSF9TVEFU",
            "VVMYCiABKAkSDwoHTUVTU0FHRRgLIAEoCSqzAQoKQWN0aXZlVHlwZRIICgRN",
            "T1ZFEAASCAoETE9BRBABEgoKBlVOTE9BRBACEg4KCkxPQURVTkxPQUQQAxII",
            "CgRIT01FEAQSDAoIT1ZFUlJJREUQBRILCgdNVExIT01FEAcSCAoEU0NBThAI",
            "Eg0KCU1PVkVUT01UTBAKEg0KCVNZU1RFTU9VVBALEgwKCFNZU1RFTUlOEAwS",
            "DwoLVEVDSElOR01PVkUQDRIJCgVST1VORBBjKusCCglFdmVudFR5cGUSEAoM",
            "TG9hZEFycml2YWxzEAASEAoMTG9hZENvbXBsZXRlEAESEgoOVW5sb2FkQXJy",
            "aXZhbHMQAhISCg5VbmxvYWRDb21wbGV0ZRADEhUKEUFkck9yTW92ZUFycml2",
            "YWxzEAQSCwoHQWRyUGFzcxAFEg0KCU1vdmVQYXVzZRAGEg8KC01vdmVSZXN0",
            "YXJ0EAcSDgoKUmVzZXJ2ZVJlcRAIEgwKCEJsb2NrUmVxEAkSCgoGSElEUmVx",
            "EAoSDwoLQmxvY2tISURSZXEQCxINCglWSExvYWRpbmcQDBIPCgtWSFVubG9h",
            "ZGluZxANEgsKB0JDUlJlYWQQDhIRCg1Eb3VibGVTdG9yYWdlEA8SEgoORW1w",
            "dHlSZXRyaWV2YWwQEBIICgRTY2FuEBESEAoMQmxvY2tSZWxlYXNlEBUSDgoK",
            "SElEUmVsZWFzZRAWEhMKD0Jsb2NrSElEUmVsZWFzZRAXKqIECg5Db21wbGV0",
            "ZVN0YXR1cxIRCg1DbXBTdGF0dXNNb3ZlEAASEQoNQ21wU3RhdHVzTG9hZBAB",
            "EhMKD0NtcFN0YXR1c1VubG9hZBACEhcKE0NtcFN0YXR1c0xvYWR1bmxvYWQQ",
            "AxIRCg1DbXBTdGF0dXNIb21lEAQSFQoRQ21wU3RhdHVzT3ZlcnJpZGUQBRIY",
            "ChRDbXBTdGF0dXNDc3RJRFJlbm1hZRAGEhQKEENtcFN0YXR1c01UTEhvbWUQ",
            "BxIRCg1DbXBTdGF0dXNTY2FuEAgSFgoSQ21wU3RhdHVzTW92ZVRvTVRMEAoS",
            "FgoSQ21wU3RhdHVzU3lzdGVtT3V0EAsSFQoRQ21wU3RhdHVzU3lzdGVtSW4Q",
            "DBIYChRDbXBTdGF0dXNUZWNoaW5nTW92ZRANEhMKD0NtcFN0YXR1c0NhbmNl",
            "bBAUEhIKDkNtcFN0YXR1c0Fib3J0EBUSGQoVQ21wU3RhdHVzVmVoaWNsZUFi",
            "b3J0EBYSFwoTQ21wU3RhdHVzSURNaXNNYXRjaBAXEhkKFUNtcFN0YXR1c0lE",
            "UmVhZEZhaWxlZBAYEhwKGENtcFN0YXR1c0lEUmVhZER1cGxpY2F0ZRAZEhsK",
            "F0NtcFN0YXR1c0ludGVybG9ja0Vycm9yEEASHQoZQ21wU3RhdHVzTG9uZ1Rp",
            "bWVJbmFjdGlvbhBiEhwKGENtcFN0YXR1c0ZvcmNlRmluaXNoQnlPcBBjKswB",
            "Cg1DTURDYW5jZWxUeXBlEgwKCENNRF9Ob25lEAASDQoJQ01EX1JldHJ5EAES",
            "DgoKQ01EX0NhbmNlbBAUEg0KCUNNRF9BYm9ydBAVEhoKFkNNRF9DYW5jZWxf",
            "SURfTWlzbWF0Y2gQFxIdChlDTURfQ2FuY2VsX0lEX1JlYWRfRmFpbGVkEBgS",
            "IAocQ01EX0NhbmNlbF9JRF9SZWFkX0R1cGxpY2F0ZRAZEiIKHkNNRF9DYW5j",
            "ZWxfSURfUmVhZF9Gb3JjZUZpbmlzaBAaKiUKClBhdXNlRXZlbnQSDAoIQ29u",
            "dGludWUQABIJCgVQYXVzZRABKukBCglQYXVzZVR5cGUSEgoOUGF1c2VUeXBl",
            "X05vbmUQABISCg5QYXVzZVR5cGVfT0h4QxABEhMKD1BhdXNlVHlwZV9CbG9j",
            "axACEhEKDVBhdXNlVHlwZV9ISUQQAxIYChRQYXVzZVR5cGVfRWFydGhRdWFr",
            "ZRAEEhQKEFBhdXNlVHlwZV9TYWZldHkQBRIVChFQYXVzZVR5cGVfUmVzZXJ2",
            "ZRAGEhkKFVBhdXNlVHlwZV9NYW51YWxCbG9jaxAHEhcKE1BhdXNlVHlwZV9N",
            "YW51YWxISUQQCBIRCg1QYXVzZVR5cGVfQWxsEAkqJQoNVmhHdWlkZVN0YXR1",
            "cxIKCgZVbmxvY2sQABIICgRMb2NrEAEqHwoIUGFzc1R5cGUSCAoEUGFzcxAA",
            "EgkKBUJsb2NrEAEqTAoPRV9BcmVhU2Vuc29yRGlyEhYKEkFyZWFTZW5zb3JE",
            "aXJfTm9uZRAAEgwKCFN0cmFpZ2h0EAESCAoETGVmdBACEgkKBVJpZ2h0EAMq",
            "OwoPT3BlcmF0aW5nVkhNb2RlEhIKDk9wZXJhdGluZ19BdXRvEAASFAoQT3Bl",
            "cmF0aW5nX01hbnVhbBABKmAKC0NvbnRyb2xUeXBlEgsKB05vdGhpbmcQABIV",
            "ChFDb250cm9sVHlwZV9CbG9jaxAEEhMKD0NvbnRyb2xUeXBlX0hJRBAFEhgK",
            "FENvbnRyb2xUeXBlX1Jlc2VydmVyEAYqTgoNRHJpdmVEaXJjdGlvbhIRCg1E",
            "cml2ZURpcl9Ob25lEAASFAoQRHJpdmVEaXJfRm9yd2FyZBABEhQKEERyaXZl",
            "RGlyX1JldmVyc2UQAipHCg1SZXNlcnZlUmVzdWx0EhkKFVJlc2VydmVSZXN1",
            "bHRfU3VjY2VzcxAAEhsKF1Jlc2VydmVSZXN1bHRfVW5zdWNjZXNzEAEqQwoN",
            "QkNSUmVhZFJlc3VsdBIOCgpCQ1JfTm9ybWFsEAASEAoMQkNSX1JlYWRGYWls",
            "EAESEAoMQkNSX01pc01hdGNoEAIqjgEKDFZITW9kZVN0YXR1cxIICgROb25l",
            "EAASFQoRSW5pdGlhbF9Qb3dlcl9PRkYQARIUChBJbml0aWFsX1Bvd2VyX09O",
            "EAISCgoGTWFudWFsEAMSDwoLQXV0b19SZW1vdGUQBBIOCgpBdXRvX0xvY2Fs",
            "EAUSDAoIQXV0b19NVFMQBhIMCghBdXRvX01UTBAHKmAKDlZIQWN0aW9uU3Rh",
            "dHVzEg0KCU5vQ29tbWFuZBAAEg4KCkNvbW1hbmRpbmcQARIMCghUZWFjaGlu",
            "ZxAFEhMKD0dyaXBwZXJUZWFjaGluZxAGEgwKCEN5Y2xlUnVuEAcqLAoNVmhQ",
            "b3dlclN0YXR1cxINCglQb3dlcl9PZmYQABIMCghQb3dlcl9PbhABKi4KE1Zo",
            "TG9hZENhcnJpZXJTdGF0dXMSDAoITm90RXhpc3QQABIJCgVFeGlzdBABKjUK",
            "DFZoU3RvcFNpbmdsZRISCg5TdG9wU2luZ2xlX09mZhAAEhEKDVN0b3BTaW5n",
            "bGVfT24QASpFChJPcGVyYXRpbmdQb3dlck1vZGUSFwoTT3BlcmF0aW5nX1Bv",
            "d2VyX09mZhAAEhYKEk9wZXJhdGluZ19Qb3dlcl9PbhABKikKC0Vycm9yU3Rh",
            "dHVzEg0KCUVycl9SZXNldBAAEgsKB0Vycl9TZXQQASpCCgtWZWhpY2xlVHlw",
            "ZRIPCgtWaFR5cGVfTm9uZRAAEhAKDFZoVHlwZV9DbGVhbhABEhAKDFZoVHlw",
            "ZV9EaXJ0eRACKsgBCgtDb21tYW5kVHlwZRIMCghDTURfTW92ZRAAEhEKDUNN",
            "RF9Nb3ZlX1BhcmsQARITCg9DTURfTW92ZV9NVFBvcnQQAhIMCghDTURfTG9h",
            "ZBADEg4KCkNNRF9VbmxvYWQQBBISCg5DTURfTG9hZFVubG9hZBAFEhAKDENN",
            "RF9UZWFjaGluZxAGEhAKDENNRF9Db250aW51ZRAHEg0KCUNNRF9Sb3VuZBAI",
            "EgwKCENNRF9Ib21lEAkSEAoMQ01EX092ZXJyaWRlEAoq9gEKDUNvbW1hbmRT",
            "dGF0dXMSDwoLQ01EU3RfUXVldWUQABIRCg1DTURTdF9TZW5kaW5nEAESEwoP",
            "Q01EU3RfRXhlY3V0aW9uEAISEgoOQ01EU3RfQWJvcnRpbmcQAxITCg9DTURT",
            "dF9DYW5jZWxpbmcQBBITCg9DTURTdF9Ob3JtYWxFbmQQBRIaChZDTURTdF9B",
            "Ym5vcm1hbEVuZEJ5T0hUEAYSGgoWQ01EU3RfQWJub3JtYWxFbmRCeU1DUxAH",
            "EhsKF0NNRFN0X0Fibm9ybWFsRW5kQnlPSFRDEAgSGQoVQ01EU3RfQ2FuY2Vs",
            "RW5kQnlPSFRDEAkqIgoLU2VjdGlvblR5cGUSCgoGTm9ybWFsEAASBwoDTVRM",
            "EAEqRgoIVFNDU3RhdGUSCwoHVFNDTk9ORRAAEgoKBlRTQ0lOVBABEgoKBlBB",
            "VVNFRBACEggKBEFVVE8QAxILCgdQQVVTSU5HEAQqdwoIVFNDRXZlbnQSDgoK",
            "VFNDSW5pdGlhbBAAEh8KG1N5c3RlbVN0YXJ0ZWRVcFN1Y2Nlc3NmdWxseRAB",
            "Eg4KClRTQ1Jlc3VtZWQQAhIXChNUQ1NSZXF1ZXN0ZWRUb1BhdXNlEAMSEQoN",
            "UGF1c2VDb21wbGV0ZRAEKuMBCgxWZWhpY2xlU3RhdGUSFQoRVmVoaWNsZVN0",
            "YXRlX05vbmUQABIXChNWZWhpY2xlU3RhdGVfUmVtb3ZlEAESHAoYVmVoaWNs",
            "ZVN0YXRlX05vdEFzc2lnbmVkEAISGAoUVmVoaWNsZVN0YXRlX0Vucm91dGUQ",
            "AxIXChNWZWhpY2xlU3RhdGVfUGFya2VkEAQSGgoWVmVoaWNsZVN0YXRlX0Fj",
            "cXVpcmluZxAFEhsKF1ZlaGljbGVTdGF0ZV9EZXBvc2l0aW5nEAYSGQoVVmVo",
            "aWNsZVN0YXRlX0Fzc2lnbmVkEAcqJgoKTGlua1N0YXR1cxIMCghMaW5rRmFp",
            "bBAAEgoKBkxpbmtPSxABKjoKCEhvc3RNb2RlEgsKB09mZmxpbmUQABIQCgxP",
            "bmxpbmVSZW1vdGUQARIPCgtPbmxpbmVMb2NhbBACKm8KFERldmljZUNvbm5l",
            "Y3Rpb25UeXBlEhwKGERldmljZUNvbm5lY3Rpb25UeXBlX01DUxAAEhwKGERl",
            "dmljZUNvbm5lY3Rpb25UeXBlX1BMQxABEhsKF0RldmljZUNvbm5lY3Rpb25U",
            "eXBlX0FQEAIqUAoQQ29ubmVjdGlvblN0YXR1cxIcChhDb25uZWN0aW9uU3Rh",
            "dHVzX1N1Y2Nlc3MQABIeChpDb25uZWN0aW9uU3RhdHVzX1Vuc3VjY2VzcxAB",
            "Kk0KGFBvcnRTdGF0aW9uU2VydmljZVN0YXR1cxIQCgxOb0RlZmluaXRpb24Q",
            "ABIQCgxPdXRPZlNlcnZpY2UQARINCglJblNlcnZpY2UQAipZChFQb3J0U3Rh",
            "dGlvblN0YXR1cxIICgREb3duEAASDwoLTG9hZFJlcXVlc3QQARIRCg1Vbmxv",
            "YWRSZXF1ZXN0EAISCAoEV2FpdBADEgwKCERpc2FibGVkEAQqRAoITXNnTGV2",
            "ZWwSEQoNTXNnTGV2ZWxfSW5mbxAAEhEKDU1zZ0xldmVsX1dhcm4QARISCg5N",
            "c2dMZXZlbF9FcnJvchACKi8KB01UeE1vZGUSEgoOTVR4TW9kZV9NYW51YWwQ",
            "ABIQCgxNVHhNb2RlX0F1dG8QASpTCgtNVExMb2NhdGlvbhIUChBNVExMb2Nh",
            "dGlvbl9Ob25lEAASFQoRTVRMTG9jYXRpb25fVXBwZXIQARIXChNNVExMb2Nh",
            "dGlvbl9Cb3R0b3JuEAIqRwoPTVRMTW92aW5nU3RhdHVzEhgKFE1UTE1vdmlu",
            "Z1N0YXR1c19TdG9wEAASGgoWTVRMTW92aW5nU3RhdHVzX01vdmluZxABKkQK",
            "DFZoSW5Qb3NpdGlvbhIYChRWaEluUG9zaXRpb25fTm90aGluZxAAEhoKFlZo",
            "SW5Qb3NpdGlvbl9JblBvc3Rpb24QAUKRAQoUY29tLmV4YW1wbGUudHV0b3Jp",
            "YWxCEUFkZHJlc3NCb29rUHJvdG9zUAFaK2dpdGh1Yi5jb20vZ29sYW5nL3By",
            "b3RvYnVmL3B0eXBlcy90aW1lc3RhbXD4AQGiAgNHUEKqAi1jb20ubWlybGUu",
            "aWJnM2swLnNjLlByb3RvY29sRm9ybWF0Lk9IVE1lc3NhZ2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CompleteStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.E_AreaSensorDir), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingVHMode), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveResult), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.BCRReadResult), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingPowerMode), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ErrorStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.SectionType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TSCState), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TSCEvent), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleState), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.HostMode), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DeviceConnectionType), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ConnectionStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PortStationServiceStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PortStationStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MsgLevel), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MTxMode), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MTLLocation), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MTLMovingStatus), typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhInPosition), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_1_HOST_BASIC_INFO_VERSION_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_1_HOST_BASIC_INFO_VERSION_REP.Parser, new[]{ "DataDateTimeYear", "DataDateTimeMonth", "DataDateTimeDay", "DataDateTimeHour", "DataDateTimeMinute", "DataDateTimeSecond", "CurrentTimeYear", "CurrentTimeMonth", "CurrentTimeDay", "CurrentTimeHour", "CurrentTimeMinute", "CurrentTimeSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_102_BASIC_INFO_VERSION_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_102_BASIC_INFO_VERSION_REP.Parser, new[]{ "BasicInfoVersionYear", "BasicInfoVersionMonth", "BasicInfoVersionDay", "BasicInfoVersionHour", "BasicInfoVersionMinute", "BasicInfoVersionSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_2_BASIC_INFO_VERSION_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_2_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_11_BASIC_INFO_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_11_BASIC_INFO_REP.Parser, new[]{ "TravelBasicDataCount", "SectionDataCount", "AddressDataCount", "ScaleDataCount", "ContrlDataCount", "GuideDataCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_111_BASIC_INFO_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_111_BASIC_INFO_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_13_TAVELLING_DATA_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_13_TAVELLING_DATA_REP.Parser, new[]{ "Resolution", "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "OriginDir", "OriginSpd", "BeaemSpd", "ManualHSpd", "ManualLSpd", "TeachingSpd", "RotateDir", "EncoderPole", "PositionCompensation", "KeepDistFar", "KeepDistNear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_113_TAVELLING_DATA_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_113_TAVELLING_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Parser, new[]{ "Sections" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section.Parser, new[]{ "DriveDir", "AeraSecsor", "GuideDir", "SectionID", "FromAddr", "ToAddr", "ControlTable", "Speed", "Distance", "ChangeAreaSensor1", "ChangeGuideDir1", "ChangeSegNum1", "ChangeAreaSensor2", "ChangeGuideDir2", "ChangeSegNum2", "AtSegment" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_115_SECTION_DATA_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_115_SECTION_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Parser, new[]{ "Addresss" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address.Parser, new[]{ "Addr", "Resolution", "Loaction", "BlockRelease", "HIDRelease" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_117_ADDRESS_DATA_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_117_ADDRESS_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_19_SCALE_DATA_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_19_SCALE_DATA_REP.Parser, new[]{ "Resolution", "InposArea", "InposStability", "ScalePulse", "ScaleOffset", "ScaleReset", "ReadDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_119_SCALE_DATA_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_119_SCALE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_21_CONTROL_DATA_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_21_CONTROL_DATA_REP.Parser, new[]{ "TimeoutT1", "TimeoutT2", "TimeoutT3", "TimeoutT4", "TimeoutT5", "TimeoutT6", "TimeoutT7", "TimeoutT8", "TimeoutBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_121_CONTROL_DATA_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_121_CONTROL_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_23_GUIDE_DATA_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_23_GUIDE_DATA_REP.Parser, new[]{ "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "NormalSpd", "ManualHSpd", "ManualLSpd", "LFLockPos", "LBLockPos", "RFLockPos", "RBLockPos", "ChangeStabilityTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_123_GUIDE_DATA_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_123_GUIDE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_61_INDIVIDUAL_UPLOAD_REQ), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_61_INDIVIDUAL_UPLOAD_REQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_162_GUIDE_DATA_UPLOAD_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_162_GUIDE_DATA_UPLOAD_REP.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_63_INDIVIDUAL_CHANGE_REQ), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_63_INDIVIDUAL_CHANGE_REQ.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_31_TRANS_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_31_TRANS_REQUEST.Parser, new[]{ "CmdID", "ActType", "LoadAdr", "ToAdr", "LoadPortID", "UnloadPortID", "SecDistance", "BOXID", "CSTID", "LOTID", "GuideSectionsStartToLoad", "GuideAddressStartToLoad", "GuideSectionsToDestination", "GuideAddressToDestination" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_131_TRANS_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_131_TRANS_RESPONSE.Parser, new[]{ "CmdID", "ActType", "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_132_TRANS_COMPLETE_REPORT), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_132_TRANS_COMPLETE_REPORT.Parser, new[]{ "CmdID", "BOXID", "CSTID", "LOTID", "CmpStatus", "CurrentAdrID", "CurrentSecID", "SecDistance", "CmdDistance", "HasBox", "CarBoxID", "HasCst", "CarCstID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_32_TRANS_COMPLETE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_32_TRANS_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST.Parser, new[]{ "ControlType", "CancelSecID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE.Parser, new[]{ "ControlType", "CancelSecID", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_134_TRANS_EVENT_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_134_TRANS_EVENT_REP.Parser, new[]{ "EventType", "CurrentAdrID", "CurrentSecID", "LeftGuideLockStatus", "RightGuideLockStatus", "SecDistance", "Speed", "Angle", "XAxis", "YAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_35_CARRIER_ID_RENAME_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_35_CARRIER_ID_RENAME_REQUEST.Parser, new[]{ "OLDBOXID", "NEWBOXID", "OLDCSTID", "NEWCSTID", "OLDLOTID", "NEWLOTID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_135_CARRIER_ID_RENAME_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_135_CARRIER_ID_RENAME_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo.Parser, new[]{ "ReserveSectionID", "DriveDirction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_136_TRANS_EVENT_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_136_TRANS_EVENT_REP.Parser, new[]{ "EventType", "ReserveInfos", "RequestBlockID", "RequestHIDID", "BOXID", "CSTID", "LOTID", "ReleaseBlockAdrID", "ReleaseHIDAdrID", "LoadPortID", "UnloadPortID", "CurrentAdrID", "CurrentSecID", "SecDistance", "BCRReadResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_36_TRANS_EVENT_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_36_TRANS_EVENT_RESPONSE.Parser, new[]{ "IsBlockPass", "IsReserveSuccess", "ReserveInfos", "IsHIDPass", "RenameBOXID", "RenameCSTID", "RenameLOTID", "ReplyActiveType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_37_TRANS_CANCEL_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_37_TRANS_CANCEL_REQUEST.Parser, new[]{ "CmdID", "ActType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_137_TRANS_CANCEL_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_137_TRANS_CANCEL_RESPONSE.Parser, new[]{ "CmdID", "ActType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_138_TRANS_CANCEL_FAIL_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_138_TRANS_CANCEL_FAIL_REQUEST.Parser, new[]{ "CmdID", "ActType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_38_TRANS_CANCEL_FAIL_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_38_TRANS_CANCEL_FAIL_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_39_PAUSE_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_39_PAUSE_REQUEST.Parser, new[]{ "EventType", "PauseType", "ReserveInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_139_PAUSE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_139_PAUSE_RESPONSE.Parser, new[]{ "EventType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_41_MODE_CHANGE_REQ), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_41_MODE_CHANGE_REQ.Parser, new[]{ "OperatingVHMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_141_MODE_CHANGE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_141_MODE_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_43_STATUS_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_43_STATUS_REQUEST.Parser, new[]{ "SystemTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_143_STATUS_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_143_STATUS_RESPONSE.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "BlockingStatus", "HIDStatus", "PauseStatus", "ErrorStatus", "ReserveStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "StoppedBlockID", "StoppedHIDID", "EarthquakePauseTatus", "SafetyPauseStatus", "ReserveInfos", "DrivingDirection", "Speed", "Angle", "XAxis", "YAxis", "CmdID", "BOXID", "CSTID", "LOTID", "HasBox", "CarBoxID", "HasCst", "CarCstID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_144_STATUS_CHANGE_REP), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_144_STATUS_CHANGE_REP.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "BlockingStatus", "HIDStatus", "PauseStatus", "ErrorStatus", "ReserveStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "StoppedBlockID", "StoppedHIDID", "EarthquakePauseTatus", "SafetyPauseStatus", "ReserveInfos", "DrivingDirection", "Speed", "Angle", "XAxis", "YAxis", "CmdID", "BOXID", "CSTID", "LOTID", "HasBox", "CarBoxID", "HasCst", "CarCstID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_44_STATUS_CHANGE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_44_STATUS_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_45_POWER_OPE_REQ), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_45_POWER_OPE_REQ.Parser, new[]{ "OperatingPowerMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_145_POWER_OPE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_145_POWER_OPE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_51_AVOID_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_51_AVOID_REQUEST.Parser, new[]{ "DestinationAdr", "GuideSections", "GuideAddresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_151_AVOID_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_151_AVOID_RESPONSE.Parser, new[]{ "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_152_AVOID_COMPLETE_REPORT), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_152_AVOID_COMPLETE_REPORT.Parser, new[]{ "CmpStatus", "CurrentAdrID", "CurrentSecID", "SecDistance", "XAxis", "YAxis", "DirectionAngle", "VehicleAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_52_AVOID_COMPLETE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_52_AVOID_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_71_RANGE_TEACHING_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_71_RANGE_TEACHING_REQUEST.Parser, new[]{ "FromAdr", "ToAdr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_171_RANGE_TEACHING_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_171_RANGE_TEACHING_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT.Parser, new[]{ "FromAdr", "ToAdr", "SecDistance", "CompleteCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_174_ADDRESS_TEACH_REPORT), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_174_ADDRESS_TEACH_REPORT.Parser, new[]{ "Addr", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_74_ADDRESS_TEACH_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_74_ADDRESS_TEACH_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_91_ALARM_RESET_REQUEST), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_91_ALARM_RESET_REQUEST.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_191_ALARM_RESET_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_191_ALARM_RESET_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_194_ALARM_REPORT), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_194_ALARM_REPORT.Parser, new[]{ "ErrCode", "ErrStatus", "ErrDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_94_ALARM_RESPONSE), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_94_ALARM_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VEHICLE_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VEHICLE_INFO.Parser, new[]{ "IsTcpIpConnect", "VEHICLEID", "VEHICLETYPE", "CURADRID", "CURSECID", "ACCSECDIST", "MODESTATUS", "ACTSTATUS", "MCSCMD", "OHTCCMD", "BLOCKPAUSE", "CMDPAUSE", "OBSPAUSE", "HIDPAUSE", "ERROR", "OBSDIST", "HASCST", "CSTID", "UPDTIME", "VEHICLEACCDIST", "MANTACCDIST", "MANTDATE", "GRIPCOUNT", "GRIPMANTCOUNT", "GRIPMANTDATE", "ISPARKING", "PARKTIME", "PARKADRID", "ISCYCLING", "CYCLERUNTIME", "CYCLERUNID", "PredictPath", "CyclingPath", "StartAdr", "FromAdr", "ToAdr", "Speed", "ObsVehicleID", "Alarms", "CmdType", "VhCMDStatus", "VhRecentTranEvent", "WillPassSectionID", "ProcProgressPercen", "CurrentDriveDirction", "CMDPRIOTITY", "CMDCSTID", "State", "PauseStatus", "SAFETYDOORPAUSE", "EARTHQUAKEPAUSE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PORT_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PORT_INFO.Parser, new[]{ "Timestamp", "OpAutoMode", "OpManualMode", "OpError", "IsInputMode", "IsOutputMode", "IsModeChangable", "IsAGVMode", "IsMGVMode", "PortWaitIn", "PortWaitOut", "IsAutoMode", "IsReadyToLoad", "IsReadyToUnload", "LoadPosition1", "LoadPosition2", "LoadPosition3", "LoadPosition4", "LoadPosition5", "LoadPosition7", "LoadPosition6", "IsCSTPresence", "AGVPortReady", "CanOpenBox", "IsBoxOpen", "BCRReadDone", "CSTPresenceMismatch", "IsTransferComplete", "CstRemoveCheck", "ErrorCode", "BoxID", "CassetteID", "PortID", "LoadPositionBOX1", "LoadPositionBOX2", "LoadPositionBOX3", "LoadPositionBOX4", "LoadPositionBOX5", "FireAlarm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO.Parser, new[]{ "Name", "Type", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LINE_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LINE_INFO.Parser, new[]{ "PLC", "Host", "HostMode", "TSCState", "IMS", "CurrntVehicleModeAutoRemoteCount", "CurrntVehicleModeAutoLoaclCount", "CurrntVehicleStatusIdelCount", "CurrntVehicleStatusErrorCount", "CurrntCSTStatueTransferCount", "CurrntCSTStatueWaitingCount", "CurrntHostCommandTransferStatueAssignedCount", "CurrntHostCommandTransferStatueWaitingCounr", "DeviceConnectionInfos", "LineID", "AlarmHappen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ONLINE_CHECK_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ONLINE_CHECK_INFO.Parser, new[]{ "CurrentPortStateChecked", "CurrentStateChecked", "EnhancedVehiclesChecked", "TSCStateChecked", "UnitAlarmStateListChecked", "EnhancedTransfersChecked", "EnhancedCarriersChecked", "CurrentPortTypesChecked", "AlarmSetChecked", "CurrentEQPortStateChecked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PING_CHECK_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PING_CHECK_INFO.Parser, new[]{ "MCSConnectionSuccess", "RouterConnectionSuccess", "OHT1ConnectionSuccess", "OHT2ConnectionSuccess", "OHT3ConnectionSuccess", "OHT4ConnectionSuccess", "OHT5ConnectionSuccess", "OHT6ConnectionSuccess", "OHT7ConnectionSuccess", "OHT8ConnectionSuccess", "OHT9ConnectionSuccess", "OHT10ConnectionSuccess", "OHT11ConnectionSuccess", "OHT12ConnectionSuccess", "OHT13ConnectionSuccess", "OHT14ConnectionSuccess", "MTLConnectionSuccess", "MTSConnectionSuccess", "MTS2ConnectionSuccess", "HID1ConnectionSuccess", "HID2ConnectionSuccess", "HID3ConnectionSuccess", "HID4ConnectionSuccess", "Adam1ConnectionSuccess", "Adam2ConnectionSuccess", "Adam3ConnectionSuccess", "Adam4ConnectionSuccess", "AP1ConnectionSuccess", "AP2ConnectionSuccess", "AP3ConnectionSuccess", "AP4ConnectionSuccess", "AP5ConnectionSuccess", "AP6ConnectionSuccess", "AP7ConnectionSuccess", "AP8ConnectionSuccess", "AP9ConnectionSuccess", "AP10ConnectionSuccess" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.SYSTEM_LOG), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.SYSTEM_LOG.Parser, new[]{ "DateTime", "LogLevel", "Process", "Class", "Method", "Device", "LogID", "ThreadID", "Data", "VHID", "CarrierID", "Lot", "Level", "ServiceID", "XID", "Sequence", "TransactionID", "Details", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MTL_MTS_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MTL_MTS_INFO.Parser, new[]{ "StationID", "NetworkLink", "Alive", "Mode", "Interlock", "CarID", "MTLLocation", "SynchronizeTime", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TRANSFER_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TRANSFER_INFO.Parser, new[]{ "MCSCommandAutoAssign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO.Parser, new[]{ "Time", "MsgLevel", "Message", "XID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_COLLECTION), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_COLLECTION.Parser, new[]{ "TIPMESSAGEINFOS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.WrapperMessage), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.WrapperMessage.Parser, new[]{ "ID", "SeqNum", "HostBasicInfoRep", "HostBasicInfoResp", "BasicInfoVersionRep", "BasicInfoVersionResp", "BasicInfoRep", "BasicInfoResp", "TavellingDataRep", "TavellingDataResp", "SectionDataRep", "SectionDataResp", "AddressDataRep", "AddressDataResp", "ScaleDataRep", "ScaleDataResp", "ControlDataRep", "ControlDataResp", "GuideDataRep", "GuideDataResp", "IndividualUploadReq", "IndividualUploadResp", "GUIDEDataUploadReq", "GUIDEDataUploadResp", "IndividualChangeReq", "IndividualChangeResp", "ModeChangeReq", "ModeChangeResp", "TransReq", "TransResp", "TranCmpRep", "TranCmpResp", "ControlZoneReq", "ControlZoneResp", "CARRIERIDRenameReq", "CARRIERIDRenameResp", "TransCancelReq", "TransCancelResp", "TransCancelFailReq", "TransCancelFailResp", "PauseReq", "PauseResp", "TransEventRep", "ImpTransEventRep", "ImpTransEventResp", "StatusReq", "StatusReqResp", "StatueChangeRep", "StatusChangeResp", "PowerOpeReq", "PowerOpeResp", "AvoidReq", "AvoidResp", "AvoidCompleteRep", "AvoidCompleteResp", "RangeTeachingReq", "RangeTeachingResp", "RangeTeachingCmpRep", "RangeTeachingCmpResp", "AddressTeachRep", "AddressTeachResp", "AlarmResetReq", "AlarmResetResp", "AlarmRep", "AlarmResp" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.SYSTEMPROCESS_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.SYSTEMPROCESS_INFO.Parser, new[]{ "TIME", "SEQ", "LOGLEVEL", "CLASS", "METHOD", "DEVICE", "DATA", "VHID", "CRRID", "TYPE", "LOGID", "THREADID", "LOT", "LEVEL", "XID", "TRXID", "DETAILS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.HOSTLOG_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.HOSTLOG_INFO.Parser, new[]{ "TIME", "EQID", "SENDRECEIVE", "SX", "FY", "DEVICE", "FUNNAME", "MESSAGE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EQLOG_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EQLOG_INFO.Parser, new[]{ "TIME", "SENDRECEIVE", "FUNNAME", "SEQNO", "VHID", "OHTCCMDID", "ACTTYPE", "MCSCMDID", "EVENTTYPE", "VHSTATUS", "MESSAGE" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ActiveType {
    [pbr::OriginalName("MOVE")] Move = 0,
    [pbr::OriginalName("LOAD")] Load = 1,
    [pbr::OriginalName("UNLOAD")] Unload = 2,
    [pbr::OriginalName("LOADUNLOAD")] Loadunload = 3,
    [pbr::OriginalName("HOME")] Home = 4,
    [pbr::OriginalName("OVERRIDE")] Override = 5,
    [pbr::OriginalName("MTLHOME")] Mtlhome = 7,
    [pbr::OriginalName("SCAN")] Scan = 8,
    [pbr::OriginalName("MOVETOMTL")] Movetomtl = 10,
    [pbr::OriginalName("SYSTEMOUT")] Systemout = 11,
    [pbr::OriginalName("SYSTEMIN")] Systemin = 12,
    [pbr::OriginalName("TECHINGMOVE")] Techingmove = 13,
    [pbr::OriginalName("ROUND")] Round = 99,
  }

  public enum EventType {
    [pbr::OriginalName("LoadArrivals")] LoadArrivals = 0,
    [pbr::OriginalName("LoadComplete")] LoadComplete = 1,
    [pbr::OriginalName("UnloadArrivals")] UnloadArrivals = 2,
    [pbr::OriginalName("UnloadComplete")] UnloadComplete = 3,
    [pbr::OriginalName("AdrOrMoveArrivals")] AdrOrMoveArrivals = 4,
    [pbr::OriginalName("AdrPass")] AdrPass = 5,
    [pbr::OriginalName("MovePause")] MovePause = 6,
    [pbr::OriginalName("MoveRestart")] MoveRestart = 7,
    [pbr::OriginalName("ReserveReq")] ReserveReq = 8,
    [pbr::OriginalName("BlockReq")] BlockReq = 9,
    [pbr::OriginalName("HIDReq")] Hidreq = 10,
    [pbr::OriginalName("BlockHIDReq")] BlockHidreq = 11,
    [pbr::OriginalName("VHLoading")] Vhloading = 12,
    [pbr::OriginalName("VHUnloading")] Vhunloading = 13,
    [pbr::OriginalName("BCRRead")] Bcrread = 14,
    [pbr::OriginalName("DoubleStorage")] DoubleStorage = 15,
    [pbr::OriginalName("EmptyRetrieval")] EmptyRetrieval = 16,
    [pbr::OriginalName("Scan")] Scan = 17,
    [pbr::OriginalName("BlockRelease")] BlockRelease = 21,
    [pbr::OriginalName("HIDRelease")] Hidrelease = 22,
    [pbr::OriginalName("BlockHIDRelease")] BlockHidrelease = 23,
  }

  public enum CompleteStatus {
    [pbr::OriginalName("CmpStatusMove")] CmpStatusMove = 0,
    [pbr::OriginalName("CmpStatusLoad")] CmpStatusLoad = 1,
    [pbr::OriginalName("CmpStatusUnload")] CmpStatusUnload = 2,
    [pbr::OriginalName("CmpStatusLoadunload")] CmpStatusLoadunload = 3,
    [pbr::OriginalName("CmpStatusHome")] CmpStatusHome = 4,
    [pbr::OriginalName("CmpStatusOverride")] CmpStatusOverride = 5,
    [pbr::OriginalName("CmpStatusCstIDRenmae")] CmpStatusCstIdrenmae = 6,
    [pbr::OriginalName("CmpStatusMTLHome")] CmpStatusMtlhome = 7,
    [pbr::OriginalName("CmpStatusScan")] CmpStatusScan = 8,
    [pbr::OriginalName("CmpStatusMoveToMTL")] CmpStatusMoveToMtl = 10,
    [pbr::OriginalName("CmpStatusSystemOut")] CmpStatusSystemOut = 11,
    [pbr::OriginalName("CmpStatusSystemIn")] CmpStatusSystemIn = 12,
    [pbr::OriginalName("CmpStatusTechingMove")] CmpStatusTechingMove = 13,
    [pbr::OriginalName("CmpStatusCancel")] CmpStatusCancel = 20,
    [pbr::OriginalName("CmpStatusAbort")] CmpStatusAbort = 21,
    [pbr::OriginalName("CmpStatusVehicleAbort")] CmpStatusVehicleAbort = 22,
    [pbr::OriginalName("CmpStatusIDMisMatch")] CmpStatusIdmisMatch = 23,
    [pbr::OriginalName("CmpStatusIDReadFailed")] CmpStatusIdreadFailed = 24,
    [pbr::OriginalName("CmpStatusIDReadDuplicate")] CmpStatusIdreadDuplicate = 25,
    [pbr::OriginalName("CmpStatusInterlockError")] CmpStatusInterlockError = 64,
    [pbr::OriginalName("CmpStatusLongTimeInaction")] CmpStatusLongTimeInaction = 98,
    [pbr::OriginalName("CmpStatusForceFinishByOp")] CmpStatusForceFinishByOp = 99,
  }

  public enum CMDCancelType {
    [pbr::OriginalName("CMD_None")] CmdNone = 0,
    [pbr::OriginalName("CMD_Retry")] CmdRetry = 1,
    [pbr::OriginalName("CMD_Cancel")] CmdCancel = 20,
    [pbr::OriginalName("CMD_Abort")] CmdAbort = 21,
    [pbr::OriginalName("CMD_Cancel_ID_Mismatch")] CmdCancelIdMismatch = 23,
    [pbr::OriginalName("CMD_Cancel_ID_Read_Failed")] CmdCancelIdReadFailed = 24,
    [pbr::OriginalName("CMD_Cancel_ID_Read_Duplicate")] CmdCancelIdReadDuplicate = 25,
    [pbr::OriginalName("CMD_Cancel_ID_Read_ForceFinish")] CmdCancelIdReadForceFinish = 26,
  }

  public enum PauseEvent {
    [pbr::OriginalName("Continue")] Continue = 0,
    [pbr::OriginalName("Pause")] Pause = 1,
  }

  public enum PauseType {
    [pbr::OriginalName("PauseType_None")] None = 0,
    [pbr::OriginalName("PauseType_OHxC")] OhxC = 1,
    [pbr::OriginalName("PauseType_Block")] Block = 2,
    [pbr::OriginalName("PauseType_HID")] Hid = 3,
    [pbr::OriginalName("PauseType_EarthQuake")] EarthQuake = 4,
    [pbr::OriginalName("PauseType_Safety")] Safety = 5,
    [pbr::OriginalName("PauseType_Reserve")] Reserve = 6,
    [pbr::OriginalName("PauseType_ManualBlock")] ManualBlock = 7,
    [pbr::OriginalName("PauseType_ManualHID")] ManualHid = 8,
    [pbr::OriginalName("PauseType_All")] All = 9,
  }

  public enum VhGuideStatus {
    [pbr::OriginalName("Unlock")] Unlock = 0,
    [pbr::OriginalName("Lock")] Lock = 1,
  }

  public enum PassType {
    [pbr::OriginalName("Pass")] Pass = 0,
    [pbr::OriginalName("Block")] Block = 1,
  }

  public enum E_AreaSensorDir {
    [pbr::OriginalName("AreaSensorDir_None")] AreaSensorDirNone = 0,
    [pbr::OriginalName("Straight")] Straight = 1,
    [pbr::OriginalName("Left")] Left = 2,
    [pbr::OriginalName("Right")] Right = 3,
  }

  public enum OperatingVHMode {
    [pbr::OriginalName("Operating_Auto")] OperatingAuto = 0,
    [pbr::OriginalName("Operating_Manual")] OperatingManual = 1,
  }

  public enum ControlType {
    [pbr::OriginalName("Nothing")] Nothing = 0,
    [pbr::OriginalName("ControlType_Block")] Block = 4,
    [pbr::OriginalName("ControlType_HID")] Hid = 5,
    [pbr::OriginalName("ControlType_Reserver")] Reserver = 6,
  }

  public enum DriveDirction {
    [pbr::OriginalName("DriveDir_None")] DriveDirNone = 0,
    [pbr::OriginalName("DriveDir_Forward")] DriveDirForward = 1,
    [pbr::OriginalName("DriveDir_Reverse")] DriveDirReverse = 2,
  }

  public enum ReserveResult {
    [pbr::OriginalName("ReserveResult_Success")] Success = 0,
    [pbr::OriginalName("ReserveResult_Unsuccess")] Unsuccess = 1,
  }

  public enum BCRReadResult {
    [pbr::OriginalName("BCR_Normal")] BcrNormal = 0,
    [pbr::OriginalName("BCR_ReadFail")] BcrReadFail = 1,
    [pbr::OriginalName("BCR_MisMatch")] BcrMisMatch = 2,
  }

  public enum VHModeStatus {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Initial_Power_OFF")] InitialPowerOff = 1,
    [pbr::OriginalName("Initial_Power_ON")] InitialPowerOn = 2,
    [pbr::OriginalName("Manual")] Manual = 3,
    [pbr::OriginalName("Auto_Remote")] AutoRemote = 4,
    [pbr::OriginalName("Auto_Local")] AutoLocal = 5,
    [pbr::OriginalName("Auto_MTS")] AutoMts = 6,
    [pbr::OriginalName("Auto_MTL")] AutoMtl = 7,
  }

  public enum VHActionStatus {
    [pbr::OriginalName("NoCommand")] NoCommand = 0,
    [pbr::OriginalName("Commanding")] Commanding = 1,
    [pbr::OriginalName("Teaching")] Teaching = 5,
    [pbr::OriginalName("GripperTeaching")] GripperTeaching = 6,
    [pbr::OriginalName("CycleRun")] CycleRun = 7,
  }

  public enum VhPowerStatus {
    [pbr::OriginalName("Power_Off")] PowerOff = 0,
    [pbr::OriginalName("Power_On")] PowerOn = 1,
  }

  public enum VhLoadCarrierStatus {
    [pbr::OriginalName("NotExist")] NotExist = 0,
    [pbr::OriginalName("Exist")] Exist = 1,
  }

  public enum VhStopSingle {
    [pbr::OriginalName("StopSingle_Off")] StopSingleOff = 0,
    [pbr::OriginalName("StopSingle_On")] StopSingleOn = 1,
  }

  public enum OperatingPowerMode {
    [pbr::OriginalName("Operating_Power_Off")] OperatingPowerOff = 0,
    [pbr::OriginalName("Operating_Power_On")] OperatingPowerOn = 1,
  }

  public enum ErrorStatus {
    [pbr::OriginalName("Err_Reset")] ErrReset = 0,
    [pbr::OriginalName("Err_Set")] ErrSet = 1,
  }

  public enum VehicleType {
    [pbr::OriginalName("VhType_None")] VhTypeNone = 0,
    [pbr::OriginalName("VhType_Clean")] VhTypeClean = 1,
    [pbr::OriginalName("VhType_Dirty")] VhTypeDirty = 2,
  }

  public enum CommandType {
    [pbr::OriginalName("CMD_Move")] CmdMove = 0,
    [pbr::OriginalName("CMD_Move_Park")] CmdMovePark = 1,
    [pbr::OriginalName("CMD_Move_MTPort")] CmdMoveMtport = 2,
    [pbr::OriginalName("CMD_Load")] CmdLoad = 3,
    [pbr::OriginalName("CMD_Unload")] CmdUnload = 4,
    [pbr::OriginalName("CMD_LoadUnload")] CmdLoadUnload = 5,
    [pbr::OriginalName("CMD_Teaching")] CmdTeaching = 6,
    [pbr::OriginalName("CMD_Continue")] CmdContinue = 7,
    [pbr::OriginalName("CMD_Round")] CmdRound = 8,
    [pbr::OriginalName("CMD_Home")] CmdHome = 9,
    [pbr::OriginalName("CMD_Override")] CmdOverride = 10,
  }

  public enum CommandStatus {
    [pbr::OriginalName("CMDSt_Queue")] CmdstQueue = 0,
    [pbr::OriginalName("CMDSt_Sending")] CmdstSending = 1,
    [pbr::OriginalName("CMDSt_Execution")] CmdstExecution = 2,
    [pbr::OriginalName("CMDSt_Aborting")] CmdstAborting = 3,
    [pbr::OriginalName("CMDSt_Canceling")] CmdstCanceling = 4,
    [pbr::OriginalName("CMDSt_NormalEnd")] CmdstNormalEnd = 5,
    [pbr::OriginalName("CMDSt_AbnormalEndByOHT")] CmdstAbnormalEndByOht = 6,
    [pbr::OriginalName("CMDSt_AbnormalEndByMCS")] CmdstAbnormalEndByMcs = 7,
    [pbr::OriginalName("CMDSt_AbnormalEndByOHTC")] CmdstAbnormalEndByOhtc = 8,
    [pbr::OriginalName("CMDSt_CancelEndByOHTC")] CmdstCancelEndByOhtc = 9,
  }

  public enum SectionType {
    [pbr::OriginalName("Normal")] Normal = 0,
    [pbr::OriginalName("MTL")] Mtl = 1,
  }

  public enum TSCState {
    [pbr::OriginalName("TSCNONE")] Tscnone = 0,
    [pbr::OriginalName("TSCINT")] Tscint = 1,
    [pbr::OriginalName("PAUSED")] Paused = 2,
    [pbr::OriginalName("AUTO")] Auto = 3,
    [pbr::OriginalName("PAUSING")] Pausing = 4,
  }

  public enum TSCEvent {
    [pbr::OriginalName("TSCInitial")] Tscinitial = 0,
    [pbr::OriginalName("SystemStartedUpSuccessfully")] SystemStartedUpSuccessfully = 1,
    [pbr::OriginalName("TSCResumed")] Tscresumed = 2,
    [pbr::OriginalName("TCSRequestedToPause")] TcsrequestedToPause = 3,
    [pbr::OriginalName("PauseComplete")] PauseComplete = 4,
  }

  public enum VehicleState {
    [pbr::OriginalName("VehicleState_None")] None = 0,
    [pbr::OriginalName("VehicleState_Remove")] Remove = 1,
    [pbr::OriginalName("VehicleState_NotAssigned")] NotAssigned = 2,
    [pbr::OriginalName("VehicleState_Enroute")] Enroute = 3,
    [pbr::OriginalName("VehicleState_Parked")] Parked = 4,
    [pbr::OriginalName("VehicleState_Acquiring")] Acquiring = 5,
    [pbr::OriginalName("VehicleState_Depositing")] Depositing = 6,
    [pbr::OriginalName("VehicleState_Assigned")] Assigned = 7,
  }

  public enum LinkStatus {
    [pbr::OriginalName("LinkFail")] LinkFail = 0,
    [pbr::OriginalName("LinkOK")] LinkOk = 1,
  }

  public enum HostMode {
    [pbr::OriginalName("Offline")] Offline = 0,
    [pbr::OriginalName("OnlineRemote")] OnlineRemote = 1,
    [pbr::OriginalName("OnlineLocal")] OnlineLocal = 2,
  }

  public enum DeviceConnectionType {
    [pbr::OriginalName("DeviceConnectionType_MCS")] Mcs = 0,
    [pbr::OriginalName("DeviceConnectionType_PLC")] Plc = 1,
    [pbr::OriginalName("DeviceConnectionType_AP")] Ap = 2,
  }

  public enum ConnectionStatus {
    [pbr::OriginalName("ConnectionStatus_Success")] Success = 0,
    [pbr::OriginalName("ConnectionStatus_Unsuccess")] Unsuccess = 1,
  }

  public enum PortStationServiceStatus {
    [pbr::OriginalName("NoDefinition")] NoDefinition = 0,
    [pbr::OriginalName("OutOfService")] OutOfService = 1,
    [pbr::OriginalName("InService")] InService = 2,
  }

  public enum PortStationStatus {
    [pbr::OriginalName("Down")] Down = 0,
    [pbr::OriginalName("LoadRequest")] LoadRequest = 1,
    [pbr::OriginalName("UnloadRequest")] UnloadRequest = 2,
    [pbr::OriginalName("Wait")] Wait = 3,
    [pbr::OriginalName("Disabled")] Disabled = 4,
  }

  public enum MsgLevel {
    [pbr::OriginalName("MsgLevel_Info")] Info = 0,
    [pbr::OriginalName("MsgLevel_Warn")] Warn = 1,
    [pbr::OriginalName("MsgLevel_Error")] Error = 2,
  }

  public enum MTxMode {
    [pbr::OriginalName("MTxMode_Manual")] Manual = 0,
    [pbr::OriginalName("MTxMode_Auto")] Auto = 1,
  }

  public enum MTLLocation {
    [pbr::OriginalName("MTLLocation_None")] None = 0,
    [pbr::OriginalName("MTLLocation_Upper")] Upper = 1,
    [pbr::OriginalName("MTLLocation_Bottorn")] Bottorn = 2,
  }

  public enum MTLMovingStatus {
    [pbr::OriginalName("MTLMovingStatus_Stop")] Stop = 0,
    [pbr::OriginalName("MTLMovingStatus_Moving")] Moving = 1,
  }

  public enum VhInPosition {
    [pbr::OriginalName("VhInPosition_Nothing")] Nothing = 0,
    [pbr::OriginalName("VhInPosition_InPostion")] InPostion = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    ///  Represents seconds of UTC time since Unix epoch
    ///  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    ///  9999-12-31T23:59:59Z inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    ///  Non-negative fractions of a second at nanosecond resolution. Negative
    ///  second values with fractions must still have non-negative nanos values
    ///  that count forward in time. Must be from 0 to 999,999,999
    ///  inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_1_HOST_BASIC_INFO_VERSION_REP : pb::IMessage<ID_1_HOST_BASIC_INFO_VERSION_REP> {
    private static readonly pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP>(() => new ID_1_HOST_BASIC_INFO_VERSION_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP(ID_1_HOST_BASIC_INFO_VERSION_REP other) : this() {
      dataDateTimeYear_ = other.dataDateTimeYear_;
      dataDateTimeMonth_ = other.dataDateTimeMonth_;
      dataDateTimeDay_ = other.dataDateTimeDay_;
      dataDateTimeHour_ = other.dataDateTimeHour_;
      dataDateTimeMinute_ = other.dataDateTimeMinute_;
      dataDateTimeSecond_ = other.dataDateTimeSecond_;
      currentTimeYear_ = other.currentTimeYear_;
      currentTimeMonth_ = other.currentTimeMonth_;
      currentTimeDay_ = other.currentTimeDay_;
      currentTimeHour_ = other.currentTimeHour_;
      currentTimeMinute_ = other.currentTimeMinute_;
      currentTimeSecond_ = other.currentTimeSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP Clone() {
      return new ID_1_HOST_BASIC_INFO_VERSION_REP(this);
    }

    /// <summary>Field number for the "DataDateTime_Year" field.</summary>
    public const int DataDateTimeYearFieldNumber = 1;
    private string dataDateTimeYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeYear {
      get { return dataDateTimeYear_; }
      set {
        dataDateTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Month" field.</summary>
    public const int DataDateTimeMonthFieldNumber = 2;
    private string dataDateTimeMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeMonth {
      get { return dataDateTimeMonth_; }
      set {
        dataDateTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Day" field.</summary>
    public const int DataDateTimeDayFieldNumber = 3;
    private string dataDateTimeDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeDay {
      get { return dataDateTimeDay_; }
      set {
        dataDateTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Hour" field.</summary>
    public const int DataDateTimeHourFieldNumber = 4;
    private string dataDateTimeHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeHour {
      get { return dataDateTimeHour_; }
      set {
        dataDateTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Minute" field.</summary>
    public const int DataDateTimeMinuteFieldNumber = 5;
    private string dataDateTimeMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeMinute {
      get { return dataDateTimeMinute_; }
      set {
        dataDateTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Second" field.</summary>
    public const int DataDateTimeSecondFieldNumber = 6;
    private string dataDateTimeSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeSecond {
      get { return dataDateTimeSecond_; }
      set {
        dataDateTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Year" field.</summary>
    public const int CurrentTimeYearFieldNumber = 7;
    private string currentTimeYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeYear {
      get { return currentTimeYear_; }
      set {
        currentTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Month" field.</summary>
    public const int CurrentTimeMonthFieldNumber = 8;
    private string currentTimeMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeMonth {
      get { return currentTimeMonth_; }
      set {
        currentTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Day" field.</summary>
    public const int CurrentTimeDayFieldNumber = 9;
    private string currentTimeDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeDay {
      get { return currentTimeDay_; }
      set {
        currentTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Hour" field.</summary>
    public const int CurrentTimeHourFieldNumber = 10;
    private string currentTimeHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeHour {
      get { return currentTimeHour_; }
      set {
        currentTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Minute" field.</summary>
    public const int CurrentTimeMinuteFieldNumber = 11;
    private string currentTimeMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeMinute {
      get { return currentTimeMinute_; }
      set {
        currentTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Second" field.</summary>
    public const int CurrentTimeSecondFieldNumber = 12;
    private string currentTimeSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeSecond {
      get { return currentTimeSecond_; }
      set {
        currentTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_1_HOST_BASIC_INFO_VERSION_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_1_HOST_BASIC_INFO_VERSION_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataDateTimeYear != other.DataDateTimeYear) return false;
      if (DataDateTimeMonth != other.DataDateTimeMonth) return false;
      if (DataDateTimeDay != other.DataDateTimeDay) return false;
      if (DataDateTimeHour != other.DataDateTimeHour) return false;
      if (DataDateTimeMinute != other.DataDateTimeMinute) return false;
      if (DataDateTimeSecond != other.DataDateTimeSecond) return false;
      if (CurrentTimeYear != other.CurrentTimeYear) return false;
      if (CurrentTimeMonth != other.CurrentTimeMonth) return false;
      if (CurrentTimeDay != other.CurrentTimeDay) return false;
      if (CurrentTimeHour != other.CurrentTimeHour) return false;
      if (CurrentTimeMinute != other.CurrentTimeMinute) return false;
      if (CurrentTimeSecond != other.CurrentTimeSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataDateTimeYear.Length != 0) hash ^= DataDateTimeYear.GetHashCode();
      if (DataDateTimeMonth.Length != 0) hash ^= DataDateTimeMonth.GetHashCode();
      if (DataDateTimeDay.Length != 0) hash ^= DataDateTimeDay.GetHashCode();
      if (DataDateTimeHour.Length != 0) hash ^= DataDateTimeHour.GetHashCode();
      if (DataDateTimeMinute.Length != 0) hash ^= DataDateTimeMinute.GetHashCode();
      if (DataDateTimeSecond.Length != 0) hash ^= DataDateTimeSecond.GetHashCode();
      if (CurrentTimeYear.Length != 0) hash ^= CurrentTimeYear.GetHashCode();
      if (CurrentTimeMonth.Length != 0) hash ^= CurrentTimeMonth.GetHashCode();
      if (CurrentTimeDay.Length != 0) hash ^= CurrentTimeDay.GetHashCode();
      if (CurrentTimeHour.Length != 0) hash ^= CurrentTimeHour.GetHashCode();
      if (CurrentTimeMinute.Length != 0) hash ^= CurrentTimeMinute.GetHashCode();
      if (CurrentTimeSecond.Length != 0) hash ^= CurrentTimeSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataDateTimeYear.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataDateTimeYear);
      }
      if (DataDateTimeMonth.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataDateTimeMonth);
      }
      if (DataDateTimeDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataDateTimeDay);
      }
      if (DataDateTimeHour.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DataDateTimeHour);
      }
      if (DataDateTimeMinute.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DataDateTimeMinute);
      }
      if (DataDateTimeSecond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DataDateTimeSecond);
      }
      if (CurrentTimeYear.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentTimeYear);
      }
      if (CurrentTimeMonth.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrentTimeMonth);
      }
      if (CurrentTimeDay.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CurrentTimeDay);
      }
      if (CurrentTimeHour.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CurrentTimeHour);
      }
      if (CurrentTimeMinute.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CurrentTimeMinute);
      }
      if (CurrentTimeSecond.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentTimeSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataDateTimeYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeYear);
      }
      if (DataDateTimeMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMonth);
      }
      if (DataDateTimeDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeDay);
      }
      if (DataDateTimeHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeHour);
      }
      if (DataDateTimeMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMinute);
      }
      if (DataDateTimeSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeSecond);
      }
      if (CurrentTimeYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeYear);
      }
      if (CurrentTimeMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMonth);
      }
      if (CurrentTimeDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeDay);
      }
      if (CurrentTimeHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeHour);
      }
      if (CurrentTimeMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMinute);
      }
      if (CurrentTimeSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_1_HOST_BASIC_INFO_VERSION_REP other) {
      if (other == null) {
        return;
      }
      if (other.DataDateTimeYear.Length != 0) {
        DataDateTimeYear = other.DataDateTimeYear;
      }
      if (other.DataDateTimeMonth.Length != 0) {
        DataDateTimeMonth = other.DataDateTimeMonth;
      }
      if (other.DataDateTimeDay.Length != 0) {
        DataDateTimeDay = other.DataDateTimeDay;
      }
      if (other.DataDateTimeHour.Length != 0) {
        DataDateTimeHour = other.DataDateTimeHour;
      }
      if (other.DataDateTimeMinute.Length != 0) {
        DataDateTimeMinute = other.DataDateTimeMinute;
      }
      if (other.DataDateTimeSecond.Length != 0) {
        DataDateTimeSecond = other.DataDateTimeSecond;
      }
      if (other.CurrentTimeYear.Length != 0) {
        CurrentTimeYear = other.CurrentTimeYear;
      }
      if (other.CurrentTimeMonth.Length != 0) {
        CurrentTimeMonth = other.CurrentTimeMonth;
      }
      if (other.CurrentTimeDay.Length != 0) {
        CurrentTimeDay = other.CurrentTimeDay;
      }
      if (other.CurrentTimeHour.Length != 0) {
        CurrentTimeHour = other.CurrentTimeHour;
      }
      if (other.CurrentTimeMinute.Length != 0) {
        CurrentTimeMinute = other.CurrentTimeMinute;
      }
      if (other.CurrentTimeSecond.Length != 0) {
        CurrentTimeSecond = other.CurrentTimeSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DataDateTimeYear = input.ReadString();
            break;
          }
          case 18: {
            DataDateTimeMonth = input.ReadString();
            break;
          }
          case 26: {
            DataDateTimeDay = input.ReadString();
            break;
          }
          case 34: {
            DataDateTimeHour = input.ReadString();
            break;
          }
          case 42: {
            DataDateTimeMinute = input.ReadString();
            break;
          }
          case 50: {
            DataDateTimeSecond = input.ReadString();
            break;
          }
          case 58: {
            CurrentTimeYear = input.ReadString();
            break;
          }
          case 66: {
            CurrentTimeMonth = input.ReadString();
            break;
          }
          case 74: {
            CurrentTimeDay = input.ReadString();
            break;
          }
          case 82: {
            CurrentTimeHour = input.ReadString();
            break;
          }
          case 90: {
            CurrentTimeMinute = input.ReadString();
            break;
          }
          case 98: {
            CurrentTimeSecond = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_101_HOST_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> {
    private static readonly pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE>(() => new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE Clone() {
      return new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_101_HOST_BASIC_INFO_VERSION_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_102_BASIC_INFO_VERSION_REP : pb::IMessage<ID_102_BASIC_INFO_VERSION_REP> {
    private static readonly pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP>(() => new ID_102_BASIC_INFO_VERSION_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP(ID_102_BASIC_INFO_VERSION_REP other) : this() {
      basicInfoVersionYear_ = other.basicInfoVersionYear_;
      basicInfoVersionMonth_ = other.basicInfoVersionMonth_;
      basicInfoVersionDay_ = other.basicInfoVersionDay_;
      basicInfoVersionHour_ = other.basicInfoVersionHour_;
      basicInfoVersionMinute_ = other.basicInfoVersionMinute_;
      basicInfoVersionSecond_ = other.basicInfoVersionSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP Clone() {
      return new ID_102_BASIC_INFO_VERSION_REP(this);
    }

    /// <summary>Field number for the "BasicInfoVersion_Year" field.</summary>
    public const int BasicInfoVersionYearFieldNumber = 1;
    private string basicInfoVersionYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionYear {
      get { return basicInfoVersionYear_; }
      set {
        basicInfoVersionYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Month" field.</summary>
    public const int BasicInfoVersionMonthFieldNumber = 2;
    private string basicInfoVersionMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionMonth {
      get { return basicInfoVersionMonth_; }
      set {
        basicInfoVersionMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Day" field.</summary>
    public const int BasicInfoVersionDayFieldNumber = 3;
    private string basicInfoVersionDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionDay {
      get { return basicInfoVersionDay_; }
      set {
        basicInfoVersionDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Hour" field.</summary>
    public const int BasicInfoVersionHourFieldNumber = 4;
    private string basicInfoVersionHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionHour {
      get { return basicInfoVersionHour_; }
      set {
        basicInfoVersionHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Minute" field.</summary>
    public const int BasicInfoVersionMinuteFieldNumber = 5;
    private string basicInfoVersionMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionMinute {
      get { return basicInfoVersionMinute_; }
      set {
        basicInfoVersionMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Second" field.</summary>
    public const int BasicInfoVersionSecondFieldNumber = 6;
    private string basicInfoVersionSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionSecond {
      get { return basicInfoVersionSecond_; }
      set {
        basicInfoVersionSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_102_BASIC_INFO_VERSION_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_102_BASIC_INFO_VERSION_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BasicInfoVersionYear != other.BasicInfoVersionYear) return false;
      if (BasicInfoVersionMonth != other.BasicInfoVersionMonth) return false;
      if (BasicInfoVersionDay != other.BasicInfoVersionDay) return false;
      if (BasicInfoVersionHour != other.BasicInfoVersionHour) return false;
      if (BasicInfoVersionMinute != other.BasicInfoVersionMinute) return false;
      if (BasicInfoVersionSecond != other.BasicInfoVersionSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BasicInfoVersionYear.Length != 0) hash ^= BasicInfoVersionYear.GetHashCode();
      if (BasicInfoVersionMonth.Length != 0) hash ^= BasicInfoVersionMonth.GetHashCode();
      if (BasicInfoVersionDay.Length != 0) hash ^= BasicInfoVersionDay.GetHashCode();
      if (BasicInfoVersionHour.Length != 0) hash ^= BasicInfoVersionHour.GetHashCode();
      if (BasicInfoVersionMinute.Length != 0) hash ^= BasicInfoVersionMinute.GetHashCode();
      if (BasicInfoVersionSecond.Length != 0) hash ^= BasicInfoVersionSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BasicInfoVersionYear.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BasicInfoVersionYear);
      }
      if (BasicInfoVersionMonth.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BasicInfoVersionMonth);
      }
      if (BasicInfoVersionDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BasicInfoVersionDay);
      }
      if (BasicInfoVersionHour.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BasicInfoVersionHour);
      }
      if (BasicInfoVersionMinute.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicInfoVersionMinute);
      }
      if (BasicInfoVersionSecond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BasicInfoVersionSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BasicInfoVersionYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionYear);
      }
      if (BasicInfoVersionMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMonth);
      }
      if (BasicInfoVersionDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionDay);
      }
      if (BasicInfoVersionHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionHour);
      }
      if (BasicInfoVersionMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMinute);
      }
      if (BasicInfoVersionSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_102_BASIC_INFO_VERSION_REP other) {
      if (other == null) {
        return;
      }
      if (other.BasicInfoVersionYear.Length != 0) {
        BasicInfoVersionYear = other.BasicInfoVersionYear;
      }
      if (other.BasicInfoVersionMonth.Length != 0) {
        BasicInfoVersionMonth = other.BasicInfoVersionMonth;
      }
      if (other.BasicInfoVersionDay.Length != 0) {
        BasicInfoVersionDay = other.BasicInfoVersionDay;
      }
      if (other.BasicInfoVersionHour.Length != 0) {
        BasicInfoVersionHour = other.BasicInfoVersionHour;
      }
      if (other.BasicInfoVersionMinute.Length != 0) {
        BasicInfoVersionMinute = other.BasicInfoVersionMinute;
      }
      if (other.BasicInfoVersionSecond.Length != 0) {
        BasicInfoVersionSecond = other.BasicInfoVersionSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BasicInfoVersionYear = input.ReadString();
            break;
          }
          case 18: {
            BasicInfoVersionMonth = input.ReadString();
            break;
          }
          case 26: {
            BasicInfoVersionDay = input.ReadString();
            break;
          }
          case 34: {
            BasicInfoVersionHour = input.ReadString();
            break;
          }
          case 42: {
            BasicInfoVersionMinute = input.ReadString();
            break;
          }
          case 50: {
            BasicInfoVersionSecond = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_2_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_2_BASIC_INFO_VERSION_RESPONSE> {
    private static readonly pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE>(() => new ID_2_BASIC_INFO_VERSION_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE(ID_2_BASIC_INFO_VERSION_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE Clone() {
      return new ID_2_BASIC_INFO_VERSION_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_2_BASIC_INFO_VERSION_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_2_BASIC_INFO_VERSION_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_2_BASIC_INFO_VERSION_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_11_BASIC_INFO_REP : pb::IMessage<ID_11_BASIC_INFO_REP> {
    private static readonly pb::MessageParser<ID_11_BASIC_INFO_REP> _parser = new pb::MessageParser<ID_11_BASIC_INFO_REP>(() => new ID_11_BASIC_INFO_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_11_BASIC_INFO_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_BASIC_INFO_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_BASIC_INFO_REP(ID_11_BASIC_INFO_REP other) : this() {
      travelBasicDataCount_ = other.travelBasicDataCount_;
      sectionDataCount_ = other.sectionDataCount_;
      addressDataCount_ = other.addressDataCount_;
      scaleDataCount_ = other.scaleDataCount_;
      contrlDataCount_ = other.contrlDataCount_;
      guideDataCount_ = other.guideDataCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_BASIC_INFO_REP Clone() {
      return new ID_11_BASIC_INFO_REP(this);
    }

    /// <summary>Field number for the "TravelBasicDataCount" field.</summary>
    public const int TravelBasicDataCountFieldNumber = 1;
    private int travelBasicDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TravelBasicDataCount {
      get { return travelBasicDataCount_; }
      set {
        travelBasicDataCount_ = value;
      }
    }

    /// <summary>Field number for the "SectionDataCount" field.</summary>
    public const int SectionDataCountFieldNumber = 2;
    private int sectionDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SectionDataCount {
      get { return sectionDataCount_; }
      set {
        sectionDataCount_ = value;
      }
    }

    /// <summary>Field number for the "AddressDataCount" field.</summary>
    public const int AddressDataCountFieldNumber = 3;
    private int addressDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressDataCount {
      get { return addressDataCount_; }
      set {
        addressDataCount_ = value;
      }
    }

    /// <summary>Field number for the "ScaleDataCount" field.</summary>
    public const int ScaleDataCountFieldNumber = 4;
    private int scaleDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaleDataCount {
      get { return scaleDataCount_; }
      set {
        scaleDataCount_ = value;
      }
    }

    /// <summary>Field number for the "ContrlDataCount" field.</summary>
    public const int ContrlDataCountFieldNumber = 5;
    private int contrlDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContrlDataCount {
      get { return contrlDataCount_; }
      set {
        contrlDataCount_ = value;
      }
    }

    /// <summary>Field number for the "GuideDataCount" field.</summary>
    public const int GuideDataCountFieldNumber = 6;
    private int guideDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideDataCount {
      get { return guideDataCount_; }
      set {
        guideDataCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_11_BASIC_INFO_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_11_BASIC_INFO_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TravelBasicDataCount != other.TravelBasicDataCount) return false;
      if (SectionDataCount != other.SectionDataCount) return false;
      if (AddressDataCount != other.AddressDataCount) return false;
      if (ScaleDataCount != other.ScaleDataCount) return false;
      if (ContrlDataCount != other.ContrlDataCount) return false;
      if (GuideDataCount != other.GuideDataCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TravelBasicDataCount != 0) hash ^= TravelBasicDataCount.GetHashCode();
      if (SectionDataCount != 0) hash ^= SectionDataCount.GetHashCode();
      if (AddressDataCount != 0) hash ^= AddressDataCount.GetHashCode();
      if (ScaleDataCount != 0) hash ^= ScaleDataCount.GetHashCode();
      if (ContrlDataCount != 0) hash ^= ContrlDataCount.GetHashCode();
      if (GuideDataCount != 0) hash ^= GuideDataCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TravelBasicDataCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TravelBasicDataCount);
      }
      if (SectionDataCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SectionDataCount);
      }
      if (AddressDataCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddressDataCount);
      }
      if (ScaleDataCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ScaleDataCount);
      }
      if (ContrlDataCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ContrlDataCount);
      }
      if (GuideDataCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuideDataCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TravelBasicDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TravelBasicDataCount);
      }
      if (SectionDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionDataCount);
      }
      if (AddressDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressDataCount);
      }
      if (ScaleDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScaleDataCount);
      }
      if (ContrlDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContrlDataCount);
      }
      if (GuideDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDataCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_11_BASIC_INFO_REP other) {
      if (other == null) {
        return;
      }
      if (other.TravelBasicDataCount != 0) {
        TravelBasicDataCount = other.TravelBasicDataCount;
      }
      if (other.SectionDataCount != 0) {
        SectionDataCount = other.SectionDataCount;
      }
      if (other.AddressDataCount != 0) {
        AddressDataCount = other.AddressDataCount;
      }
      if (other.ScaleDataCount != 0) {
        ScaleDataCount = other.ScaleDataCount;
      }
      if (other.ContrlDataCount != 0) {
        ContrlDataCount = other.ContrlDataCount;
      }
      if (other.GuideDataCount != 0) {
        GuideDataCount = other.GuideDataCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TravelBasicDataCount = input.ReadInt32();
            break;
          }
          case 16: {
            SectionDataCount = input.ReadInt32();
            break;
          }
          case 24: {
            AddressDataCount = input.ReadInt32();
            break;
          }
          case 32: {
            ScaleDataCount = input.ReadInt32();
            break;
          }
          case 40: {
            ContrlDataCount = input.ReadInt32();
            break;
          }
          case 48: {
            GuideDataCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_111_BASIC_INFO_RESPONSE : pb::IMessage<ID_111_BASIC_INFO_RESPONSE> {
    private static readonly pb::MessageParser<ID_111_BASIC_INFO_RESPONSE> _parser = new pb::MessageParser<ID_111_BASIC_INFO_RESPONSE>(() => new ID_111_BASIC_INFO_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_111_BASIC_INFO_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_BASIC_INFO_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_BASIC_INFO_RESPONSE(ID_111_BASIC_INFO_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_BASIC_INFO_RESPONSE Clone() {
      return new ID_111_BASIC_INFO_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_111_BASIC_INFO_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_111_BASIC_INFO_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_111_BASIC_INFO_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_13_TAVELLING_DATA_REP : pb::IMessage<ID_13_TAVELLING_DATA_REP> {
    private static readonly pb::MessageParser<ID_13_TAVELLING_DATA_REP> _parser = new pb::MessageParser<ID_13_TAVELLING_DATA_REP>(() => new ID_13_TAVELLING_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_13_TAVELLING_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP(ID_13_TAVELLING_DATA_REP other) : this() {
      resolution_ = other.resolution_;
      startStopSpd_ = other.startStopSpd_;
      maxSpeed_ = other.maxSpeed_;
      accelTime_ = other.accelTime_;
      sCurveRate_ = other.sCurveRate_;
      originDir_ = other.originDir_;
      originSpd_ = other.originSpd_;
      beaemSpd_ = other.beaemSpd_;
      manualHSpd_ = other.manualHSpd_;
      manualLSpd_ = other.manualLSpd_;
      teachingSpd_ = other.teachingSpd_;
      rotateDir_ = other.rotateDir_;
      encoderPole_ = other.encoderPole_;
      positionCompensation_ = other.positionCompensation_;
      keepDistFar_ = other.keepDistFar_;
      keepDistNear_ = other.keepDistNear_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP Clone() {
      return new ID_13_TAVELLING_DATA_REP(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private uint resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "StartStopSpd" field.</summary>
    public const int StartStopSpdFieldNumber = 2;
    private uint startStopSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartStopSpd {
      get { return startStopSpd_; }
      set {
        startStopSpd_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 3;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelTime" field.</summary>
    public const int AccelTimeFieldNumber = 4;
    private uint accelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccelTime {
      get { return accelTime_; }
      set {
        accelTime_ = value;
      }
    }

    /// <summary>Field number for the "SCurveRate" field.</summary>
    public const int SCurveRateFieldNumber = 5;
    private int sCurveRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCurveRate {
      get { return sCurveRate_; }
      set {
        sCurveRate_ = value;
      }
    }

    /// <summary>Field number for the "OriginDir" field.</summary>
    public const int OriginDirFieldNumber = 6;
    private int originDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginDir {
      get { return originDir_; }
      set {
        originDir_ = value;
      }
    }

    /// <summary>Field number for the "OriginSpd" field.</summary>
    public const int OriginSpdFieldNumber = 7;
    private uint originSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginSpd {
      get { return originSpd_; }
      set {
        originSpd_ = value;
      }
    }

    /// <summary>Field number for the "BeaemSpd" field.</summary>
    public const int BeaemSpdFieldNumber = 8;
    private uint beaemSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeaemSpd {
      get { return beaemSpd_; }
      set {
        beaemSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualHSpd" field.</summary>
    public const int ManualHSpdFieldNumber = 9;
    private uint manualHSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualHSpd {
      get { return manualHSpd_; }
      set {
        manualHSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualLSpd" field.</summary>
    public const int ManualLSpdFieldNumber = 10;
    private uint manualLSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualLSpd {
      get { return manualLSpd_; }
      set {
        manualLSpd_ = value;
      }
    }

    /// <summary>Field number for the "TeachingSpd" field.</summary>
    public const int TeachingSpdFieldNumber = 11;
    private uint teachingSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeachingSpd {
      get { return teachingSpd_; }
      set {
        teachingSpd_ = value;
      }
    }

    /// <summary>Field number for the "RotateDir" field.</summary>
    public const int RotateDirFieldNumber = 12;
    private int rotateDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateDir {
      get { return rotateDir_; }
      set {
        rotateDir_ = value;
      }
    }

    /// <summary>Field number for the "EncoderPole" field.</summary>
    public const int EncoderPoleFieldNumber = 13;
    private int encoderPole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderPole {
      get { return encoderPole_; }
      set {
        encoderPole_ = value;
      }
    }

    /// <summary>Field number for the "PositionCompensation" field.</summary>
    public const int PositionCompensationFieldNumber = 14;
    private uint positionCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PositionCompensation {
      get { return positionCompensation_; }
      set {
        positionCompensation_ = value;
      }
    }

    /// <summary>Field number for the "KeepDistFar" field.</summary>
    public const int KeepDistFarFieldNumber = 15;
    private uint keepDistFar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepDistFar {
      get { return keepDistFar_; }
      set {
        keepDistFar_ = value;
      }
    }

    /// <summary>Field number for the "KeepDistNear" field.</summary>
    public const int KeepDistNearFieldNumber = 16;
    private uint keepDistNear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepDistNear {
      get { return keepDistNear_; }
      set {
        keepDistNear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_13_TAVELLING_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_13_TAVELLING_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (StartStopSpd != other.StartStopSpd) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (AccelTime != other.AccelTime) return false;
      if (SCurveRate != other.SCurveRate) return false;
      if (OriginDir != other.OriginDir) return false;
      if (OriginSpd != other.OriginSpd) return false;
      if (BeaemSpd != other.BeaemSpd) return false;
      if (ManualHSpd != other.ManualHSpd) return false;
      if (ManualLSpd != other.ManualLSpd) return false;
      if (TeachingSpd != other.TeachingSpd) return false;
      if (RotateDir != other.RotateDir) return false;
      if (EncoderPole != other.EncoderPole) return false;
      if (PositionCompensation != other.PositionCompensation) return false;
      if (KeepDistFar != other.KeepDistFar) return false;
      if (KeepDistNear != other.KeepDistNear) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
      if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
      if (OriginDir != 0) hash ^= OriginDir.GetHashCode();
      if (OriginSpd != 0) hash ^= OriginSpd.GetHashCode();
      if (BeaemSpd != 0) hash ^= BeaemSpd.GetHashCode();
      if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
      if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
      if (TeachingSpd != 0) hash ^= TeachingSpd.GetHashCode();
      if (RotateDir != 0) hash ^= RotateDir.GetHashCode();
      if (EncoderPole != 0) hash ^= EncoderPole.GetHashCode();
      if (PositionCompensation != 0) hash ^= PositionCompensation.GetHashCode();
      if (KeepDistFar != 0) hash ^= KeepDistFar.GetHashCode();
      if (KeepDistNear != 0) hash ^= KeepDistNear.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resolution);
      }
      if (StartStopSpd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxSpeed);
      }
      if (AccelTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AccelTime);
      }
      if (SCurveRate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SCurveRate);
      }
      if (OriginDir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OriginDir);
      }
      if (OriginSpd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OriginSpd);
      }
      if (BeaemSpd != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BeaemSpd);
      }
      if (ManualHSpd != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ManualLSpd);
      }
      if (TeachingSpd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TeachingSpd);
      }
      if (RotateDir != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RotateDir);
      }
      if (EncoderPole != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EncoderPole);
      }
      if (PositionCompensation != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(PositionCompensation);
      }
      if (KeepDistFar != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(KeepDistFar);
      }
      if (KeepDistNear != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(KeepDistNear);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
      }
      if (StartStopSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (AccelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
      }
      if (SCurveRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
      }
      if (OriginDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginDir);
      }
      if (OriginSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginSpd);
      }
      if (BeaemSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeaemSpd);
      }
      if (ManualHSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
      }
      if (TeachingSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeachingSpd);
      }
      if (RotateDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateDir);
      }
      if (EncoderPole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderPole);
      }
      if (PositionCompensation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionCompensation);
      }
      if (KeepDistFar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistFar);
      }
      if (KeepDistNear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistNear);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_13_TAVELLING_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.StartStopSpd != 0) {
        StartStopSpd = other.StartStopSpd;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelTime != 0) {
        AccelTime = other.AccelTime;
      }
      if (other.SCurveRate != 0) {
        SCurveRate = other.SCurveRate;
      }
      if (other.OriginDir != 0) {
        OriginDir = other.OriginDir;
      }
      if (other.OriginSpd != 0) {
        OriginSpd = other.OriginSpd;
      }
      if (other.BeaemSpd != 0) {
        BeaemSpd = other.BeaemSpd;
      }
      if (other.ManualHSpd != 0) {
        ManualHSpd = other.ManualHSpd;
      }
      if (other.ManualLSpd != 0) {
        ManualLSpd = other.ManualLSpd;
      }
      if (other.TeachingSpd != 0) {
        TeachingSpd = other.TeachingSpd;
      }
      if (other.RotateDir != 0) {
        RotateDir = other.RotateDir;
      }
      if (other.EncoderPole != 0) {
        EncoderPole = other.EncoderPole;
      }
      if (other.PositionCompensation != 0) {
        PositionCompensation = other.PositionCompensation;
      }
      if (other.KeepDistFar != 0) {
        KeepDistFar = other.KeepDistFar;
      }
      if (other.KeepDistNear != 0) {
        KeepDistNear = other.KeepDistNear;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resolution = input.ReadUInt32();
            break;
          }
          case 16: {
            StartStopSpd = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 32: {
            AccelTime = input.ReadUInt32();
            break;
          }
          case 40: {
            SCurveRate = input.ReadInt32();
            break;
          }
          case 48: {
            OriginDir = input.ReadInt32();
            break;
          }
          case 56: {
            OriginSpd = input.ReadUInt32();
            break;
          }
          case 64: {
            BeaemSpd = input.ReadUInt32();
            break;
          }
          case 72: {
            ManualHSpd = input.ReadUInt32();
            break;
          }
          case 80: {
            ManualLSpd = input.ReadUInt32();
            break;
          }
          case 88: {
            TeachingSpd = input.ReadUInt32();
            break;
          }
          case 96: {
            RotateDir = input.ReadInt32();
            break;
          }
          case 104: {
            EncoderPole = input.ReadInt32();
            break;
          }
          case 112: {
            PositionCompensation = input.ReadUInt32();
            break;
          }
          case 120: {
            KeepDistFar = input.ReadUInt32();
            break;
          }
          case 128: {
            KeepDistNear = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_113_TAVELLING_DATA_RESPONSE : pb::IMessage<ID_113_TAVELLING_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> _parser = new pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE>(() => new ID_113_TAVELLING_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE(ID_113_TAVELLING_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE Clone() {
      return new ID_113_TAVELLING_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_113_TAVELLING_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_113_TAVELLING_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_113_TAVELLING_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_15_SECTION_DATA_REP : pb::IMessage<ID_15_SECTION_DATA_REP> {
    private static readonly pb::MessageParser<ID_15_SECTION_DATA_REP> _parser = new pb::MessageParser<ID_15_SECTION_DATA_REP>(() => new ID_15_SECTION_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_15_SECTION_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP(ID_15_SECTION_DATA_REP other) : this() {
      sections_ = other.sections_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP Clone() {
      return new ID_15_SECTION_DATA_REP(this);
    }

    /// <summary>Field number for the "Sections" field.</summary>
    public const int SectionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section> _repeated_sections_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section> sections_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Types.Section> Sections {
      get { return sections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_15_SECTION_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_15_SECTION_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sections_.Equals(other.sections_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sections_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sections_.WriteTo(output, _repeated_sections_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sections_.CalculateSize(_repeated_sections_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_15_SECTION_DATA_REP other) {
      if (other == null) {
        return;
      }
      sections_.Add(other.sections_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sections_.AddEntriesFrom(input, _repeated_sections_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ID_15_SECTION_DATA_REP message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Section : pb::IMessage<Section> {
        private static readonly pb::MessageParser<Section> _parser = new pb::MessageParser<Section>(() => new Section());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Section> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section(Section other) : this() {
          driveDir_ = other.driveDir_;
          aeraSecsor_ = other.aeraSecsor_;
          guideDir_ = other.guideDir_;
          sectionID_ = other.sectionID_;
          fromAddr_ = other.fromAddr_;
          toAddr_ = other.toAddr_;
          controlTable_ = other.controlTable_;
          speed_ = other.speed_;
          distance_ = other.distance_;
          changeAreaSensor1_ = other.changeAreaSensor1_;
          changeGuideDir1_ = other.changeGuideDir1_;
          changeSegNum1_ = other.changeSegNum1_;
          changeAreaSensor2_ = other.changeAreaSensor2_;
          changeGuideDir2_ = other.changeGuideDir2_;
          changeSegNum2_ = other.changeSegNum2_;
          atSegment_ = other.atSegment_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section Clone() {
          return new Section(this);
        }

        /// <summary>Field number for the "DriveDir" field.</summary>
        public const int DriveDirFieldNumber = 1;
        private int driveDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DriveDir {
          get { return driveDir_; }
          set {
            driveDir_ = value;
          }
        }

        /// <summary>Field number for the "AeraSecsor" field.</summary>
        public const int AeraSecsorFieldNumber = 2;
        private int aeraSecsor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AeraSecsor {
          get { return aeraSecsor_; }
          set {
            aeraSecsor_ = value;
          }
        }

        /// <summary>Field number for the "GuideDir" field.</summary>
        public const int GuideDirFieldNumber = 3;
        private int guideDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuideDir {
          get { return guideDir_; }
          set {
            guideDir_ = value;
          }
        }

        /// <summary>Field number for the "SectionID" field.</summary>
        public const int SectionIDFieldNumber = 4;
        private string sectionID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SectionID {
          get { return sectionID_; }
          set {
            sectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "FromAddr" field.</summary>
        public const int FromAddrFieldNumber = 5;
        private string fromAddr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FromAddr {
          get { return fromAddr_; }
          set {
            fromAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ToAddr" field.</summary>
        public const int ToAddrFieldNumber = 6;
        private string toAddr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToAddr {
          get { return toAddr_; }
          set {
            toAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ControlTable" field.</summary>
        public const int ControlTableFieldNumber = 7;
        private int controlTable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlTable {
          get { return controlTable_; }
          set {
            controlTable_ = value;
          }
        }

        /// <summary>Field number for the "Speed" field.</summary>
        public const int SpeedFieldNumber = 9;
        private uint speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        /// <summary>Field number for the "Distance" field.</summary>
        public const int DistanceFieldNumber = 10;
        private uint distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "ChangeAreaSensor1" field.</summary>
        public const int ChangeAreaSensor1FieldNumber = 11;
        private int changeAreaSensor1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeAreaSensor1 {
          get { return changeAreaSensor1_; }
          set {
            changeAreaSensor1_ = value;
          }
        }

        /// <summary>Field number for the "ChangeGuideDir1" field.</summary>
        public const int ChangeGuideDir1FieldNumber = 12;
        private int changeGuideDir1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeGuideDir1 {
          get { return changeGuideDir1_; }
          set {
            changeGuideDir1_ = value;
          }
        }

        /// <summary>Field number for the "ChangeSegNum1" field.</summary>
        public const int ChangeSegNum1FieldNumber = 13;
        private string changeSegNum1_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChangeSegNum1 {
          get { return changeSegNum1_; }
          set {
            changeSegNum1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ChangeAreaSensor2" field.</summary>
        public const int ChangeAreaSensor2FieldNumber = 14;
        private int changeAreaSensor2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeAreaSensor2 {
          get { return changeAreaSensor2_; }
          set {
            changeAreaSensor2_ = value;
          }
        }

        /// <summary>Field number for the "ChangeGuideDir2" field.</summary>
        public const int ChangeGuideDir2FieldNumber = 15;
        private int changeGuideDir2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeGuideDir2 {
          get { return changeGuideDir2_; }
          set {
            changeGuideDir2_ = value;
          }
        }

        /// <summary>Field number for the "ChangeSegNum2" field.</summary>
        public const int ChangeSegNum2FieldNumber = 16;
        private string changeSegNum2_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChangeSegNum2 {
          get { return changeSegNum2_; }
          set {
            changeSegNum2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "AtSegment" field.</summary>
        public const int AtSegmentFieldNumber = 17;
        private string atSegment_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AtSegment {
          get { return atSegment_; }
          set {
            atSegment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Section);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Section other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DriveDir != other.DriveDir) return false;
          if (AeraSecsor != other.AeraSecsor) return false;
          if (GuideDir != other.GuideDir) return false;
          if (SectionID != other.SectionID) return false;
          if (FromAddr != other.FromAddr) return false;
          if (ToAddr != other.ToAddr) return false;
          if (ControlTable != other.ControlTable) return false;
          if (Speed != other.Speed) return false;
          if (Distance != other.Distance) return false;
          if (ChangeAreaSensor1 != other.ChangeAreaSensor1) return false;
          if (ChangeGuideDir1 != other.ChangeGuideDir1) return false;
          if (ChangeSegNum1 != other.ChangeSegNum1) return false;
          if (ChangeAreaSensor2 != other.ChangeAreaSensor2) return false;
          if (ChangeGuideDir2 != other.ChangeGuideDir2) return false;
          if (ChangeSegNum2 != other.ChangeSegNum2) return false;
          if (AtSegment != other.AtSegment) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DriveDir != 0) hash ^= DriveDir.GetHashCode();
          if (AeraSecsor != 0) hash ^= AeraSecsor.GetHashCode();
          if (GuideDir != 0) hash ^= GuideDir.GetHashCode();
          if (SectionID.Length != 0) hash ^= SectionID.GetHashCode();
          if (FromAddr.Length != 0) hash ^= FromAddr.GetHashCode();
          if (ToAddr.Length != 0) hash ^= ToAddr.GetHashCode();
          if (ControlTable != 0) hash ^= ControlTable.GetHashCode();
          if (Speed != 0) hash ^= Speed.GetHashCode();
          if (Distance != 0) hash ^= Distance.GetHashCode();
          if (ChangeAreaSensor1 != 0) hash ^= ChangeAreaSensor1.GetHashCode();
          if (ChangeGuideDir1 != 0) hash ^= ChangeGuideDir1.GetHashCode();
          if (ChangeSegNum1.Length != 0) hash ^= ChangeSegNum1.GetHashCode();
          if (ChangeAreaSensor2 != 0) hash ^= ChangeAreaSensor2.GetHashCode();
          if (ChangeGuideDir2 != 0) hash ^= ChangeGuideDir2.GetHashCode();
          if (ChangeSegNum2.Length != 0) hash ^= ChangeSegNum2.GetHashCode();
          if (AtSegment.Length != 0) hash ^= AtSegment.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DriveDir != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DriveDir);
          }
          if (AeraSecsor != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AeraSecsor);
          }
          if (GuideDir != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(GuideDir);
          }
          if (SectionID.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SectionID);
          }
          if (FromAddr.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(FromAddr);
          }
          if (ToAddr.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(ToAddr);
          }
          if (ControlTable != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ControlTable);
          }
          if (Speed != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Speed);
          }
          if (Distance != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Distance);
          }
          if (ChangeAreaSensor1 != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(ChangeAreaSensor1);
          }
          if (ChangeGuideDir1 != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(ChangeGuideDir1);
          }
          if (ChangeSegNum1.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ChangeSegNum1);
          }
          if (ChangeAreaSensor2 != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(ChangeAreaSensor2);
          }
          if (ChangeGuideDir2 != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(ChangeGuideDir2);
          }
          if (ChangeSegNum2.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(ChangeSegNum2);
          }
          if (AtSegment.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(AtSegment);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DriveDir != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DriveDir);
          }
          if (AeraSecsor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AeraSecsor);
          }
          if (GuideDir != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDir);
          }
          if (SectionID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionID);
          }
          if (FromAddr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAddr);
          }
          if (ToAddr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAddr);
          }
          if (ControlTable != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlTable);
          }
          if (Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
          }
          if (Distance != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
          }
          if (ChangeAreaSensor1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor1);
          }
          if (ChangeGuideDir1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir1);
          }
          if (ChangeSegNum1.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum1);
          }
          if (ChangeAreaSensor2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor2);
          }
          if (ChangeGuideDir2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir2);
          }
          if (ChangeSegNum2.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum2);
          }
          if (AtSegment.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AtSegment);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Section other) {
          if (other == null) {
            return;
          }
          if (other.DriveDir != 0) {
            DriveDir = other.DriveDir;
          }
          if (other.AeraSecsor != 0) {
            AeraSecsor = other.AeraSecsor;
          }
          if (other.GuideDir != 0) {
            GuideDir = other.GuideDir;
          }
          if (other.SectionID.Length != 0) {
            SectionID = other.SectionID;
          }
          if (other.FromAddr.Length != 0) {
            FromAddr = other.FromAddr;
          }
          if (other.ToAddr.Length != 0) {
            ToAddr = other.ToAddr;
          }
          if (other.ControlTable != 0) {
            ControlTable = other.ControlTable;
          }
          if (other.Speed != 0) {
            Speed = other.Speed;
          }
          if (other.Distance != 0) {
            Distance = other.Distance;
          }
          if (other.ChangeAreaSensor1 != 0) {
            ChangeAreaSensor1 = other.ChangeAreaSensor1;
          }
          if (other.ChangeGuideDir1 != 0) {
            ChangeGuideDir1 = other.ChangeGuideDir1;
          }
          if (other.ChangeSegNum1.Length != 0) {
            ChangeSegNum1 = other.ChangeSegNum1;
          }
          if (other.ChangeAreaSensor2 != 0) {
            ChangeAreaSensor2 = other.ChangeAreaSensor2;
          }
          if (other.ChangeGuideDir2 != 0) {
            ChangeGuideDir2 = other.ChangeGuideDir2;
          }
          if (other.ChangeSegNum2.Length != 0) {
            ChangeSegNum2 = other.ChangeSegNum2;
          }
          if (other.AtSegment.Length != 0) {
            AtSegment = other.AtSegment;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DriveDir = input.ReadInt32();
                break;
              }
              case 16: {
                AeraSecsor = input.ReadInt32();
                break;
              }
              case 24: {
                GuideDir = input.ReadInt32();
                break;
              }
              case 34: {
                SectionID = input.ReadString();
                break;
              }
              case 42: {
                FromAddr = input.ReadString();
                break;
              }
              case 50: {
                ToAddr = input.ReadString();
                break;
              }
              case 56: {
                ControlTable = input.ReadInt32();
                break;
              }
              case 72: {
                Speed = input.ReadUInt32();
                break;
              }
              case 80: {
                Distance = input.ReadUInt32();
                break;
              }
              case 88: {
                ChangeAreaSensor1 = input.ReadInt32();
                break;
              }
              case 96: {
                ChangeGuideDir1 = input.ReadInt32();
                break;
              }
              case 106: {
                ChangeSegNum1 = input.ReadString();
                break;
              }
              case 112: {
                ChangeAreaSensor2 = input.ReadInt32();
                break;
              }
              case 120: {
                ChangeGuideDir2 = input.ReadInt32();
                break;
              }
              case 130: {
                ChangeSegNum2 = input.ReadString();
                break;
              }
              case 138: {
                AtSegment = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ID_115_SECTION_DATA_RESPONSE : pb::IMessage<ID_115_SECTION_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> _parser = new pb::MessageParser<ID_115_SECTION_DATA_RESPONSE>(() => new ID_115_SECTION_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE(ID_115_SECTION_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE Clone() {
      return new ID_115_SECTION_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_115_SECTION_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_115_SECTION_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_115_SECTION_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_17_ADDRESS_DATA_REP : pb::IMessage<ID_17_ADDRESS_DATA_REP> {
    private static readonly pb::MessageParser<ID_17_ADDRESS_DATA_REP> _parser = new pb::MessageParser<ID_17_ADDRESS_DATA_REP>(() => new ID_17_ADDRESS_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_17_ADDRESS_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP(ID_17_ADDRESS_DATA_REP other) : this() {
      addresss_ = other.addresss_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP Clone() {
      return new ID_17_ADDRESS_DATA_REP(this);
    }

    /// <summary>Field number for the "Addresss" field.</summary>
    public const int AddresssFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address> _repeated_addresss_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address> addresss_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Types.Address> Addresss {
      get { return addresss_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_17_ADDRESS_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_17_ADDRESS_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresss_.Equals(other.addresss_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresss_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresss_.WriteTo(output, _repeated_addresss_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresss_.CalculateSize(_repeated_addresss_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_17_ADDRESS_DATA_REP other) {
      if (other == null) {
        return;
      }
      addresss_.Add(other.addresss_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresss_.AddEntriesFrom(input, _repeated_addresss_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ID_17_ADDRESS_DATA_REP message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Address : pb::IMessage<Address> {
        private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Address> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address(Address other) : this() {
          addr_ = other.addr_;
          resolution_ = other.resolution_;
          loaction_ = other.loaction_;
          blockRelease_ = other.blockRelease_;
          hIDRelease_ = other.hIDRelease_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address Clone() {
          return new Address(this);
        }

        /// <summary>Field number for the "Addr" field.</summary>
        public const int AddrFieldNumber = 1;
        private string addr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Addr {
          get { return addr_; }
          set {
            addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Resolution" field.</summary>
        public const int ResolutionFieldNumber = 2;
        private int resolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Resolution {
          get { return resolution_; }
          set {
            resolution_ = value;
          }
        }

        /// <summary>Field number for the "Loaction" field.</summary>
        public const int LoactionFieldNumber = 3;
        private int loaction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Loaction {
          get { return loaction_; }
          set {
            loaction_ = value;
          }
        }

        /// <summary>Field number for the "BlockRelease" field.</summary>
        public const int BlockReleaseFieldNumber = 4;
        private int blockRelease_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlockRelease {
          get { return blockRelease_; }
          set {
            blockRelease_ = value;
          }
        }

        /// <summary>Field number for the "HIDRelease" field.</summary>
        public const int HIDReleaseFieldNumber = 5;
        private int hIDRelease_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HIDRelease {
          get { return hIDRelease_; }
          set {
            hIDRelease_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Address);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Address other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Addr != other.Addr) return false;
          if (Resolution != other.Resolution) return false;
          if (Loaction != other.Loaction) return false;
          if (BlockRelease != other.BlockRelease) return false;
          if (HIDRelease != other.HIDRelease) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Addr.Length != 0) hash ^= Addr.GetHashCode();
          if (Resolution != 0) hash ^= Resolution.GetHashCode();
          if (Loaction != 0) hash ^= Loaction.GetHashCode();
          if (BlockRelease != 0) hash ^= BlockRelease.GetHashCode();
          if (HIDRelease != 0) hash ^= HIDRelease.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Addr.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Addr);
          }
          if (Resolution != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Resolution);
          }
          if (Loaction != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Loaction);
          }
          if (BlockRelease != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BlockRelease);
          }
          if (HIDRelease != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(HIDRelease);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Addr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
          }
          if (Resolution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resolution);
          }
          if (Loaction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loaction);
          }
          if (BlockRelease != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockRelease);
          }
          if (HIDRelease != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HIDRelease);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Address other) {
          if (other == null) {
            return;
          }
          if (other.Addr.Length != 0) {
            Addr = other.Addr;
          }
          if (other.Resolution != 0) {
            Resolution = other.Resolution;
          }
          if (other.Loaction != 0) {
            Loaction = other.Loaction;
          }
          if (other.BlockRelease != 0) {
            BlockRelease = other.BlockRelease;
          }
          if (other.HIDRelease != 0) {
            HIDRelease = other.HIDRelease;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Addr = input.ReadString();
                break;
              }
              case 16: {
                Resolution = input.ReadInt32();
                break;
              }
              case 24: {
                Loaction = input.ReadInt32();
                break;
              }
              case 32: {
                BlockRelease = input.ReadInt32();
                break;
              }
              case 40: {
                HIDRelease = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ID_117_ADDRESS_DATA_RESPONSE : pb::IMessage<ID_117_ADDRESS_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> _parser = new pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE>(() => new ID_117_ADDRESS_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE(ID_117_ADDRESS_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE Clone() {
      return new ID_117_ADDRESS_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_117_ADDRESS_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_117_ADDRESS_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_117_ADDRESS_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_19_SCALE_DATA_REP : pb::IMessage<ID_19_SCALE_DATA_REP> {
    private static readonly pb::MessageParser<ID_19_SCALE_DATA_REP> _parser = new pb::MessageParser<ID_19_SCALE_DATA_REP>(() => new ID_19_SCALE_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_19_SCALE_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP(ID_19_SCALE_DATA_REP other) : this() {
      resolution_ = other.resolution_;
      inposArea_ = other.inposArea_;
      inposStability_ = other.inposStability_;
      scalePulse_ = other.scalePulse_;
      scaleOffset_ = other.scaleOffset_;
      scaleReset_ = other.scaleReset_;
      readDir_ = other.readDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP Clone() {
      return new ID_19_SCALE_DATA_REP(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private uint resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "InposArea" field.</summary>
    public const int InposAreaFieldNumber = 2;
    private uint inposArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InposArea {
      get { return inposArea_; }
      set {
        inposArea_ = value;
      }
    }

    /// <summary>Field number for the "InposStability" field.</summary>
    public const int InposStabilityFieldNumber = 3;
    private uint inposStability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InposStability {
      get { return inposStability_; }
      set {
        inposStability_ = value;
      }
    }

    /// <summary>Field number for the "ScalePulse" field.</summary>
    public const int ScalePulseFieldNumber = 4;
    private uint scalePulse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScalePulse {
      get { return scalePulse_; }
      set {
        scalePulse_ = value;
      }
    }

    /// <summary>Field number for the "ScaleOffset" field.</summary>
    public const int ScaleOffsetFieldNumber = 5;
    private uint scaleOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleOffset {
      get { return scaleOffset_; }
      set {
        scaleOffset_ = value;
      }
    }

    /// <summary>Field number for the "ScaleReset" field.</summary>
    public const int ScaleResetFieldNumber = 6;
    private uint scaleReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleReset {
      get { return scaleReset_; }
      set {
        scaleReset_ = value;
      }
    }

    /// <summary>Field number for the "ReadDir" field.</summary>
    public const int ReadDirFieldNumber = 7;
    private int readDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadDir {
      get { return readDir_; }
      set {
        readDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_19_SCALE_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_19_SCALE_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (InposArea != other.InposArea) return false;
      if (InposStability != other.InposStability) return false;
      if (ScalePulse != other.ScalePulse) return false;
      if (ScaleOffset != other.ScaleOffset) return false;
      if (ScaleReset != other.ScaleReset) return false;
      if (ReadDir != other.ReadDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (InposArea != 0) hash ^= InposArea.GetHashCode();
      if (InposStability != 0) hash ^= InposStability.GetHashCode();
      if (ScalePulse != 0) hash ^= ScalePulse.GetHashCode();
      if (ScaleOffset != 0) hash ^= ScaleOffset.GetHashCode();
      if (ScaleReset != 0) hash ^= ScaleReset.GetHashCode();
      if (ReadDir != 0) hash ^= ReadDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resolution);
      }
      if (InposArea != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InposArea);
      }
      if (InposStability != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InposStability);
      }
      if (ScalePulse != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ScalePulse);
      }
      if (ScaleOffset != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScaleOffset);
      }
      if (ScaleReset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScaleReset);
      }
      if (ReadDir != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReadDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
      }
      if (InposArea != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposArea);
      }
      if (InposStability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposStability);
      }
      if (ScalePulse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScalePulse);
      }
      if (ScaleOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleOffset);
      }
      if (ScaleReset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleReset);
      }
      if (ReadDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_19_SCALE_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.InposArea != 0) {
        InposArea = other.InposArea;
      }
      if (other.InposStability != 0) {
        InposStability = other.InposStability;
      }
      if (other.ScalePulse != 0) {
        ScalePulse = other.ScalePulse;
      }
      if (other.ScaleOffset != 0) {
        ScaleOffset = other.ScaleOffset;
      }
      if (other.ScaleReset != 0) {
        ScaleReset = other.ScaleReset;
      }
      if (other.ReadDir != 0) {
        ReadDir = other.ReadDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resolution = input.ReadUInt32();
            break;
          }
          case 16: {
            InposArea = input.ReadUInt32();
            break;
          }
          case 24: {
            InposStability = input.ReadUInt32();
            break;
          }
          case 32: {
            ScalePulse = input.ReadUInt32();
            break;
          }
          case 40: {
            ScaleOffset = input.ReadUInt32();
            break;
          }
          case 48: {
            ScaleReset = input.ReadUInt32();
            break;
          }
          case 56: {
            ReadDir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_119_SCALE_DATA_RESPONSE : pb::IMessage<ID_119_SCALE_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_119_SCALE_DATA_RESPONSE>(() => new ID_119_SCALE_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE(ID_119_SCALE_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE Clone() {
      return new ID_119_SCALE_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_119_SCALE_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_119_SCALE_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_119_SCALE_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_21_CONTROL_DATA_REP : pb::IMessage<ID_21_CONTROL_DATA_REP> {
    private static readonly pb::MessageParser<ID_21_CONTROL_DATA_REP> _parser = new pb::MessageParser<ID_21_CONTROL_DATA_REP>(() => new ID_21_CONTROL_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_21_CONTROL_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP(ID_21_CONTROL_DATA_REP other) : this() {
      timeoutT1_ = other.timeoutT1_;
      timeoutT2_ = other.timeoutT2_;
      timeoutT3_ = other.timeoutT3_;
      timeoutT4_ = other.timeoutT4_;
      timeoutT5_ = other.timeoutT5_;
      timeoutT6_ = other.timeoutT6_;
      timeoutT7_ = other.timeoutT7_;
      timeoutT8_ = other.timeoutT8_;
      timeoutBlock_ = other.timeoutBlock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP Clone() {
      return new ID_21_CONTROL_DATA_REP(this);
    }

    /// <summary>Field number for the "TimeoutT1" field.</summary>
    public const int TimeoutT1FieldNumber = 1;
    private uint timeoutT1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT1 {
      get { return timeoutT1_; }
      set {
        timeoutT1_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT2" field.</summary>
    public const int TimeoutT2FieldNumber = 2;
    private uint timeoutT2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT2 {
      get { return timeoutT2_; }
      set {
        timeoutT2_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT3" field.</summary>
    public const int TimeoutT3FieldNumber = 3;
    private uint timeoutT3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT3 {
      get { return timeoutT3_; }
      set {
        timeoutT3_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT4" field.</summary>
    public const int TimeoutT4FieldNumber = 4;
    private uint timeoutT4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT4 {
      get { return timeoutT4_; }
      set {
        timeoutT4_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT5" field.</summary>
    public const int TimeoutT5FieldNumber = 5;
    private uint timeoutT5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT5 {
      get { return timeoutT5_; }
      set {
        timeoutT5_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT6" field.</summary>
    public const int TimeoutT6FieldNumber = 6;
    private uint timeoutT6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT6 {
      get { return timeoutT6_; }
      set {
        timeoutT6_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT7" field.</summary>
    public const int TimeoutT7FieldNumber = 7;
    private uint timeoutT7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT7 {
      get { return timeoutT7_; }
      set {
        timeoutT7_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT8" field.</summary>
    public const int TimeoutT8FieldNumber = 8;
    private uint timeoutT8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT8 {
      get { return timeoutT8_; }
      set {
        timeoutT8_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutBlock" field.</summary>
    public const int TimeoutBlockFieldNumber = 9;
    private uint timeoutBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutBlock {
      get { return timeoutBlock_; }
      set {
        timeoutBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_21_CONTROL_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_21_CONTROL_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeoutT1 != other.TimeoutT1) return false;
      if (TimeoutT2 != other.TimeoutT2) return false;
      if (TimeoutT3 != other.TimeoutT3) return false;
      if (TimeoutT4 != other.TimeoutT4) return false;
      if (TimeoutT5 != other.TimeoutT5) return false;
      if (TimeoutT6 != other.TimeoutT6) return false;
      if (TimeoutT7 != other.TimeoutT7) return false;
      if (TimeoutT8 != other.TimeoutT8) return false;
      if (TimeoutBlock != other.TimeoutBlock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeoutT1 != 0) hash ^= TimeoutT1.GetHashCode();
      if (TimeoutT2 != 0) hash ^= TimeoutT2.GetHashCode();
      if (TimeoutT3 != 0) hash ^= TimeoutT3.GetHashCode();
      if (TimeoutT4 != 0) hash ^= TimeoutT4.GetHashCode();
      if (TimeoutT5 != 0) hash ^= TimeoutT5.GetHashCode();
      if (TimeoutT6 != 0) hash ^= TimeoutT6.GetHashCode();
      if (TimeoutT7 != 0) hash ^= TimeoutT7.GetHashCode();
      if (TimeoutT8 != 0) hash ^= TimeoutT8.GetHashCode();
      if (TimeoutBlock != 0) hash ^= TimeoutBlock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeoutT1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeoutT1);
      }
      if (TimeoutT2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeoutT2);
      }
      if (TimeoutT3 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeoutT3);
      }
      if (TimeoutT4 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeoutT4);
      }
      if (TimeoutT5 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeoutT5);
      }
      if (TimeoutT6 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeoutT6);
      }
      if (TimeoutT7 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TimeoutT7);
      }
      if (TimeoutT8 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeoutT8);
      }
      if (TimeoutBlock != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TimeoutBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeoutT1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT1);
      }
      if (TimeoutT2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT2);
      }
      if (TimeoutT3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT3);
      }
      if (TimeoutT4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT4);
      }
      if (TimeoutT5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT5);
      }
      if (TimeoutT6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT6);
      }
      if (TimeoutT7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT7);
      }
      if (TimeoutT8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT8);
      }
      if (TimeoutBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_21_CONTROL_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.TimeoutT1 != 0) {
        TimeoutT1 = other.TimeoutT1;
      }
      if (other.TimeoutT2 != 0) {
        TimeoutT2 = other.TimeoutT2;
      }
      if (other.TimeoutT3 != 0) {
        TimeoutT3 = other.TimeoutT3;
      }
      if (other.TimeoutT4 != 0) {
        TimeoutT4 = other.TimeoutT4;
      }
      if (other.TimeoutT5 != 0) {
        TimeoutT5 = other.TimeoutT5;
      }
      if (other.TimeoutT6 != 0) {
        TimeoutT6 = other.TimeoutT6;
      }
      if (other.TimeoutT7 != 0) {
        TimeoutT7 = other.TimeoutT7;
      }
      if (other.TimeoutT8 != 0) {
        TimeoutT8 = other.TimeoutT8;
      }
      if (other.TimeoutBlock != 0) {
        TimeoutBlock = other.TimeoutBlock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeoutT1 = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeoutT2 = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeoutT3 = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeoutT4 = input.ReadUInt32();
            break;
          }
          case 40: {
            TimeoutT5 = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeoutT6 = input.ReadUInt32();
            break;
          }
          case 56: {
            TimeoutT7 = input.ReadUInt32();
            break;
          }
          case 64: {
            TimeoutT8 = input.ReadUInt32();
            break;
          }
          case 72: {
            TimeoutBlock = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_121_CONTROL_DATA_RESPONSE : pb::IMessage<ID_121_CONTROL_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> _parser = new pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE>(() => new ID_121_CONTROL_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE(ID_121_CONTROL_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE Clone() {
      return new ID_121_CONTROL_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_121_CONTROL_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_121_CONTROL_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_121_CONTROL_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_23_GUIDE_DATA_REP : pb::IMessage<ID_23_GUIDE_DATA_REP> {
    private static readonly pb::MessageParser<ID_23_GUIDE_DATA_REP> _parser = new pb::MessageParser<ID_23_GUIDE_DATA_REP>(() => new ID_23_GUIDE_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_23_GUIDE_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP(ID_23_GUIDE_DATA_REP other) : this() {
      startStopSpd_ = other.startStopSpd_;
      maxSpeed_ = other.maxSpeed_;
      accelTime_ = other.accelTime_;
      sCurveRate_ = other.sCurveRate_;
      normalSpd_ = other.normalSpd_;
      manualHSpd_ = other.manualHSpd_;
      manualLSpd_ = other.manualLSpd_;
      lFLockPos_ = other.lFLockPos_;
      lBLockPos_ = other.lBLockPos_;
      rFLockPos_ = other.rFLockPos_;
      rBLockPos_ = other.rBLockPos_;
      changeStabilityTime_ = other.changeStabilityTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP Clone() {
      return new ID_23_GUIDE_DATA_REP(this);
    }

    /// <summary>Field number for the "StartStopSpd" field.</summary>
    public const int StartStopSpdFieldNumber = 1;
    private uint startStopSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartStopSpd {
      get { return startStopSpd_; }
      set {
        startStopSpd_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 2;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelTime" field.</summary>
    public const int AccelTimeFieldNumber = 3;
    private uint accelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccelTime {
      get { return accelTime_; }
      set {
        accelTime_ = value;
      }
    }

    /// <summary>Field number for the "SCurveRate" field.</summary>
    public const int SCurveRateFieldNumber = 4;
    private int sCurveRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCurveRate {
      get { return sCurveRate_; }
      set {
        sCurveRate_ = value;
      }
    }

    /// <summary>Field number for the "NormalSpd" field.</summary>
    public const int NormalSpdFieldNumber = 5;
    private uint normalSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalSpd {
      get { return normalSpd_; }
      set {
        normalSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualHSpd" field.</summary>
    public const int ManualHSpdFieldNumber = 6;
    private uint manualHSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualHSpd {
      get { return manualHSpd_; }
      set {
        manualHSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualLSpd" field.</summary>
    public const int ManualLSpdFieldNumber = 7;
    private uint manualLSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualLSpd {
      get { return manualLSpd_; }
      set {
        manualLSpd_ = value;
      }
    }

    /// <summary>Field number for the "LFLockPos" field.</summary>
    public const int LFLockPosFieldNumber = 8;
    private uint lFLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LFLockPos {
      get { return lFLockPos_; }
      set {
        lFLockPos_ = value;
      }
    }

    /// <summary>Field number for the "LBLockPos" field.</summary>
    public const int LBLockPosFieldNumber = 9;
    private uint lBLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LBLockPos {
      get { return lBLockPos_; }
      set {
        lBLockPos_ = value;
      }
    }

    /// <summary>Field number for the "RFLockPos" field.</summary>
    public const int RFLockPosFieldNumber = 10;
    private uint rFLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RFLockPos {
      get { return rFLockPos_; }
      set {
        rFLockPos_ = value;
      }
    }

    /// <summary>Field number for the "RBLockPos" field.</summary>
    public const int RBLockPosFieldNumber = 11;
    private uint rBLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RBLockPos {
      get { return rBLockPos_; }
      set {
        rBLockPos_ = value;
      }
    }

    /// <summary>Field number for the "ChangeStabilityTime" field.</summary>
    public const int ChangeStabilityTimeFieldNumber = 12;
    private uint changeStabilityTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeStabilityTime {
      get { return changeStabilityTime_; }
      set {
        changeStabilityTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_23_GUIDE_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_23_GUIDE_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartStopSpd != other.StartStopSpd) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (AccelTime != other.AccelTime) return false;
      if (SCurveRate != other.SCurveRate) return false;
      if (NormalSpd != other.NormalSpd) return false;
      if (ManualHSpd != other.ManualHSpd) return false;
      if (ManualLSpd != other.ManualLSpd) return false;
      if (LFLockPos != other.LFLockPos) return false;
      if (LBLockPos != other.LBLockPos) return false;
      if (RFLockPos != other.RFLockPos) return false;
      if (RBLockPos != other.RBLockPos) return false;
      if (ChangeStabilityTime != other.ChangeStabilityTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
      if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
      if (NormalSpd != 0) hash ^= NormalSpd.GetHashCode();
      if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
      if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
      if (LFLockPos != 0) hash ^= LFLockPos.GetHashCode();
      if (LBLockPos != 0) hash ^= LBLockPos.GetHashCode();
      if (RFLockPos != 0) hash ^= RFLockPos.GetHashCode();
      if (RBLockPos != 0) hash ^= RBLockPos.GetHashCode();
      if (ChangeStabilityTime != 0) hash ^= ChangeStabilityTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartStopSpd != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxSpeed);
      }
      if (AccelTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccelTime);
      }
      if (SCurveRate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SCurveRate);
      }
      if (NormalSpd != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NormalSpd);
      }
      if (ManualHSpd != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ManualLSpd);
      }
      if (LFLockPos != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LFLockPos);
      }
      if (LBLockPos != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LBLockPos);
      }
      if (RFLockPos != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RFLockPos);
      }
      if (RBLockPos != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RBLockPos);
      }
      if (ChangeStabilityTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ChangeStabilityTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartStopSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (AccelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
      }
      if (SCurveRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
      }
      if (NormalSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalSpd);
      }
      if (ManualHSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
      }
      if (LFLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LFLockPos);
      }
      if (LBLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LBLockPos);
      }
      if (RFLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RFLockPos);
      }
      if (RBLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RBLockPos);
      }
      if (ChangeStabilityTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeStabilityTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_23_GUIDE_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.StartStopSpd != 0) {
        StartStopSpd = other.StartStopSpd;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelTime != 0) {
        AccelTime = other.AccelTime;
      }
      if (other.SCurveRate != 0) {
        SCurveRate = other.SCurveRate;
      }
      if (other.NormalSpd != 0) {
        NormalSpd = other.NormalSpd;
      }
      if (other.ManualHSpd != 0) {
        ManualHSpd = other.ManualHSpd;
      }
      if (other.ManualLSpd != 0) {
        ManualLSpd = other.ManualLSpd;
      }
      if (other.LFLockPos != 0) {
        LFLockPos = other.LFLockPos;
      }
      if (other.LBLockPos != 0) {
        LBLockPos = other.LBLockPos;
      }
      if (other.RFLockPos != 0) {
        RFLockPos = other.RFLockPos;
      }
      if (other.RBLockPos != 0) {
        RBLockPos = other.RBLockPos;
      }
      if (other.ChangeStabilityTime != 0) {
        ChangeStabilityTime = other.ChangeStabilityTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartStopSpd = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 24: {
            AccelTime = input.ReadUInt32();
            break;
          }
          case 32: {
            SCurveRate = input.ReadInt32();
            break;
          }
          case 40: {
            NormalSpd = input.ReadUInt32();
            break;
          }
          case 48: {
            ManualHSpd = input.ReadUInt32();
            break;
          }
          case 56: {
            ManualLSpd = input.ReadUInt32();
            break;
          }
          case 64: {
            LFLockPos = input.ReadUInt32();
            break;
          }
          case 72: {
            LBLockPos = input.ReadUInt32();
            break;
          }
          case 80: {
            RFLockPos = input.ReadUInt32();
            break;
          }
          case 88: {
            RBLockPos = input.ReadUInt32();
            break;
          }
          case 96: {
            ChangeStabilityTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_123_GUIDE_DATA_RESPONSE : pb::IMessage<ID_123_GUIDE_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE>(() => new ID_123_GUIDE_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE(ID_123_GUIDE_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE Clone() {
      return new ID_123_GUIDE_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_123_GUIDE_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_123_GUIDE_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_123_GUIDE_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_61_INDIVIDUAL_UPLOAD_REQ : pb::IMessage<ID_61_INDIVIDUAL_UPLOAD_REQ> {
    private static readonly pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> _parser = new pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ>(() => new ID_61_INDIVIDUAL_UPLOAD_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ(ID_61_INDIVIDUAL_UPLOAD_REQ other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ Clone() {
      return new ID_61_INDIVIDUAL_UPLOAD_REQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_61_INDIVIDUAL_UPLOAD_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_61_INDIVIDUAL_UPLOAD_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_61_INDIVIDUAL_UPLOAD_REQ other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_161_INDIVIDUAL_UPLOAD_RESPONSE : pb::IMessage<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> {
    private static readonly pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> _parser = new pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE>(() => new ID_161_INDIVIDUAL_UPLOAD_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE Clone() {
      return new ID_161_INDIVIDUAL_UPLOAD_RESPONSE(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_161_INDIVIDUAL_UPLOAD_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_162_GUIDE_DATA_UPLOAD_REP : pb::IMessage<ID_162_GUIDE_DATA_UPLOAD_REP> {
    private static readonly pb::MessageParser<ID_162_GUIDE_DATA_UPLOAD_REP> _parser = new pb::MessageParser<ID_162_GUIDE_DATA_UPLOAD_REP>(() => new ID_162_GUIDE_DATA_UPLOAD_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_162_GUIDE_DATA_UPLOAD_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_GUIDE_DATA_UPLOAD_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_GUIDE_DATA_UPLOAD_REP(ID_162_GUIDE_DATA_UPLOAD_REP other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_GUIDE_DATA_UPLOAD_REP Clone() {
      return new ID_162_GUIDE_DATA_UPLOAD_REP(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_162_GUIDE_DATA_UPLOAD_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_162_GUIDE_DATA_UPLOAD_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_162_GUIDE_DATA_UPLOAD_REP other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_62_GUID_DATA_UPLOAD_RESPONSE : pb::IMessage<ID_62_GUID_DATA_UPLOAD_RESPONSE> {
    private static readonly pb::MessageParser<ID_62_GUID_DATA_UPLOAD_RESPONSE> _parser = new pb::MessageParser<ID_62_GUID_DATA_UPLOAD_RESPONSE>(() => new ID_62_GUID_DATA_UPLOAD_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_62_GUID_DATA_UPLOAD_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_GUID_DATA_UPLOAD_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_GUID_DATA_UPLOAD_RESPONSE(ID_62_GUID_DATA_UPLOAD_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_GUID_DATA_UPLOAD_RESPONSE Clone() {
      return new ID_62_GUID_DATA_UPLOAD_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_62_GUID_DATA_UPLOAD_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_62_GUID_DATA_UPLOAD_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_62_GUID_DATA_UPLOAD_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_63_INDIVIDUAL_CHANGE_REQ : pb::IMessage<ID_63_INDIVIDUAL_CHANGE_REQ> {
    private static readonly pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> _parser = new pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ>(() => new ID_63_INDIVIDUAL_CHANGE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ(ID_63_INDIVIDUAL_CHANGE_REQ other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ Clone() {
      return new ID_63_INDIVIDUAL_CHANGE_REQ(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_63_INDIVIDUAL_CHANGE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_63_INDIVIDUAL_CHANGE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_63_INDIVIDUAL_CHANGE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_163_INDIVIDUAL_CHANGE_RESPONSE : pb::IMessage<ID_163_INDIVIDUAL_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE>(() => new ID_163_INDIVIDUAL_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE Clone() {
      return new ID_163_INDIVIDUAL_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_163_INDIVIDUAL_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_31_TRANS_REQUEST : pb::IMessage<ID_31_TRANS_REQUEST> {
    private static readonly pb::MessageParser<ID_31_TRANS_REQUEST> _parser = new pb::MessageParser<ID_31_TRANS_REQUEST>(() => new ID_31_TRANS_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_31_TRANS_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST(ID_31_TRANS_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
      loadAdr_ = other.loadAdr_;
      toAdr_ = other.toAdr_;
      loadPortID_ = other.loadPortID_;
      unloadPortID_ = other.unloadPortID_;
      secDistance_ = other.secDistance_;
      bOXID_ = other.bOXID_;
      cSTID_ = other.cSTID_;
      lOTID_ = other.lOTID_;
      guideSectionsStartToLoad_ = other.guideSectionsStartToLoad_.Clone();
      guideAddressStartToLoad_ = other.guideAddressStartToLoad_.Clone();
      guideSectionsToDestination_ = other.guideSectionsToDestination_.Clone();
      guideAddressToDestination_ = other.guideAddressToDestination_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST Clone() {
      return new ID_31_TRANS_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "LoadAdr" field.</summary>
    public const int LoadAdrFieldNumber = 3;
    private string loadAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadAdr {
      get { return loadAdr_; }
      set {
        loadAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 4;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPortID" field.</summary>
    public const int LoadPortIDFieldNumber = 5;
    private string loadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPortID {
      get { return loadPortID_; }
      set {
        loadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnloadPortID" field.</summary>
    public const int UnloadPortIDFieldNumber = 6;
    private string unloadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnloadPortID {
      get { return unloadPortID_; }
      set {
        unloadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 7;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 8;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 9;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 10;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Guide_Sections_StartToLoad" field.</summary>
    public const int GuideSectionsStartToLoadFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_guideSectionsStartToLoad_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> guideSectionsStartToLoad_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSectionsStartToLoad {
      get { return guideSectionsStartToLoad_; }
    }

    /// <summary>Field number for the "Guide_Address_StartToLoad" field.</summary>
    public const int GuideAddressStartToLoadFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_guideAddressStartToLoad_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> guideAddressStartToLoad_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddressStartToLoad {
      get { return guideAddressStartToLoad_; }
    }

    /// <summary>Field number for the "Guide_Sections_ToDestination" field.</summary>
    public const int GuideSectionsToDestinationFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_guideSectionsToDestination_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> guideSectionsToDestination_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSectionsToDestination {
      get { return guideSectionsToDestination_; }
    }

    /// <summary>Field number for the "Guide_Address_ToDestination" field.</summary>
    public const int GuideAddressToDestinationFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_guideAddressToDestination_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> guideAddressToDestination_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddressToDestination {
      get { return guideAddressToDestination_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_31_TRANS_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_31_TRANS_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      if (LoadAdr != other.LoadAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (LoadPortID != other.LoadPortID) return false;
      if (UnloadPortID != other.UnloadPortID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (BOXID != other.BOXID) return false;
      if (CSTID != other.CSTID) return false;
      if (LOTID != other.LOTID) return false;
      if(!guideSectionsStartToLoad_.Equals(other.guideSectionsStartToLoad_)) return false;
      if(!guideAddressStartToLoad_.Equals(other.guideAddressStartToLoad_)) return false;
      if(!guideSectionsToDestination_.Equals(other.guideSectionsToDestination_)) return false;
      if(!guideAddressToDestination_.Equals(other.guideAddressToDestination_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (LoadAdr.Length != 0) hash ^= LoadAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (LoadPortID.Length != 0) hash ^= LoadPortID.GetHashCode();
      if (UnloadPortID.Length != 0) hash ^= UnloadPortID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      hash ^= guideSectionsStartToLoad_.GetHashCode();
      hash ^= guideAddressStartToLoad_.GetHashCode();
      hash ^= guideSectionsToDestination_.GetHashCode();
      hash ^= guideAddressToDestination_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (LoadAdr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoadAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ToAdr);
      }
      if (LoadPortID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UnloadPortID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SecDistance);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BOXID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CSTID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LOTID);
      }
      guideSectionsStartToLoad_.WriteTo(output, _repeated_guideSectionsStartToLoad_codec);
      guideAddressStartToLoad_.WriteTo(output, _repeated_guideAddressStartToLoad_codec);
      guideSectionsToDestination_.WriteTo(output, _repeated_guideSectionsToDestination_codec);
      guideAddressToDestination_.WriteTo(output, _repeated_guideAddressToDestination_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (LoadAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (LoadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnloadPortID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (BOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      size += guideSectionsStartToLoad_.CalculateSize(_repeated_guideSectionsStartToLoad_codec);
      size += guideAddressStartToLoad_.CalculateSize(_repeated_guideAddressStartToLoad_codec);
      size += guideSectionsToDestination_.CalculateSize(_repeated_guideSectionsToDestination_codec);
      size += guideAddressToDestination_.CalculateSize(_repeated_guideAddressToDestination_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_31_TRANS_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.LoadAdr.Length != 0) {
        LoadAdr = other.LoadAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.LoadPortID.Length != 0) {
        LoadPortID = other.LoadPortID;
      }
      if (other.UnloadPortID.Length != 0) {
        UnloadPortID = other.UnloadPortID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      guideSectionsStartToLoad_.Add(other.guideSectionsStartToLoad_);
      guideAddressStartToLoad_.Add(other.guideAddressStartToLoad_);
      guideSectionsToDestination_.Add(other.guideSectionsToDestination_);
      guideAddressToDestination_.Add(other.guideAddressToDestination_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType) input.ReadEnum();
            break;
          }
          case 26: {
            LoadAdr = input.ReadString();
            break;
          }
          case 34: {
            ToAdr = input.ReadString();
            break;
          }
          case 42: {
            LoadPortID = input.ReadString();
            break;
          }
          case 50: {
            UnloadPortID = input.ReadString();
            break;
          }
          case 56: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 66: {
            BOXID = input.ReadString();
            break;
          }
          case 74: {
            CSTID = input.ReadString();
            break;
          }
          case 82: {
            LOTID = input.ReadString();
            break;
          }
          case 90: {
            guideSectionsStartToLoad_.AddEntriesFrom(input, _repeated_guideSectionsStartToLoad_codec);
            break;
          }
          case 98: {
            guideAddressStartToLoad_.AddEntriesFrom(input, _repeated_guideAddressStartToLoad_codec);
            break;
          }
          case 106: {
            guideSectionsToDestination_.AddEntriesFrom(input, _repeated_guideSectionsToDestination_codec);
            break;
          }
          case 114: {
            guideAddressToDestination_.AddEntriesFrom(input, _repeated_guideAddressToDestination_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_131_TRANS_RESPONSE : pb::IMessage<ID_131_TRANS_RESPONSE> {
    private static readonly pb::MessageParser<ID_131_TRANS_RESPONSE> _parser = new pb::MessageParser<ID_131_TRANS_RESPONSE>(() => new ID_131_TRANS_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_131_TRANS_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE(ID_131_TRANS_RESPONSE other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
      replyCode_ = other.replyCode_;
      ngReason_ = other.ngReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE Clone() {
      return new ID_131_TRANS_RESPONSE(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "NgReason" field.</summary>
    public const int NgReasonFieldNumber = 4;
    private string ngReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NgReason {
      get { return ngReason_; }
      set {
        ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_131_TRANS_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_131_TRANS_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      if (NgReason != other.NgReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
      if (NgReason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NgReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (NgReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_131_TRANS_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.NgReason.Length != 0) {
        NgReason = other.NgReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ActiveType) input.ReadEnum();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 34: {
            NgReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_132_TRANS_COMPLETE_REPORT : pb::IMessage<ID_132_TRANS_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT>(() => new ID_132_TRANS_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT(ID_132_TRANS_COMPLETE_REPORT other) : this() {
      cmdID_ = other.cmdID_;
      bOXID_ = other.bOXID_;
      cSTID_ = other.cSTID_;
      lOTID_ = other.lOTID_;
      cmpStatus_ = other.cmpStatus_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      cmdDistance_ = other.cmdDistance_;
      hasBox_ = other.hasBox_;
      carBoxID_ = other.carBoxID_;
      hasCst_ = other.hasCst_;
      carCstID_ = other.carCstID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT Clone() {
      return new ID_132_TRANS_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 2;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 3;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 4;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmpStatus" field.</summary>
    public const int CmpStatusFieldNumber = 5;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CompleteStatus cmpStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CompleteStatus CmpStatus {
      get { return cmpStatus_; }
      set {
        cmpStatus_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 6;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 7;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 8;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_Distance" field.</summary>
    public const int CmdDistanceFieldNumber = 9;
    private int cmdDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmdDistance {
      get { return cmdDistance_; }
      set {
        cmdDistance_ = value;
      }
    }

    /// <summary>Field number for the "HasBox" field.</summary>
    public const int HasBoxFieldNumber = 10;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus hasBox_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus HasBox {
      get { return hasBox_; }
      set {
        hasBox_ = value;
      }
    }

    /// <summary>Field number for the "CarBoxID" field.</summary>
    public const int CarBoxIDFieldNumber = 11;
    private string carBoxID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarBoxID {
      get { return carBoxID_; }
      set {
        carBoxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasCst" field.</summary>
    public const int HasCstFieldNumber = 12;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus hasCst_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus HasCst {
      get { return hasCst_; }
      set {
        hasCst_ = value;
      }
    }

    /// <summary>Field number for the "CarCstID" field.</summary>
    public const int CarCstIDFieldNumber = 13;
    private string carCstID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarCstID {
      get { return carCstID_; }
      set {
        carCstID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_132_TRANS_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_132_TRANS_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (BOXID != other.BOXID) return false;
      if (CSTID != other.CSTID) return false;
      if (LOTID != other.LOTID) return false;
      if (CmpStatus != other.CmpStatus) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (CmdDistance != other.CmdDistance) return false;
      if (HasBox != other.HasBox) return false;
      if (CarBoxID != other.CarBoxID) return false;
      if (HasCst != other.HasCst) return false;
      if (CarCstID != other.CarCstID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (CmdDistance != 0) hash ^= CmdDistance.GetHashCode();
      if (HasBox != 0) hash ^= HasBox.GetHashCode();
      if (CarBoxID.Length != 0) hash ^= CarBoxID.GetHashCode();
      if (HasCst != 0) hash ^= HasCst.GetHashCode();
      if (CarCstID.Length != 0) hash ^= CarCstID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BOXID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CSTID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LOTID);
      }
      if (CmpStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SecDistance);
      }
      if (CmdDistance != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CmdDistance);
      }
      if (HasBox != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CarBoxID);
      }
      if (HasCst != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) HasCst);
      }
      if (CarCstID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CarCstID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (BOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      if (CmpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (CmdDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmdDistance);
      }
      if (HasBox != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarBoxID);
      }
      if (HasCst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HasCst);
      }
      if (CarCstID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarCstID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_132_TRANS_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      if (other.CmpStatus != 0) {
        CmpStatus = other.CmpStatus;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.CmdDistance != 0) {
        CmdDistance = other.CmdDistance;
      }
      if (other.HasBox != 0) {
        HasBox = other.HasBox;
      }
      if (other.CarBoxID.Length != 0) {
        CarBoxID = other.CarBoxID;
      }
      if (other.HasCst != 0) {
        HasCst = other.HasCst;
      }
      if (other.CarCstID.Length != 0) {
        CarCstID = other.CarCstID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 18: {
            BOXID = input.ReadString();
            break;
          }
          case 26: {
            CSTID = input.ReadString();
            break;
          }
          case 34: {
            LOTID = input.ReadString();
            break;
          }
          case 40: {
            cmpStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CompleteStatus) input.ReadEnum();
            break;
          }
          case 50: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 58: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 64: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 72: {
            CmdDistance = input.ReadInt32();
            break;
          }
          case 80: {
            hasBox_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus) input.ReadEnum();
            break;
          }
          case 90: {
            CarBoxID = input.ReadString();
            break;
          }
          case 96: {
            hasCst_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus) input.ReadEnum();
            break;
          }
          case 106: {
            CarCstID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_32_TRANS_COMPLETE_RESPONSE : pb::IMessage<ID_32_TRANS_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE>(() => new ID_32_TRANS_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE(ID_32_TRANS_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE Clone() {
      return new ID_32_TRANS_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_32_TRANS_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_32_TRANS_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_32_TRANS_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST : pb::IMessage<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> {
    private static readonly pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST>(() => new ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) : this() {
      controlType_ = other.controlType_;
      cancelSecID_ = other.cancelSecID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST Clone() {
      return new ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST(this);
    }

    /// <summary>Field number for the "ControlType" field.</summary>
    public const int ControlTypeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType controlType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType ControlType {
      get { return controlType_; }
      set {
        controlType_ = value;
      }
    }

    /// <summary>Field number for the "CancelSecID" field.</summary>
    public const int CancelSecIDFieldNumber = 2;
    private string cancelSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelSecID {
      get { return cancelSecID_; }
      set {
        cancelSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControlType != other.ControlType) return false;
      if (CancelSecID != other.CancelSecID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ControlType != 0) hash ^= ControlType.GetHashCode();
      if (CancelSecID.Length != 0) hash ^= CancelSecID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CancelSecID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelSecID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.ControlType != 0) {
        ControlType = other.ControlType;
      }
      if (other.CancelSecID.Length != 0) {
        CancelSecID = other.CancelSecID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            controlType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType) input.ReadEnum();
            break;
          }
          case 18: {
            CancelSecID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE : pb::IMessage<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> {
    private static readonly pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE>(() => new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) : this() {
      controlType_ = other.controlType_;
      cancelSecID_ = other.cancelSecID_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE Clone() {
      return new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE(this);
    }

    /// <summary>Field number for the "ControlType" field.</summary>
    public const int ControlTypeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType controlType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType ControlType {
      get { return controlType_; }
      set {
        controlType_ = value;
      }
    }

    /// <summary>Field number for the "CancelSecID" field.</summary>
    public const int CancelSecIDFieldNumber = 2;
    private string cancelSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelSecID {
      get { return cancelSecID_; }
      set {
        cancelSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControlType != other.ControlType) return false;
      if (CancelSecID != other.CancelSecID) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ControlType != 0) hash ^= ControlType.GetHashCode();
      if (CancelSecID.Length != 0) hash ^= CancelSecID.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ControlType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CancelSecID);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ControlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ControlType);
      }
      if (CancelSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelSecID);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ControlType != 0) {
        ControlType = other.ControlType;
      }
      if (other.CancelSecID.Length != 0) {
        CancelSecID = other.CancelSecID;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            controlType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ControlType) input.ReadEnum();
            break;
          }
          case 18: {
            CancelSecID = input.ReadString();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_134_TRANS_EVENT_REP : pb::IMessage<ID_134_TRANS_EVENT_REP> {
    private static readonly pb::MessageParser<ID_134_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_134_TRANS_EVENT_REP>(() => new ID_134_TRANS_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_134_TRANS_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP(ID_134_TRANS_EVENT_REP other) : this() {
      eventType_ = other.eventType_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      leftGuideLockStatus_ = other.leftGuideLockStatus_;
      rightGuideLockStatus_ = other.rightGuideLockStatus_;
      secDistance_ = other.secDistance_;
      speed_ = other.speed_;
      angle_ = other.angle_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP Clone() {
      return new ID_134_TRANS_EVENT_REP(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 2;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 3;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeftGuideLockStatus" field.</summary>
    public const int LeftGuideLockStatusFieldNumber = 5;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus leftGuideLockStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus LeftGuideLockStatus {
      get { return leftGuideLockStatus_; }
      set {
        leftGuideLockStatus_ = value;
      }
    }

    /// <summary>Field number for the "RightGuideLockStatus" field.</summary>
    public const int RightGuideLockStatusFieldNumber = 6;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus rightGuideLockStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus RightGuideLockStatus {
      get { return rightGuideLockStatus_; }
      set {
        rightGuideLockStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 7;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 8;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 9;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 10;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 11;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_134_TRANS_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_134_TRANS_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (LeftGuideLockStatus != other.LeftGuideLockStatus) return false;
      if (RightGuideLockStatus != other.RightGuideLockStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (Speed != other.Speed) return false;
      if (Angle != other.Angle) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (LeftGuideLockStatus != 0) hash ^= LeftGuideLockStatus.GetHashCode();
      if (RightGuideLockStatus != 0) hash ^= RightGuideLockStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (Angle != 0D) hash ^= Angle.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrentSecID);
      }
      if (LeftGuideLockStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LeftGuideLockStatus);
      }
      if (RightGuideLockStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RightGuideLockStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SecDistance);
      }
      if (Speed != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Speed);
      }
      if (Angle != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Angle);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(YAxis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (LeftGuideLockStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LeftGuideLockStatus);
      }
      if (RightGuideLockStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RightGuideLockStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (Angle != 0D) {
        size += 1 + 8;
      }
      if (XAxis != 0D) {
        size += 1 + 8;
      }
      if (YAxis != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_134_TRANS_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.LeftGuideLockStatus != 0) {
        LeftGuideLockStatus = other.LeftGuideLockStatus;
      }
      if (other.RightGuideLockStatus != 0) {
        RightGuideLockStatus = other.RightGuideLockStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 26: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 40: {
            leftGuideLockStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus) input.ReadEnum();
            break;
          }
          case 48: {
            rightGuideLockStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhGuideStatus) input.ReadEnum();
            break;
          }
          case 56: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 65: {
            Speed = input.ReadDouble();
            break;
          }
          case 73: {
            Angle = input.ReadDouble();
            break;
          }
          case 81: {
            XAxis = input.ReadDouble();
            break;
          }
          case 89: {
            YAxis = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_35_CARRIER_ID_RENAME_REQUEST : pb::IMessage<ID_35_CARRIER_ID_RENAME_REQUEST> {
    private static readonly pb::MessageParser<ID_35_CARRIER_ID_RENAME_REQUEST> _parser = new pb::MessageParser<ID_35_CARRIER_ID_RENAME_REQUEST>(() => new ID_35_CARRIER_ID_RENAME_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_35_CARRIER_ID_RENAME_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CARRIER_ID_RENAME_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CARRIER_ID_RENAME_REQUEST(ID_35_CARRIER_ID_RENAME_REQUEST other) : this() {
      oLDBOXID_ = other.oLDBOXID_;
      nEWBOXID_ = other.nEWBOXID_;
      oLDCSTID_ = other.oLDCSTID_;
      nEWCSTID_ = other.nEWCSTID_;
      oLDLOTID_ = other.oLDLOTID_;
      nEWLOTID_ = other.nEWLOTID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CARRIER_ID_RENAME_REQUEST Clone() {
      return new ID_35_CARRIER_ID_RENAME_REQUEST(this);
    }

    /// <summary>Field number for the "OLD_BOX_ID" field.</summary>
    public const int OLDBOXIDFieldNumber = 1;
    private string oLDBOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OLDBOXID {
      get { return oLDBOXID_; }
      set {
        oLDBOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NEW_BOX_ID" field.</summary>
    public const int NEWBOXIDFieldNumber = 2;
    private string nEWBOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NEWBOXID {
      get { return nEWBOXID_; }
      set {
        nEWBOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OLD_CST_ID" field.</summary>
    public const int OLDCSTIDFieldNumber = 3;
    private string oLDCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OLDCSTID {
      get { return oLDCSTID_; }
      set {
        oLDCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NEW_CST_ID" field.</summary>
    public const int NEWCSTIDFieldNumber = 4;
    private string nEWCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NEWCSTID {
      get { return nEWCSTID_; }
      set {
        nEWCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OLD_LOT_ID" field.</summary>
    public const int OLDLOTIDFieldNumber = 5;
    private string oLDLOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OLDLOTID {
      get { return oLDLOTID_; }
      set {
        oLDLOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NEW_LOT_ID" field.</summary>
    public const int NEWLOTIDFieldNumber = 6;
    private string nEWLOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NEWLOTID {
      get { return nEWLOTID_; }
      set {
        nEWLOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_35_CARRIER_ID_RENAME_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_35_CARRIER_ID_RENAME_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OLDBOXID != other.OLDBOXID) return false;
      if (NEWBOXID != other.NEWBOXID) return false;
      if (OLDCSTID != other.OLDCSTID) return false;
      if (NEWCSTID != other.NEWCSTID) return false;
      if (OLDLOTID != other.OLDLOTID) return false;
      if (NEWLOTID != other.NEWLOTID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OLDBOXID.Length != 0) hash ^= OLDBOXID.GetHashCode();
      if (NEWBOXID.Length != 0) hash ^= NEWBOXID.GetHashCode();
      if (OLDCSTID.Length != 0) hash ^= OLDCSTID.GetHashCode();
      if (NEWCSTID.Length != 0) hash ^= NEWCSTID.GetHashCode();
      if (OLDLOTID.Length != 0) hash ^= OLDLOTID.GetHashCode();
      if (NEWLOTID.Length != 0) hash ^= NEWLOTID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OLDBOXID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OLDBOXID);
      }
      if (NEWBOXID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NEWBOXID);
      }
      if (OLDCSTID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OLDCSTID);
      }
      if (NEWCSTID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NEWCSTID);
      }
      if (OLDLOTID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OLDLOTID);
      }
      if (NEWLOTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NEWLOTID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OLDBOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OLDBOXID);
      }
      if (NEWBOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NEWBOXID);
      }
      if (OLDCSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OLDCSTID);
      }
      if (NEWCSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NEWCSTID);
      }
      if (OLDLOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OLDLOTID);
      }
      if (NEWLOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NEWLOTID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_35_CARRIER_ID_RENAME_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.OLDBOXID.Length != 0) {
        OLDBOXID = other.OLDBOXID;
      }
      if (other.NEWBOXID.Length != 0) {
        NEWBOXID = other.NEWBOXID;
      }
      if (other.OLDCSTID.Length != 0) {
        OLDCSTID = other.OLDCSTID;
      }
      if (other.NEWCSTID.Length != 0) {
        NEWCSTID = other.NEWCSTID;
      }
      if (other.OLDLOTID.Length != 0) {
        OLDLOTID = other.OLDLOTID;
      }
      if (other.NEWLOTID.Length != 0) {
        NEWLOTID = other.NEWLOTID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OLDBOXID = input.ReadString();
            break;
          }
          case 18: {
            NEWBOXID = input.ReadString();
            break;
          }
          case 26: {
            OLDCSTID = input.ReadString();
            break;
          }
          case 34: {
            NEWCSTID = input.ReadString();
            break;
          }
          case 42: {
            OLDLOTID = input.ReadString();
            break;
          }
          case 50: {
            NEWLOTID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_135_CARRIER_ID_RENAME_RESPONSE : pb::IMessage<ID_135_CARRIER_ID_RENAME_RESPONSE> {
    private static readonly pb::MessageParser<ID_135_CARRIER_ID_RENAME_RESPONSE> _parser = new pb::MessageParser<ID_135_CARRIER_ID_RENAME_RESPONSE>(() => new ID_135_CARRIER_ID_RENAME_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_135_CARRIER_ID_RENAME_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CARRIER_ID_RENAME_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CARRIER_ID_RENAME_RESPONSE(ID_135_CARRIER_ID_RENAME_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CARRIER_ID_RENAME_RESPONSE Clone() {
      return new ID_135_CARRIER_ID_RENAME_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_135_CARRIER_ID_RENAME_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_135_CARRIER_ID_RENAME_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_135_CARRIER_ID_RENAME_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReserveInfo : pb::IMessage<ReserveInfo> {
    private static readonly pb::MessageParser<ReserveInfo> _parser = new pb::MessageParser<ReserveInfo>(() => new ReserveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo(ReserveInfo other) : this() {
      reserveSectionID_ = other.reserveSectionID_;
      driveDirction_ = other.driveDirction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo Clone() {
      return new ReserveInfo(this);
    }

    /// <summary>Field number for the "Reserve_Section_ID" field.</summary>
    public const int ReserveSectionIDFieldNumber = 1;
    private string reserveSectionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReserveSectionID {
      get { return reserveSectionID_; }
      set {
        reserveSectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DriveDirction" field.</summary>
    public const int DriveDirctionFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction driveDirction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction DriveDirction {
      get { return driveDirction_; }
      set {
        driveDirction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReserveSectionID != other.ReserveSectionID) return false;
      if (DriveDirction != other.DriveDirction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReserveSectionID.Length != 0) hash ^= ReserveSectionID.GetHashCode();
      if (DriveDirction != 0) hash ^= DriveDirction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReserveSectionID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReserveSectionID);
      }
      if (DriveDirction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DriveDirction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReserveSectionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReserveSectionID);
      }
      if (DriveDirction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DriveDirction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveInfo other) {
      if (other == null) {
        return;
      }
      if (other.ReserveSectionID.Length != 0) {
        ReserveSectionID = other.ReserveSectionID;
      }
      if (other.DriveDirction != 0) {
        DriveDirction = other.DriveDirction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReserveSectionID = input.ReadString();
            break;
          }
          case 16: {
            driveDirction_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_136_TRANS_EVENT_REP : pb::IMessage<ID_136_TRANS_EVENT_REP> {
    private static readonly pb::MessageParser<ID_136_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_136_TRANS_EVENT_REP>(() => new ID_136_TRANS_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_136_TRANS_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP(ID_136_TRANS_EVENT_REP other) : this() {
      eventType_ = other.eventType_;
      reserveInfos_ = other.reserveInfos_.Clone();
      requestBlockID_ = other.requestBlockID_;
      requestHIDID_ = other.requestHIDID_;
      bOXID_ = other.bOXID_;
      cSTID_ = other.cSTID_;
      lOTID_ = other.lOTID_;
      releaseBlockAdrID_ = other.releaseBlockAdrID_;
      releaseHIDAdrID_ = other.releaseHIDAdrID_;
      loadPortID_ = other.loadPortID_;
      unloadPortID_ = other.unloadPortID_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      bCRReadResult_ = other.bCRReadResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP Clone() {
      return new ID_136_TRANS_EVENT_REP(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(18, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Request_Block_ID" field.</summary>
    public const int RequestBlockIDFieldNumber = 3;
    private string requestBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestBlockID {
      get { return requestBlockID_; }
      set {
        requestBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Request_HID_ID" field.</summary>
    public const int RequestHIDIDFieldNumber = 4;
    private string requestHIDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestHIDID {
      get { return requestHIDID_; }
      set {
        requestHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 5;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 6;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 7;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Release_Block_AdrID" field.</summary>
    public const int ReleaseBlockAdrIDFieldNumber = 8;
    private string releaseBlockAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseBlockAdrID {
      get { return releaseBlockAdrID_; }
      set {
        releaseBlockAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Release_HID_AdrID" field.</summary>
    public const int ReleaseHIDAdrIDFieldNumber = 9;
    private string releaseHIDAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseHIDAdrID {
      get { return releaseHIDAdrID_; }
      set {
        releaseHIDAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPortID" field.</summary>
    public const int LoadPortIDFieldNumber = 10;
    private string loadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPortID {
      get { return loadPortID_; }
      set {
        loadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnloadPortID" field.</summary>
    public const int UnloadPortIDFieldNumber = 11;
    private string unloadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnloadPortID {
      get { return unloadPortID_; }
      set {
        unloadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 12;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 13;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 14;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "BCRReadResult" field.</summary>
    public const int BCRReadResultFieldNumber = 15;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.BCRReadResult bCRReadResult_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.BCRReadResult BCRReadResult {
      get { return bCRReadResult_; }
      set {
        bCRReadResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_136_TRANS_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_136_TRANS_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (RequestBlockID != other.RequestBlockID) return false;
      if (RequestHIDID != other.RequestHIDID) return false;
      if (BOXID != other.BOXID) return false;
      if (CSTID != other.CSTID) return false;
      if (LOTID != other.LOTID) return false;
      if (ReleaseBlockAdrID != other.ReleaseBlockAdrID) return false;
      if (ReleaseHIDAdrID != other.ReleaseHIDAdrID) return false;
      if (LoadPortID != other.LoadPortID) return false;
      if (UnloadPortID != other.UnloadPortID) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (BCRReadResult != other.BCRReadResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (RequestBlockID.Length != 0) hash ^= RequestBlockID.GetHashCode();
      if (RequestHIDID.Length != 0) hash ^= RequestHIDID.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      if (ReleaseBlockAdrID.Length != 0) hash ^= ReleaseBlockAdrID.GetHashCode();
      if (ReleaseHIDAdrID.Length != 0) hash ^= ReleaseHIDAdrID.GetHashCode();
      if (LoadPortID.Length != 0) hash ^= LoadPortID.GetHashCode();
      if (UnloadPortID.Length != 0) hash ^= UnloadPortID.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (BCRReadResult != 0) hash ^= BCRReadResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (RequestBlockID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RequestBlockID);
      }
      if (RequestHIDID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestHIDID);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BOXID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CSTID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LOTID);
      }
      if (ReleaseBlockAdrID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ReleaseBlockAdrID);
      }
      if (ReleaseHIDAdrID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReleaseHIDAdrID);
      }
      if (LoadPortID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UnloadPortID);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SecDistance);
      }
      if (BCRReadResult != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) BCRReadResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (RequestBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestBlockID);
      }
      if (RequestHIDID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestHIDID);
      }
      if (BOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      if (ReleaseBlockAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseBlockAdrID);
      }
      if (ReleaseHIDAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseHIDAdrID);
      }
      if (LoadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnloadPortID);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (BCRReadResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BCRReadResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_136_TRANS_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.RequestBlockID.Length != 0) {
        RequestBlockID = other.RequestBlockID;
      }
      if (other.RequestHIDID.Length != 0) {
        RequestHIDID = other.RequestHIDID;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      if (other.ReleaseBlockAdrID.Length != 0) {
        ReleaseBlockAdrID = other.ReleaseBlockAdrID;
      }
      if (other.ReleaseHIDAdrID.Length != 0) {
        ReleaseHIDAdrID = other.ReleaseHIDAdrID;
      }
      if (other.LoadPortID.Length != 0) {
        LoadPortID = other.LoadPortID;
      }
      if (other.UnloadPortID.Length != 0) {
        UnloadPortID = other.UnloadPortID;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.BCRReadResult != 0) {
        BCRReadResult = other.BCRReadResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 26: {
            RequestBlockID = input.ReadString();
            break;
          }
          case 34: {
            RequestHIDID = input.ReadString();
            break;
          }
          case 42: {
            BOXID = input.ReadString();
            break;
          }
          case 50: {
            CSTID = input.ReadString();
            break;
          }
          case 58: {
            LOTID = input.ReadString();
            break;
          }
          case 66: {
            ReleaseBlockAdrID = input.ReadString();
            break;
          }
          case 74: {
            ReleaseHIDAdrID = input.ReadString();
            break;
          }
          case 82: {
            LoadPortID = input.ReadString();
            break;
          }
          case 90: {
            UnloadPortID = input.ReadString();
            break;
          }
          case 98: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 106: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 112: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 120: {
            bCRReadResult_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.BCRReadResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_36_TRANS_EVENT_RESPONSE : pb::IMessage<ID_36_TRANS_EVENT_RESPONSE> {
    private static readonly pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> _parser = new pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE>(() => new ID_36_TRANS_EVENT_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE(ID_36_TRANS_EVENT_RESPONSE other) : this() {
      isBlockPass_ = other.isBlockPass_;
      isReserveSuccess_ = other.isReserveSuccess_;
      reserveInfos_ = other.reserveInfos_.Clone();
      isHIDPass_ = other.isHIDPass_;
      renameBOXID_ = other.renameBOXID_;
      renameCSTID_ = other.renameCSTID_;
      renameLOTID_ = other.renameLOTID_;
      replyActiveType_ = other.replyActiveType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE Clone() {
      return new ID_36_TRANS_EVENT_RESPONSE(this);
    }

    /// <summary>Field number for the "Is_Block_Pass" field.</summary>
    public const int IsBlockPassFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType isBlockPass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType IsBlockPass {
      get { return isBlockPass_; }
      set {
        isBlockPass_ = value;
      }
    }

    /// <summary>Field number for the "Is_Reserve_Success" field.</summary>
    public const int IsReserveSuccessFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveResult isReserveSuccess_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveResult IsReserveSuccess {
      get { return isReserveSuccess_; }
      set {
        isReserveSuccess_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(26, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Is_HID_Pass" field.</summary>
    public const int IsHIDPassFieldNumber = 4;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType isHIDPass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType IsHIDPass {
      get { return isHIDPass_; }
      set {
        isHIDPass_ = value;
      }
    }

    /// <summary>Field number for the "RenameBOXID" field.</summary>
    public const int RenameBOXIDFieldNumber = 5;
    private string renameBOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameBOXID {
      get { return renameBOXID_; }
      set {
        renameBOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RenameCSTID" field.</summary>
    public const int RenameCSTIDFieldNumber = 6;
    private string renameCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameCSTID {
      get { return renameCSTID_; }
      set {
        renameCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RenameLOTID" field.</summary>
    public const int RenameLOTIDFieldNumber = 7;
    private string renameLOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameLOTID {
      get { return renameLOTID_; }
      set {
        renameLOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReplyActiveType" field.</summary>
    public const int ReplyActiveTypeFieldNumber = 8;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType replyActiveType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType ReplyActiveType {
      get { return replyActiveType_; }
      set {
        replyActiveType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 9;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_36_TRANS_EVENT_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_36_TRANS_EVENT_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBlockPass != other.IsBlockPass) return false;
      if (IsReserveSuccess != other.IsReserveSuccess) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (IsHIDPass != other.IsHIDPass) return false;
      if (RenameBOXID != other.RenameBOXID) return false;
      if (RenameCSTID != other.RenameCSTID) return false;
      if (RenameLOTID != other.RenameLOTID) return false;
      if (ReplyActiveType != other.ReplyActiveType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBlockPass != 0) hash ^= IsBlockPass.GetHashCode();
      if (IsReserveSuccess != 0) hash ^= IsReserveSuccess.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (IsHIDPass != 0) hash ^= IsHIDPass.GetHashCode();
      if (RenameBOXID.Length != 0) hash ^= RenameBOXID.GetHashCode();
      if (RenameCSTID.Length != 0) hash ^= RenameCSTID.GetHashCode();
      if (RenameLOTID.Length != 0) hash ^= RenameLOTID.GetHashCode();
      if (ReplyActiveType != 0) hash ^= ReplyActiveType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBlockPass != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IsBlockPass);
      }
      if (IsReserveSuccess != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IsReserveSuccess);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (IsHIDPass != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) IsHIDPass);
      }
      if (RenameBOXID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RenameBOXID);
      }
      if (RenameCSTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RenameCSTID);
      }
      if (RenameLOTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RenameLOTID);
      }
      if (ReplyActiveType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ReplyActiveType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBlockPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsBlockPass);
      }
      if (IsReserveSuccess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsReserveSuccess);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (IsHIDPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsHIDPass);
      }
      if (RenameBOXID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameBOXID);
      }
      if (RenameCSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameCSTID);
      }
      if (RenameLOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameLOTID);
      }
      if (ReplyActiveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReplyActiveType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_36_TRANS_EVENT_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.IsBlockPass != 0) {
        IsBlockPass = other.IsBlockPass;
      }
      if (other.IsReserveSuccess != 0) {
        IsReserveSuccess = other.IsReserveSuccess;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.IsHIDPass != 0) {
        IsHIDPass = other.IsHIDPass;
      }
      if (other.RenameBOXID.Length != 0) {
        RenameBOXID = other.RenameBOXID;
      }
      if (other.RenameCSTID.Length != 0) {
        RenameCSTID = other.RenameCSTID;
      }
      if (other.RenameLOTID.Length != 0) {
        RenameLOTID = other.RenameLOTID;
      }
      if (other.ReplyActiveType != 0) {
        ReplyActiveType = other.ReplyActiveType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isBlockPass_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType) input.ReadEnum();
            break;
          }
          case 16: {
            isReserveSuccess_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveResult) input.ReadEnum();
            break;
          }
          case 26: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 32: {
            isHIDPass_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PassType) input.ReadEnum();
            break;
          }
          case 42: {
            RenameBOXID = input.ReadString();
            break;
          }
          case 50: {
            RenameCSTID = input.ReadString();
            break;
          }
          case 58: {
            RenameLOTID = input.ReadString();
            break;
          }
          case 64: {
            replyActiveType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType) input.ReadEnum();
            break;
          }
          case 72: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_37_TRANS_CANCEL_REQUEST : pb::IMessage<ID_37_TRANS_CANCEL_REQUEST> {
    private static readonly pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST>(() => new ID_37_TRANS_CANCEL_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST(ID_37_TRANS_CANCEL_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST Clone() {
      return new ID_37_TRANS_CANCEL_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_37_TRANS_CANCEL_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_37_TRANS_CANCEL_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_37_TRANS_CANCEL_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_137_TRANS_CANCEL_RESPONSE : pb::IMessage<ID_137_TRANS_CANCEL_RESPONSE> {
    private static readonly pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE>(() => new ID_137_TRANS_CANCEL_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE(ID_137_TRANS_CANCEL_RESPONSE other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE Clone() {
      return new ID_137_TRANS_CANCEL_RESPONSE(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_137_TRANS_CANCEL_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_137_TRANS_CANCEL_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_137_TRANS_CANCEL_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType) input.ReadEnum();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_138_TRANS_CANCEL_FAIL_REQUEST : pb::IMessage<ID_138_TRANS_CANCEL_FAIL_REQUEST> {
    private static readonly pb::MessageParser<ID_138_TRANS_CANCEL_FAIL_REQUEST> _parser = new pb::MessageParser<ID_138_TRANS_CANCEL_FAIL_REQUEST>(() => new ID_138_TRANS_CANCEL_FAIL_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_138_TRANS_CANCEL_FAIL_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_TRANS_CANCEL_FAIL_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_TRANS_CANCEL_FAIL_REQUEST(ID_138_TRANS_CANCEL_FAIL_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      actType_ = other.actType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_TRANS_CANCEL_FAIL_REQUEST Clone() {
      return new ID_138_TRANS_CANCEL_FAIL_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActType" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType actType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_138_TRANS_CANCEL_FAIL_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_138_TRANS_CANCEL_FAIL_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (ActType != other.ActType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_138_TRANS_CANCEL_FAIL_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            actType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CMDCancelType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_38_TRANS_CANCEL_FAIL_RESPONSE : pb::IMessage<ID_38_TRANS_CANCEL_FAIL_RESPONSE> {
    private static readonly pb::MessageParser<ID_38_TRANS_CANCEL_FAIL_RESPONSE> _parser = new pb::MessageParser<ID_38_TRANS_CANCEL_FAIL_RESPONSE>(() => new ID_38_TRANS_CANCEL_FAIL_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_38_TRANS_CANCEL_FAIL_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_TRANS_CANCEL_FAIL_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_TRANS_CANCEL_FAIL_RESPONSE(ID_38_TRANS_CANCEL_FAIL_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_TRANS_CANCEL_FAIL_RESPONSE Clone() {
      return new ID_38_TRANS_CANCEL_FAIL_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_38_TRANS_CANCEL_FAIL_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_38_TRANS_CANCEL_FAIL_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_38_TRANS_CANCEL_FAIL_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_39_PAUSE_REQUEST : pb::IMessage<ID_39_PAUSE_REQUEST> {
    private static readonly pb::MessageParser<ID_39_PAUSE_REQUEST> _parser = new pb::MessageParser<ID_39_PAUSE_REQUEST>(() => new ID_39_PAUSE_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_39_PAUSE_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST(ID_39_PAUSE_REQUEST other) : this() {
      eventType_ = other.eventType_;
      pauseType_ = other.pauseType_;
      reserveInfos_ = other.reserveInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST Clone() {
      return new ID_39_PAUSE_REQUEST(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "PauseType" field.</summary>
    public const int PauseTypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseType pauseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseType PauseType {
      get { return pauseType_; }
      set {
        pauseType_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(26, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_39_PAUSE_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_39_PAUSE_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (PauseType != other.PauseType) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (PauseType != 0) hash ^= PauseType.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (PauseType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PauseType);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (PauseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseType);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_39_PAUSE_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.PauseType != 0) {
        PauseType = other.PauseType;
      }
      reserveInfos_.Add(other.reserveInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent) input.ReadEnum();
            break;
          }
          case 16: {
            pauseType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseType) input.ReadEnum();
            break;
          }
          case 26: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_139_PAUSE_RESPONSE : pb::IMessage<ID_139_PAUSE_RESPONSE> {
    private static readonly pb::MessageParser<ID_139_PAUSE_RESPONSE> _parser = new pb::MessageParser<ID_139_PAUSE_RESPONSE>(() => new ID_139_PAUSE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_139_PAUSE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE(ID_139_PAUSE_RESPONSE other) : this() {
      eventType_ = other.eventType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE Clone() {
      return new ID_139_PAUSE_RESPONSE(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 2;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_139_PAUSE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_139_PAUSE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_139_PAUSE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.PauseEvent) input.ReadEnum();
            break;
          }
          case 16: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_41_MODE_CHANGE_REQ : pb::IMessage<ID_41_MODE_CHANGE_REQ> {
    private static readonly pb::MessageParser<ID_41_MODE_CHANGE_REQ> _parser = new pb::MessageParser<ID_41_MODE_CHANGE_REQ>(() => new ID_41_MODE_CHANGE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_41_MODE_CHANGE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ(ID_41_MODE_CHANGE_REQ other) : this() {
      operatingVHMode_ = other.operatingVHMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ Clone() {
      return new ID_41_MODE_CHANGE_REQ(this);
    }

    /// <summary>Field number for the "OperatingVHMode" field.</summary>
    public const int OperatingVHModeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingVHMode operatingVHMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingVHMode OperatingVHMode {
      get { return operatingVHMode_; }
      set {
        operatingVHMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_41_MODE_CHANGE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_41_MODE_CHANGE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperatingVHMode != other.OperatingVHMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperatingVHMode != 0) hash ^= OperatingVHMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperatingVHMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OperatingVHMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperatingVHMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingVHMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_41_MODE_CHANGE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OperatingVHMode != 0) {
        OperatingVHMode = other.OperatingVHMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operatingVHMode_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingVHMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_141_MODE_CHANGE_RESPONSE : pb::IMessage<ID_141_MODE_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE>(() => new ID_141_MODE_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE(ID_141_MODE_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE Clone() {
      return new ID_141_MODE_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_141_MODE_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_141_MODE_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_141_MODE_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_43_STATUS_REQUEST : pb::IMessage<ID_43_STATUS_REQUEST> {
    private static readonly pb::MessageParser<ID_43_STATUS_REQUEST> _parser = new pb::MessageParser<ID_43_STATUS_REQUEST>(() => new ID_43_STATUS_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_43_STATUS_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST(ID_43_STATUS_REQUEST other) : this() {
      systemTime_ = other.systemTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST Clone() {
      return new ID_43_STATUS_REQUEST(this);
    }

    /// <summary>Field number for the "SystemTime" field.</summary>
    public const int SystemTimeFieldNumber = 1;
    private string systemTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemTime {
      get { return systemTime_; }
      set {
        systemTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_43_STATUS_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_43_STATUS_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SystemTime != other.SystemTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SystemTime.Length != 0) hash ^= SystemTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SystemTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SystemTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SystemTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_43_STATUS_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.SystemTime.Length != 0) {
        SystemTime = other.SystemTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SystemTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_143_STATUS_RESPONSE : pb::IMessage<ID_143_STATUS_RESPONSE> {
    private static readonly pb::MessageParser<ID_143_STATUS_RESPONSE> _parser = new pb::MessageParser<ID_143_STATUS_RESPONSE>(() => new ID_143_STATUS_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_143_STATUS_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE(ID_143_STATUS_RESPONSE other) : this() {
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      modeStatus_ = other.modeStatus_;
      actionStatus_ = other.actionStatus_;
      powerStatus_ = other.powerStatus_;
      obstacleStatus_ = other.obstacleStatus_;
      blockingStatus_ = other.blockingStatus_;
      hIDStatus_ = other.hIDStatus_;
      pauseStatus_ = other.pauseStatus_;
      errorStatus_ = other.errorStatus_;
      reserveStatus_ = other.reserveStatus_;
      secDistance_ = other.secDistance_;
      obstDistance_ = other.obstDistance_;
      obstVehicleID_ = other.obstVehicleID_;
      stoppedBlockID_ = other.stoppedBlockID_;
      stoppedHIDID_ = other.stoppedHIDID_;
      earthquakePauseTatus_ = other.earthquakePauseTatus_;
      safetyPauseStatus_ = other.safetyPauseStatus_;
      reserveInfos_ = other.reserveInfos_.Clone();
      drivingDirection_ = other.drivingDirection_;
      speed_ = other.speed_;
      angle_ = other.angle_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      cmdID_ = other.cmdID_;
      bOXID_ = other.bOXID_;
      cSTID_ = other.cSTID_;
      lOTID_ = other.lOTID_;
      hasBox_ = other.hasBox_;
      carBoxID_ = other.carBoxID_;
      hasCst_ = other.hasCst_;
      carCstID_ = other.carCstID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE Clone() {
      return new ID_143_STATUS_RESPONSE(this);
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 1;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 2;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModeStatus" field.</summary>
    public const int ModeStatusFieldNumber = 3;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus modeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus ModeStatus {
      get { return modeStatus_; }
      set {
        modeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ActionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 4;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus actionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "PowerStatus" field.</summary>
    public const int PowerStatusFieldNumber = 5;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus powerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus PowerStatus {
      get { return powerStatus_; }
      set {
        powerStatus_ = value;
      }
    }

    /// <summary>Field number for the "ObstacleStatus" field.</summary>
    public const int ObstacleStatusFieldNumber = 6;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle obstacleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "BlockingStatus" field.</summary>
    public const int BlockingStatusFieldNumber = 7;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle blockingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle BlockingStatus {
      get { return blockingStatus_; }
      set {
        blockingStatus_ = value;
      }
    }

    /// <summary>Field number for the "HIDStatus" field.</summary>
    public const int HIDStatusFieldNumber = 8;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle hIDStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle HIDStatus {
      get { return hIDStatus_; }
      set {
        hIDStatus_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 9;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrorStatus" field.</summary>
    public const int ErrorStatusFieldNumber = 10;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle errorStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ErrorStatus {
      get { return errorStatus_; }
      set {
        errorStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveStatus" field.</summary>
    public const int ReserveStatusFieldNumber = 11;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle reserveStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ReserveStatus {
      get { return reserveStatus_; }
      set {
        reserveStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 12;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Distance" field.</summary>
    public const int ObstDistanceFieldNumber = 13;
    private int obstDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstDistance {
      get { return obstDistance_; }
      set {
        obstDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
    public const int ObstVehicleIDFieldNumber = 14;
    private string obstVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstVehicleID {
      get { return obstVehicleID_; }
      set {
        obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
    public const int StoppedBlockIDFieldNumber = 15;
    private string stoppedBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedBlockID {
      get { return stoppedBlockID_; }
      set {
        stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_HID_ID" field.</summary>
    public const int StoppedHIDIDFieldNumber = 16;
    private string stoppedHIDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedHIDID {
      get { return stoppedHIDID_; }
      set {
        stoppedHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
    public const int EarthquakePauseTatusFieldNumber = 17;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle earthquakePauseTatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle EarthquakePauseTatus {
      get { return earthquakePauseTatus_; }
      set {
        earthquakePauseTatus_ = value;
      }
    }

    /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
    public const int SafetyPauseStatusFieldNumber = 18;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle safetyPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle SafetyPauseStatus {
      get { return safetyPauseStatus_; }
      set {
        safetyPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 19;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(154, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 20;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 21;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 22;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 23;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 24;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 25;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 26;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 27;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 28;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasBox" field.</summary>
    public const int HasBoxFieldNumber = 29;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus hasBox_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus HasBox {
      get { return hasBox_; }
      set {
        hasBox_ = value;
      }
    }

    /// <summary>Field number for the "CarBoxID" field.</summary>
    public const int CarBoxIDFieldNumber = 30;
    private string carBoxID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarBoxID {
      get { return carBoxID_; }
      set {
        carBoxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasCst" field.</summary>
    public const int HasCstFieldNumber = 31;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus hasCst_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus HasCst {
      get { return hasCst_; }
      set {
        hasCst_ = value;
      }
    }

    /// <summary>Field number for the "CarCstID" field.</summary>
    public const int CarCstIDFieldNumber = 32;
    private string carCstID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarCstID {
      get { return carCstID_; }
      set {
        carCstID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_143_STATUS_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_143_STATUS_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (ModeStatus != other.ModeStatus) return false;
      if (ActionStatus != other.ActionStatus) return false;
      if (PowerStatus != other.PowerStatus) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (BlockingStatus != other.BlockingStatus) return false;
      if (HIDStatus != other.HIDStatus) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (ErrorStatus != other.ErrorStatus) return false;
      if (ReserveStatus != other.ReserveStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (ObstDistance != other.ObstDistance) return false;
      if (ObstVehicleID != other.ObstVehicleID) return false;
      if (StoppedBlockID != other.StoppedBlockID) return false;
      if (StoppedHIDID != other.StoppedHIDID) return false;
      if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
      if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (Speed != other.Speed) return false;
      if (Angle != other.Angle) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (CmdID != other.CmdID) return false;
      if (BOXID != other.BOXID) return false;
      if (CSTID != other.CSTID) return false;
      if (LOTID != other.LOTID) return false;
      if (HasBox != other.HasBox) return false;
      if (CarBoxID != other.CarBoxID) return false;
      if (HasCst != other.HasCst) return false;
      if (CarCstID != other.CarCstID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
      if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
      if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
      if (HIDStatus != 0) hash ^= HIDStatus.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
      if (ReserveStatus != 0) hash ^= ReserveStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
      if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
      if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
      if (StoppedHIDID.Length != 0) hash ^= StoppedHIDID.GetHashCode();
      if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
      if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Angle != 0D) hash ^= Angle.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      if (HasBox != 0) hash ^= HasBox.GetHashCode();
      if (CarBoxID.Length != 0) hash ^= CarBoxID.GetHashCode();
      if (HasCst != 0) hash ^= HasCst.GetHashCode();
      if (CarCstID.Length != 0) hash ^= CarCstID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentSecID);
      }
      if (ModeStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SecDistance);
      }
      if (ObstDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) SafetyPauseStatus);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DrivingDirection);
      }
      if (Speed != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Speed);
      }
      if (Angle != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Angle);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(YAxis);
      }
      if (CmdID.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CmdID);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BOXID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(CSTID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(LOTID);
      }
      if (HasBox != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(CarBoxID);
      }
      if (HasCst != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) HasCst);
      }
      if (CarCstID.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CarCstID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (ModeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (ObstDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyPauseStatus);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Angle != 0D) {
        size += 2 + 8;
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      if (CmdID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (BOXID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (CSTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LOTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      if (HasBox != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CarBoxID);
      }
      if (HasCst != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCst);
      }
      if (CarCstID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CarCstID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_143_STATUS_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.ModeStatus != 0) {
        ModeStatus = other.ModeStatus;
      }
      if (other.ActionStatus != 0) {
        ActionStatus = other.ActionStatus;
      }
      if (other.PowerStatus != 0) {
        PowerStatus = other.PowerStatus;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.BlockingStatus != 0) {
        BlockingStatus = other.BlockingStatus;
      }
      if (other.HIDStatus != 0) {
        HIDStatus = other.HIDStatus;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.ErrorStatus != 0) {
        ErrorStatus = other.ErrorStatus;
      }
      if (other.ReserveStatus != 0) {
        ReserveStatus = other.ReserveStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.ObstDistance != 0) {
        ObstDistance = other.ObstDistance;
      }
      if (other.ObstVehicleID.Length != 0) {
        ObstVehicleID = other.ObstVehicleID;
      }
      if (other.StoppedBlockID.Length != 0) {
        StoppedBlockID = other.StoppedBlockID;
      }
      if (other.StoppedHIDID.Length != 0) {
        StoppedHIDID = other.StoppedHIDID;
      }
      if (other.EarthquakePauseTatus != 0) {
        EarthquakePauseTatus = other.EarthquakePauseTatus;
      }
      if (other.SafetyPauseStatus != 0) {
        SafetyPauseStatus = other.SafetyPauseStatus;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      if (other.HasBox != 0) {
        HasBox = other.HasBox;
      }
      if (other.CarBoxID.Length != 0) {
        CarBoxID = other.CarBoxID;
      }
      if (other.HasCst != 0) {
        HasCst = other.HasCst;
      }
      if (other.CarCstID.Length != 0) {
        CarCstID = other.CarCstID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 18: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 24: {
            modeStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 32: {
            actionStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 40: {
            powerStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            obstacleStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 56: {
            blockingStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 64: {
            hIDStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 72: {
            pauseStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 80: {
            errorStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 88: {
            reserveStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 96: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 104: {
            ObstDistance = input.ReadInt32();
            break;
          }
          case 114: {
            ObstVehicleID = input.ReadString();
            break;
          }
          case 122: {
            StoppedBlockID = input.ReadString();
            break;
          }
          case 130: {
            StoppedHIDID = input.ReadString();
            break;
          }
          case 136: {
            earthquakePauseTatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 144: {
            safetyPauseStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 154: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 160: {
            drivingDirection_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 168: {
            Speed = input.ReadInt32();
            break;
          }
          case 177: {
            Angle = input.ReadDouble();
            break;
          }
          case 185: {
            XAxis = input.ReadDouble();
            break;
          }
          case 193: {
            YAxis = input.ReadDouble();
            break;
          }
          case 202: {
            CmdID = input.ReadString();
            break;
          }
          case 210: {
            BOXID = input.ReadString();
            break;
          }
          case 218: {
            CSTID = input.ReadString();
            break;
          }
          case 226: {
            LOTID = input.ReadString();
            break;
          }
          case 232: {
            hasBox_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus) input.ReadEnum();
            break;
          }
          case 242: {
            CarBoxID = input.ReadString();
            break;
          }
          case 248: {
            hasCst_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus) input.ReadEnum();
            break;
          }
          case 258: {
            CarCstID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_144_STATUS_CHANGE_REP : pb::IMessage<ID_144_STATUS_CHANGE_REP> {
    private static readonly pb::MessageParser<ID_144_STATUS_CHANGE_REP> _parser = new pb::MessageParser<ID_144_STATUS_CHANGE_REP>(() => new ID_144_STATUS_CHANGE_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_144_STATUS_CHANGE_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP(ID_144_STATUS_CHANGE_REP other) : this() {
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      modeStatus_ = other.modeStatus_;
      actionStatus_ = other.actionStatus_;
      powerStatus_ = other.powerStatus_;
      obstacleStatus_ = other.obstacleStatus_;
      blockingStatus_ = other.blockingStatus_;
      hIDStatus_ = other.hIDStatus_;
      pauseStatus_ = other.pauseStatus_;
      errorStatus_ = other.errorStatus_;
      reserveStatus_ = other.reserveStatus_;
      secDistance_ = other.secDistance_;
      obstDistance_ = other.obstDistance_;
      obstVehicleID_ = other.obstVehicleID_;
      stoppedBlockID_ = other.stoppedBlockID_;
      stoppedHIDID_ = other.stoppedHIDID_;
      earthquakePauseTatus_ = other.earthquakePauseTatus_;
      safetyPauseStatus_ = other.safetyPauseStatus_;
      reserveInfos_ = other.reserveInfos_.Clone();
      drivingDirection_ = other.drivingDirection_;
      speed_ = other.speed_;
      angle_ = other.angle_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      cmdID_ = other.cmdID_;
      bOXID_ = other.bOXID_;
      cSTID_ = other.cSTID_;
      lOTID_ = other.lOTID_;
      hasBox_ = other.hasBox_;
      carBoxID_ = other.carBoxID_;
      hasCst_ = other.hasCst_;
      carCstID_ = other.carCstID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP Clone() {
      return new ID_144_STATUS_CHANGE_REP(this);
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 1;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 2;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModeStatus" field.</summary>
    public const int ModeStatusFieldNumber = 3;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus modeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus ModeStatus {
      get { return modeStatus_; }
      set {
        modeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ActionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 4;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus actionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "PowerStatus" field.</summary>
    public const int PowerStatusFieldNumber = 5;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus powerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus PowerStatus {
      get { return powerStatus_; }
      set {
        powerStatus_ = value;
      }
    }

    /// <summary>Field number for the "ObstacleStatus" field.</summary>
    public const int ObstacleStatusFieldNumber = 6;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle obstacleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "BlockingStatus" field.</summary>
    public const int BlockingStatusFieldNumber = 7;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle blockingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle BlockingStatus {
      get { return blockingStatus_; }
      set {
        blockingStatus_ = value;
      }
    }

    /// <summary>Field number for the "HIDStatus" field.</summary>
    public const int HIDStatusFieldNumber = 8;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle hIDStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle HIDStatus {
      get { return hIDStatus_; }
      set {
        hIDStatus_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 9;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrorStatus" field.</summary>
    public const int ErrorStatusFieldNumber = 10;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle errorStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ErrorStatus {
      get { return errorStatus_; }
      set {
        errorStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveStatus" field.</summary>
    public const int ReserveStatusFieldNumber = 11;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle reserveStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ReserveStatus {
      get { return reserveStatus_; }
      set {
        reserveStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 12;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Distance" field.</summary>
    public const int ObstDistanceFieldNumber = 13;
    private int obstDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstDistance {
      get { return obstDistance_; }
      set {
        obstDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
    public const int ObstVehicleIDFieldNumber = 14;
    private string obstVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstVehicleID {
      get { return obstVehicleID_; }
      set {
        obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
    public const int StoppedBlockIDFieldNumber = 15;
    private string stoppedBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedBlockID {
      get { return stoppedBlockID_; }
      set {
        stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Stopped_HID_ID" field.</summary>
    public const int StoppedHIDIDFieldNumber = 16;
    private string stoppedHIDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedHIDID {
      get { return stoppedHIDID_; }
      set {
        stoppedHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
    public const int EarthquakePauseTatusFieldNumber = 17;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle earthquakePauseTatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle EarthquakePauseTatus {
      get { return earthquakePauseTatus_; }
      set {
        earthquakePauseTatus_ = value;
      }
    }

    /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
    public const int SafetyPauseStatusFieldNumber = 18;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle safetyPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle SafetyPauseStatus {
      get { return safetyPauseStatus_; }
      set {
        safetyPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 19;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(154, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 20;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 21;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 22;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 23;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 24;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 25;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BOX_ID" field.</summary>
    public const int BOXIDFieldNumber = 26;
    private string bOXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BOXID {
      get { return bOXID_; }
      set {
        bOXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 27;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 28;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasBox" field.</summary>
    public const int HasBoxFieldNumber = 29;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus hasBox_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus HasBox {
      get { return hasBox_; }
      set {
        hasBox_ = value;
      }
    }

    /// <summary>Field number for the "CarBoxID" field.</summary>
    public const int CarBoxIDFieldNumber = 30;
    private string carBoxID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarBoxID {
      get { return carBoxID_; }
      set {
        carBoxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasCst" field.</summary>
    public const int HasCstFieldNumber = 31;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus hasCst_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus HasCst {
      get { return hasCst_; }
      set {
        hasCst_ = value;
      }
    }

    /// <summary>Field number for the "CarCstID" field.</summary>
    public const int CarCstIDFieldNumber = 32;
    private string carCstID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarCstID {
      get { return carCstID_; }
      set {
        carCstID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_144_STATUS_CHANGE_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_144_STATUS_CHANGE_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (ModeStatus != other.ModeStatus) return false;
      if (ActionStatus != other.ActionStatus) return false;
      if (PowerStatus != other.PowerStatus) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (BlockingStatus != other.BlockingStatus) return false;
      if (HIDStatus != other.HIDStatus) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (ErrorStatus != other.ErrorStatus) return false;
      if (ReserveStatus != other.ReserveStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (ObstDistance != other.ObstDistance) return false;
      if (ObstVehicleID != other.ObstVehicleID) return false;
      if (StoppedBlockID != other.StoppedBlockID) return false;
      if (StoppedHIDID != other.StoppedHIDID) return false;
      if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
      if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (Speed != other.Speed) return false;
      if (Angle != other.Angle) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (CmdID != other.CmdID) return false;
      if (BOXID != other.BOXID) return false;
      if (CSTID != other.CSTID) return false;
      if (LOTID != other.LOTID) return false;
      if (HasBox != other.HasBox) return false;
      if (CarBoxID != other.CarBoxID) return false;
      if (HasCst != other.HasCst) return false;
      if (CarCstID != other.CarCstID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
      if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
      if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
      if (HIDStatus != 0) hash ^= HIDStatus.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
      if (ReserveStatus != 0) hash ^= ReserveStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
      if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
      if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
      if (StoppedHIDID.Length != 0) hash ^= StoppedHIDID.GetHashCode();
      if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
      if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Angle != 0D) hash ^= Angle.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (BOXID.Length != 0) hash ^= BOXID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      if (HasBox != 0) hash ^= HasBox.GetHashCode();
      if (CarBoxID.Length != 0) hash ^= CarBoxID.GetHashCode();
      if (HasCst != 0) hash ^= HasCst.GetHashCode();
      if (CarCstID.Length != 0) hash ^= CarCstID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentSecID);
      }
      if (ModeStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SecDistance);
      }
      if (ObstDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) SafetyPauseStatus);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DrivingDirection);
      }
      if (Speed != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Speed);
      }
      if (Angle != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Angle);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(YAxis);
      }
      if (CmdID.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CmdID);
      }
      if (BOXID.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BOXID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(CSTID);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(LOTID);
      }
      if (HasBox != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(CarBoxID);
      }
      if (HasCst != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) HasCst);
      }
      if (CarCstID.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CarCstID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (ModeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObstacleStatus);
      }
      if (BlockingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockingStatus);
      }
      if (HIDStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HIDStatus);
      }
      if (PauseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorStatus);
      }
      if (ReserveStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReserveStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (ObstDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
      }
      if (StoppedBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
      }
      if (StoppedHIDID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StoppedHIDID);
      }
      if (EarthquakePauseTatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyPauseStatus);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (DrivingDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Angle != 0D) {
        size += 2 + 8;
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      if (CmdID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (BOXID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BOXID);
      }
      if (CSTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LOTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      if (HasBox != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasBox);
      }
      if (CarBoxID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CarBoxID);
      }
      if (HasCst != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCst);
      }
      if (CarCstID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CarCstID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_144_STATUS_CHANGE_REP other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.ModeStatus != 0) {
        ModeStatus = other.ModeStatus;
      }
      if (other.ActionStatus != 0) {
        ActionStatus = other.ActionStatus;
      }
      if (other.PowerStatus != 0) {
        PowerStatus = other.PowerStatus;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.BlockingStatus != 0) {
        BlockingStatus = other.BlockingStatus;
      }
      if (other.HIDStatus != 0) {
        HIDStatus = other.HIDStatus;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.ErrorStatus != 0) {
        ErrorStatus = other.ErrorStatus;
      }
      if (other.ReserveStatus != 0) {
        ReserveStatus = other.ReserveStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.ObstDistance != 0) {
        ObstDistance = other.ObstDistance;
      }
      if (other.ObstVehicleID.Length != 0) {
        ObstVehicleID = other.ObstVehicleID;
      }
      if (other.StoppedBlockID.Length != 0) {
        StoppedBlockID = other.StoppedBlockID;
      }
      if (other.StoppedHIDID.Length != 0) {
        StoppedHIDID = other.StoppedHIDID;
      }
      if (other.EarthquakePauseTatus != 0) {
        EarthquakePauseTatus = other.EarthquakePauseTatus;
      }
      if (other.SafetyPauseStatus != 0) {
        SafetyPauseStatus = other.SafetyPauseStatus;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.BOXID.Length != 0) {
        BOXID = other.BOXID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
      if (other.HasBox != 0) {
        HasBox = other.HasBox;
      }
      if (other.CarBoxID.Length != 0) {
        CarBoxID = other.CarBoxID;
      }
      if (other.HasCst != 0) {
        HasCst = other.HasCst;
      }
      if (other.CarCstID.Length != 0) {
        CarCstID = other.CarCstID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 18: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 24: {
            modeStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 32: {
            actionStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 40: {
            powerStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhPowerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            obstacleStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 56: {
            blockingStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 64: {
            hIDStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 72: {
            pauseStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 80: {
            errorStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 88: {
            reserveStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 96: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 104: {
            ObstDistance = input.ReadInt32();
            break;
          }
          case 114: {
            ObstVehicleID = input.ReadString();
            break;
          }
          case 122: {
            StoppedBlockID = input.ReadString();
            break;
          }
          case 130: {
            StoppedHIDID = input.ReadString();
            break;
          }
          case 136: {
            earthquakePauseTatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 144: {
            safetyPauseStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 154: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 160: {
            drivingDirection_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 168: {
            Speed = input.ReadInt32();
            break;
          }
          case 177: {
            Angle = input.ReadDouble();
            break;
          }
          case 185: {
            XAxis = input.ReadDouble();
            break;
          }
          case 193: {
            YAxis = input.ReadDouble();
            break;
          }
          case 202: {
            CmdID = input.ReadString();
            break;
          }
          case 210: {
            BOXID = input.ReadString();
            break;
          }
          case 218: {
            CSTID = input.ReadString();
            break;
          }
          case 226: {
            LOTID = input.ReadString();
            break;
          }
          case 232: {
            hasBox_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus) input.ReadEnum();
            break;
          }
          case 242: {
            CarBoxID = input.ReadString();
            break;
          }
          case 248: {
            hasCst_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhLoadCarrierStatus) input.ReadEnum();
            break;
          }
          case 258: {
            CarCstID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_44_STATUS_CHANGE_RESPONSE : pb::IMessage<ID_44_STATUS_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE>(() => new ID_44_STATUS_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE(ID_44_STATUS_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE Clone() {
      return new ID_44_STATUS_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_44_STATUS_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_44_STATUS_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_44_STATUS_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_45_POWER_OPE_REQ : pb::IMessage<ID_45_POWER_OPE_REQ> {
    private static readonly pb::MessageParser<ID_45_POWER_OPE_REQ> _parser = new pb::MessageParser<ID_45_POWER_OPE_REQ>(() => new ID_45_POWER_OPE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_45_POWER_OPE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ(ID_45_POWER_OPE_REQ other) : this() {
      operatingPowerMode_ = other.operatingPowerMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ Clone() {
      return new ID_45_POWER_OPE_REQ(this);
    }

    /// <summary>Field number for the "OperatingPowerMode" field.</summary>
    public const int OperatingPowerModeFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingPowerMode operatingPowerMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingPowerMode OperatingPowerMode {
      get { return operatingPowerMode_; }
      set {
        operatingPowerMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_45_POWER_OPE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_45_POWER_OPE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperatingPowerMode != other.OperatingPowerMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperatingPowerMode != 0) hash ^= OperatingPowerMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperatingPowerMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OperatingPowerMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperatingPowerMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingPowerMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_45_POWER_OPE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OperatingPowerMode != 0) {
        OperatingPowerMode = other.OperatingPowerMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operatingPowerMode_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OperatingPowerMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_145_POWER_OPE_RESPONSE : pb::IMessage<ID_145_POWER_OPE_RESPONSE> {
    private static readonly pb::MessageParser<ID_145_POWER_OPE_RESPONSE> _parser = new pb::MessageParser<ID_145_POWER_OPE_RESPONSE>(() => new ID_145_POWER_OPE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_145_POWER_OPE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE(ID_145_POWER_OPE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE Clone() {
      return new ID_145_POWER_OPE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_145_POWER_OPE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_145_POWER_OPE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_145_POWER_OPE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_51_AVOID_REQUEST : pb::IMessage<ID_51_AVOID_REQUEST> {
    private static readonly pb::MessageParser<ID_51_AVOID_REQUEST> _parser = new pb::MessageParser<ID_51_AVOID_REQUEST>(() => new ID_51_AVOID_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_51_AVOID_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST(ID_51_AVOID_REQUEST other) : this() {
      destinationAdr_ = other.destinationAdr_;
      guideSections_ = other.guideSections_.Clone();
      guideAddresses_ = other.guideAddresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST Clone() {
      return new ID_51_AVOID_REQUEST(this);
    }

    /// <summary>Field number for the "DestinationAdr" field.</summary>
    public const int DestinationAdrFieldNumber = 1;
    private string destinationAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationAdr {
      get { return destinationAdr_; }
      set {
        destinationAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Guide_Sections" field.</summary>
    public const int GuideSectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_guideSections_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> guideSections_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSections {
      get { return guideSections_; }
    }

    /// <summary>Field number for the "Guide_Addresses" field.</summary>
    public const int GuideAddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_guideAddresses_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> guideAddresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddresses {
      get { return guideAddresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_51_AVOID_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_51_AVOID_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestinationAdr != other.DestinationAdr) return false;
      if(!guideSections_.Equals(other.guideSections_)) return false;
      if(!guideAddresses_.Equals(other.guideAddresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestinationAdr.Length != 0) hash ^= DestinationAdr.GetHashCode();
      hash ^= guideSections_.GetHashCode();
      hash ^= guideAddresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DestinationAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DestinationAdr);
      }
      guideSections_.WriteTo(output, _repeated_guideSections_codec);
      guideAddresses_.WriteTo(output, _repeated_guideAddresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestinationAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationAdr);
      }
      size += guideSections_.CalculateSize(_repeated_guideSections_codec);
      size += guideAddresses_.CalculateSize(_repeated_guideAddresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_51_AVOID_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.DestinationAdr.Length != 0) {
        DestinationAdr = other.DestinationAdr;
      }
      guideSections_.Add(other.guideSections_);
      guideAddresses_.Add(other.guideAddresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DestinationAdr = input.ReadString();
            break;
          }
          case 18: {
            guideSections_.AddEntriesFrom(input, _repeated_guideSections_codec);
            break;
          }
          case 26: {
            guideAddresses_.AddEntriesFrom(input, _repeated_guideAddresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_151_AVOID_RESPONSE : pb::IMessage<ID_151_AVOID_RESPONSE> {
    private static readonly pb::MessageParser<ID_151_AVOID_RESPONSE> _parser = new pb::MessageParser<ID_151_AVOID_RESPONSE>(() => new ID_151_AVOID_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_151_AVOID_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE(ID_151_AVOID_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
      ngReason_ = other.ngReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE Clone() {
      return new ID_151_AVOID_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "NgReason" field.</summary>
    public const int NgReasonFieldNumber = 2;
    private string ngReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NgReason {
      get { return ngReason_; }
      set {
        ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_151_AVOID_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_151_AVOID_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      if (NgReason != other.NgReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
      if (NgReason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NgReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (NgReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_151_AVOID_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.NgReason.Length != 0) {
        NgReason = other.NgReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 18: {
            NgReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_152_AVOID_COMPLETE_REPORT : pb::IMessage<ID_152_AVOID_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT>(() => new ID_152_AVOID_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT(ID_152_AVOID_COMPLETE_REPORT other) : this() {
      cmpStatus_ = other.cmpStatus_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      directionAngle_ = other.directionAngle_;
      vehicleAngle_ = other.vehicleAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT Clone() {
      return new ID_152_AVOID_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "CmpStatus" field.</summary>
    public const int CmpStatusFieldNumber = 1;
    private int cmpStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmpStatus {
      get { return cmpStatus_; }
      set {
        cmpStatus_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 2;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 3;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 4;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 5;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 6;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "DirectionAngle" field.</summary>
    public const int DirectionAngleFieldNumber = 7;
    private double directionAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DirectionAngle {
      get { return directionAngle_; }
      set {
        directionAngle_ = value;
      }
    }

    /// <summary>Field number for the "VehicleAngle" field.</summary>
    public const int VehicleAngleFieldNumber = 8;
    private double vehicleAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleAngle {
      get { return vehicleAngle_; }
      set {
        vehicleAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_152_AVOID_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_152_AVOID_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmpStatus != other.CmpStatus) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (DirectionAngle != other.DirectionAngle) return false;
      if (VehicleAngle != other.VehicleAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (DirectionAngle != 0D) hash ^= DirectionAngle.GetHashCode();
      if (VehicleAngle != 0D) hash ^= VehicleAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmpStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SecDistance);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(YAxis);
      }
      if (DirectionAngle != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(DirectionAngle);
      }
      if (VehicleAngle != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(VehicleAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (XAxis != 0D) {
        size += 1 + 8;
      }
      if (YAxis != 0D) {
        size += 1 + 8;
      }
      if (DirectionAngle != 0D) {
        size += 1 + 8;
      }
      if (VehicleAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_152_AVOID_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.CmpStatus != 0) {
        CmpStatus = other.CmpStatus;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.DirectionAngle != 0D) {
        DirectionAngle = other.DirectionAngle;
      }
      if (other.VehicleAngle != 0D) {
        VehicleAngle = other.VehicleAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CmpStatus = input.ReadInt32();
            break;
          }
          case 18: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 26: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 32: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 41: {
            XAxis = input.ReadDouble();
            break;
          }
          case 49: {
            YAxis = input.ReadDouble();
            break;
          }
          case 57: {
            DirectionAngle = input.ReadDouble();
            break;
          }
          case 65: {
            VehicleAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_52_AVOID_COMPLETE_RESPONSE : pb::IMessage<ID_52_AVOID_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE>(() => new ID_52_AVOID_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE(ID_52_AVOID_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE Clone() {
      return new ID_52_AVOID_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_52_AVOID_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_52_AVOID_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_52_AVOID_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_71_RANGE_TEACHING_REQUEST : pb::IMessage<ID_71_RANGE_TEACHING_REQUEST> {
    private static readonly pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> _parser = new pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST>(() => new ID_71_RANGE_TEACHING_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST(ID_71_RANGE_TEACHING_REQUEST other) : this() {
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST Clone() {
      return new ID_71_RANGE_TEACHING_REQUEST(this);
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 1;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 2;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_71_RANGE_TEACHING_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_71_RANGE_TEACHING_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToAdr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_71_RANGE_TEACHING_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromAdr = input.ReadString();
            break;
          }
          case 18: {
            ToAdr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_171_RANGE_TEACHING_RESPONSE : pb::IMessage<ID_171_RANGE_TEACHING_RESPONSE> {
    private static readonly pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> _parser = new pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE>(() => new ID_171_RANGE_TEACHING_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE(ID_171_RANGE_TEACHING_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE Clone() {
      return new ID_171_RANGE_TEACHING_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_171_RANGE_TEACHING_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_171_RANGE_TEACHING_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_171_RANGE_TEACHING_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_172_RANGE_TEACHING_COMPLETE_REPORT : pb::IMessage<ID_172_RANGE_TEACHING_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT>(() => new ID_172_RANGE_TEACHING_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) : this() {
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
      secDistance_ = other.secDistance_;
      completeCode_ = other.completeCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT Clone() {
      return new ID_172_RANGE_TEACHING_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 1;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 2;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 3;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Complete_Code" field.</summary>
    public const int CompleteCodeFieldNumber = 4;
    private int completeCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCode {
      get { return completeCode_; }
      set {
        completeCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_172_RANGE_TEACHING_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (SecDistance != other.SecDistance) return false;
      if (CompleteCode != other.CompleteCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (CompleteCode != 0) hash ^= CompleteCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToAdr);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SecDistance);
      }
      if (CompleteCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompleteCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (CompleteCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.CompleteCode != 0) {
        CompleteCode = other.CompleteCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromAdr = input.ReadString();
            break;
          }
          case 18: {
            ToAdr = input.ReadString();
            break;
          }
          case 24: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 32: {
            CompleteCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_72_RANGE_TEACHING_COMPLETE_RESPONSE : pb::IMessage<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE>(() => new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE Clone() {
      return new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_72_RANGE_TEACHING_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_174_ADDRESS_TEACH_REPORT : pb::IMessage<ID_174_ADDRESS_TEACH_REPORT> {
    private static readonly pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> _parser = new pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT>(() => new ID_174_ADDRESS_TEACH_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT(ID_174_ADDRESS_TEACH_REPORT other) : this() {
      addr_ = other.addr_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT Clone() {
      return new ID_174_ADDRESS_TEACH_REPORT(this);
    }

    /// <summary>Field number for the "Addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_174_ADDRESS_TEACH_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_174_ADDRESS_TEACH_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Addr != other.Addr) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_174_ADDRESS_TEACH_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_74_ADDRESS_TEACH_RESPONSE : pb::IMessage<ID_74_ADDRESS_TEACH_RESPONSE> {
    private static readonly pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> _parser = new pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE>(() => new ID_74_ADDRESS_TEACH_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE(ID_74_ADDRESS_TEACH_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE Clone() {
      return new ID_74_ADDRESS_TEACH_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_74_ADDRESS_TEACH_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_74_ADDRESS_TEACH_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_74_ADDRESS_TEACH_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_91_ALARM_RESET_REQUEST : pb::IMessage<ID_91_ALARM_RESET_REQUEST> {
    private static readonly pb::MessageParser<ID_91_ALARM_RESET_REQUEST> _parser = new pb::MessageParser<ID_91_ALARM_RESET_REQUEST>(() => new ID_91_ALARM_RESET_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_91_ALARM_RESET_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST(ID_91_ALARM_RESET_REQUEST other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST Clone() {
      return new ID_91_ALARM_RESET_REQUEST(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_91_ALARM_RESET_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_91_ALARM_RESET_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_91_ALARM_RESET_REQUEST other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_191_ALARM_RESET_RESPONSE : pb::IMessage<ID_191_ALARM_RESET_RESPONSE> {
    private static readonly pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> _parser = new pb::MessageParser<ID_191_ALARM_RESET_RESPONSE>(() => new ID_191_ALARM_RESET_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE(ID_191_ALARM_RESET_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE Clone() {
      return new ID_191_ALARM_RESET_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_191_ALARM_RESET_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_191_ALARM_RESET_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_191_ALARM_RESET_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_194_ALARM_REPORT : pb::IMessage<ID_194_ALARM_REPORT> {
    private static readonly pb::MessageParser<ID_194_ALARM_REPORT> _parser = new pb::MessageParser<ID_194_ALARM_REPORT>(() => new ID_194_ALARM_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_194_ALARM_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT(ID_194_ALARM_REPORT other) : this() {
      errCode_ = other.errCode_;
      errStatus_ = other.errStatus_;
      errDescription_ = other.errDescription_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT Clone() {
      return new ID_194_ALARM_REPORT(this);
    }

    /// <summary>Field number for the "ErrCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private string errCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrCode {
      get { return errCode_; }
      set {
        errCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrStatus" field.</summary>
    public const int ErrStatusFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ErrorStatus errStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ErrorStatus ErrStatus {
      get { return errStatus_; }
      set {
        errStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrDescription" field.</summary>
    public const int ErrDescriptionFieldNumber = 3;
    private string errDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrDescription {
      get { return errDescription_; }
      set {
        errDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_194_ALARM_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_194_ALARM_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (ErrStatus != other.ErrStatus) return false;
      if (ErrDescription != other.ErrDescription) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode.Length != 0) hash ^= ErrCode.GetHashCode();
      if (ErrStatus != 0) hash ^= ErrStatus.GetHashCode();
      if (ErrDescription.Length != 0) hash ^= ErrDescription.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrCode);
      }
      if (ErrStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrStatus);
      }
      if (ErrDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrDescription);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrCode);
      }
      if (ErrStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrStatus);
      }
      if (ErrDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrDescription);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_194_ALARM_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode.Length != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.ErrStatus != 0) {
        ErrStatus = other.ErrStatus;
      }
      if (other.ErrDescription.Length != 0) {
        ErrDescription = other.ErrDescription;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrCode = input.ReadString();
            break;
          }
          case 16: {
            errStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ErrorStatus) input.ReadEnum();
            break;
          }
          case 26: {
            ErrDescription = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_94_ALARM_RESPONSE : pb::IMessage<ID_94_ALARM_RESPONSE> {
    private static readonly pb::MessageParser<ID_94_ALARM_RESPONSE> _parser = new pb::MessageParser<ID_94_ALARM_RESPONSE>(() => new ID_94_ALARM_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_94_ALARM_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE(ID_94_ALARM_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE Clone() {
      return new ID_94_ALARM_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_94_ALARM_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_94_ALARM_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_94_ALARM_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VEHICLE_INFO : pb::IMessage<VEHICLE_INFO> {
    private static readonly pb::MessageParser<VEHICLE_INFO> _parser = new pb::MessageParser<VEHICLE_INFO>(() => new VEHICLE_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VEHICLE_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VEHICLE_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VEHICLE_INFO(VEHICLE_INFO other) : this() {
      isTcpIpConnect_ = other.isTcpIpConnect_;
      vEHICLEID_ = other.vEHICLEID_;
      vEHICLETYPE_ = other.vEHICLETYPE_;
      cURADRID_ = other.cURADRID_;
      cURSECID_ = other.cURSECID_;
      aCCSECDIST_ = other.aCCSECDIST_;
      mODESTATUS_ = other.mODESTATUS_;
      aCTSTATUS_ = other.aCTSTATUS_;
      mCSCMD_ = other.mCSCMD_;
      oHTCCMD_ = other.oHTCCMD_;
      bLOCKPAUSE_ = other.bLOCKPAUSE_;
      cMDPAUSE_ = other.cMDPAUSE_;
      oBSPAUSE_ = other.oBSPAUSE_;
      hIDPAUSE_ = other.hIDPAUSE_;
      eRROR_ = other.eRROR_;
      oBSDIST_ = other.oBSDIST_;
      hASCST_ = other.hASCST_;
      cSTID_ = other.cSTID_;
      UPDTIME = other.uPDTIME_ != null ? other.UPDTIME.Clone() : null;
      vEHICLEACCDIST_ = other.vEHICLEACCDIST_;
      mANTACCDIST_ = other.mANTACCDIST_;
      MANTDATE = other.mANTDATE_ != null ? other.MANTDATE.Clone() : null;
      gRIPCOUNT_ = other.gRIPCOUNT_;
      gRIPMANTCOUNT_ = other.gRIPMANTCOUNT_;
      GRIPMANTDATE = other.gRIPMANTDATE_ != null ? other.GRIPMANTDATE.Clone() : null;
      iSPARKING_ = other.iSPARKING_;
      PARKTIME = other.pARKTIME_ != null ? other.PARKTIME.Clone() : null;
      pARKADRID_ = other.pARKADRID_;
      iSCYCLING_ = other.iSCYCLING_;
      CYCLERUNTIME = other.cYCLERUNTIME_ != null ? other.CYCLERUNTIME.Clone() : null;
      cYCLERUNID_ = other.cYCLERUNID_;
      predictPath_ = other.predictPath_.Clone();
      cyclingPath_ = other.cyclingPath_.Clone();
      startAdr_ = other.startAdr_;
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
      speed_ = other.speed_;
      obsVehicleID_ = other.obsVehicleID_;
      alarms_ = other.alarms_.Clone();
      cmdType_ = other.cmdType_;
      vhCMDStatus_ = other.vhCMDStatus_;
      vhRecentTranEvent_ = other.vhRecentTranEvent_;
      willPassSectionID_ = other.willPassSectionID_.Clone();
      procProgressPercen_ = other.procProgressPercen_;
      currentDriveDirction_ = other.currentDriveDirction_;
      cMDPRIOTITY_ = other.cMDPRIOTITY_;
      cMDCSTID_ = other.cMDCSTID_;
      state_ = other.state_;
      pauseStatus_ = other.pauseStatus_;
      sAFETYDOORPAUSE_ = other.sAFETYDOORPAUSE_;
      eARTHQUAKEPAUSE_ = other.eARTHQUAKEPAUSE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VEHICLE_INFO Clone() {
      return new VEHICLE_INFO(this);
    }

    /// <summary>Field number for the "isTcpIpConnect" field.</summary>
    public const int IsTcpIpConnectFieldNumber = 1;
    private bool isTcpIpConnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcpIpConnect {
      get { return isTcpIpConnect_; }
      set {
        isTcpIpConnect_ = value;
      }
    }

    /// <summary>Field number for the "VEHICLE_ID" field.</summary>
    public const int VEHICLEIDFieldNumber = 2;
    private string vEHICLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VEHICLEID {
      get { return vEHICLEID_; }
      set {
        vEHICLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VEHICLE_TYPE" field.</summary>
    public const int VEHICLETYPEFieldNumber = 3;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleType vEHICLETYPE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleType VEHICLETYPE {
      get { return vEHICLETYPE_; }
      set {
        vEHICLETYPE_ = value;
      }
    }

    /// <summary>Field number for the "CUR_ADR_ID" field.</summary>
    public const int CURADRIDFieldNumber = 4;
    private string cURADRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CURADRID {
      get { return cURADRID_; }
      set {
        cURADRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CUR_SEC_ID" field.</summary>
    public const int CURSECIDFieldNumber = 5;
    private string cURSECID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CURSECID {
      get { return cURSECID_; }
      set {
        cURSECID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ACC_SEC_DIST" field.</summary>
    public const int ACCSECDISTFieldNumber = 6;
    private double aCCSECDIST_;
    /// <summary>
    ///  google.protobuf.Timestamp SEC_ENTRY_TIME = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ACCSECDIST {
      get { return aCCSECDIST_; }
      set {
        aCCSECDIST_ = value;
      }
    }

    /// <summary>Field number for the "MODE_STATUS" field.</summary>
    public const int MODESTATUSFieldNumber = 7;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus mODESTATUS_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus MODESTATUS {
      get { return mODESTATUS_; }
      set {
        mODESTATUS_ = value;
      }
    }

    /// <summary>Field number for the "ACT_STATUS" field.</summary>
    public const int ACTSTATUSFieldNumber = 8;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus aCTSTATUS_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus ACTSTATUS {
      get { return aCTSTATUS_; }
      set {
        aCTSTATUS_ = value;
      }
    }

    /// <summary>Field number for the "MCS_CMD" field.</summary>
    public const int MCSCMDFieldNumber = 9;
    private string mCSCMD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MCSCMD {
      get { return mCSCMD_; }
      set {
        mCSCMD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OHTC_CMD" field.</summary>
    public const int OHTCCMDFieldNumber = 10;
    private string oHTCCMD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OHTCCMD {
      get { return oHTCCMD_; }
      set {
        oHTCCMD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BLOCK_PAUSE" field.</summary>
    public const int BLOCKPAUSEFieldNumber = 11;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle bLOCKPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle BLOCKPAUSE {
      get { return bLOCKPAUSE_; }
      set {
        bLOCKPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "CMD_PAUSE" field.</summary>
    public const int CMDPAUSEFieldNumber = 12;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle cMDPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle CMDPAUSE {
      get { return cMDPAUSE_; }
      set {
        cMDPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "OBS_PAUSE" field.</summary>
    public const int OBSPAUSEFieldNumber = 13;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle oBSPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle OBSPAUSE {
      get { return oBSPAUSE_; }
      set {
        oBSPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "HID_PAUSE" field.</summary>
    public const int HIDPAUSEFieldNumber = 14;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle hIDPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle HIDPAUSE {
      get { return hIDPAUSE_; }
      set {
        hIDPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "ERROR" field.</summary>
    public const int ERRORFieldNumber = 15;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle eRROR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle ERROR {
      get { return eRROR_; }
      set {
        eRROR_ = value;
      }
    }

    /// <summary>Field number for the "OBS_DIST" field.</summary>
    public const int OBSDISTFieldNumber = 16;
    private int oBSDIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OBSDIST {
      get { return oBSDIST_; }
      set {
        oBSDIST_ = value;
      }
    }

    /// <summary>Field number for the "HAS_CST" field.</summary>
    public const int HASCSTFieldNumber = 17;
    private int hASCST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HASCST {
      get { return hASCST_; }
      set {
        hASCST_ = value;
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 18;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UPD_TIME" field.</summary>
    public const int UPDTIMEFieldNumber = 19;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp uPDTIME_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp UPDTIME {
      get { return uPDTIME_; }
      set {
        uPDTIME_ = value;
      }
    }

    /// <summary>Field number for the "VEHICLE_ACC_DIST" field.</summary>
    public const int VEHICLEACCDISTFieldNumber = 20;
    private int vEHICLEACCDIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VEHICLEACCDIST {
      get { return vEHICLEACCDIST_; }
      set {
        vEHICLEACCDIST_ = value;
      }
    }

    /// <summary>Field number for the "MANT_ACC_DIST" field.</summary>
    public const int MANTACCDISTFieldNumber = 21;
    private int mANTACCDIST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MANTACCDIST {
      get { return mANTACCDIST_; }
      set {
        mANTACCDIST_ = value;
      }
    }

    /// <summary>Field number for the "MANT_DATE" field.</summary>
    public const int MANTDATEFieldNumber = 22;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp mANTDATE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp MANTDATE {
      get { return mANTDATE_; }
      set {
        mANTDATE_ = value;
      }
    }

    /// <summary>Field number for the "GRIP_COUNT" field.</summary>
    public const int GRIPCOUNTFieldNumber = 23;
    private int gRIPCOUNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GRIPCOUNT {
      get { return gRIPCOUNT_; }
      set {
        gRIPCOUNT_ = value;
      }
    }

    /// <summary>Field number for the "GRIP_MANT_COUNT" field.</summary>
    public const int GRIPMANTCOUNTFieldNumber = 24;
    private int gRIPMANTCOUNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GRIPMANTCOUNT {
      get { return gRIPMANTCOUNT_; }
      set {
        gRIPMANTCOUNT_ = value;
      }
    }

    /// <summary>Field number for the "GRIP_MANT_DATE" field.</summary>
    public const int GRIPMANTDATEFieldNumber = 25;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp gRIPMANTDATE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp GRIPMANTDATE {
      get { return gRIPMANTDATE_; }
      set {
        gRIPMANTDATE_ = value;
      }
    }

    /// <summary>Field number for the "IS_PARKING" field.</summary>
    public const int ISPARKINGFieldNumber = 26;
    private bool iSPARKING_;
    /// <summary>
    ///  string NODE_ADR = 25;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ISPARKING {
      get { return iSPARKING_; }
      set {
        iSPARKING_ = value;
      }
    }

    /// <summary>Field number for the "PARK_TIME" field.</summary>
    public const int PARKTIMEFieldNumber = 27;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp pARKTIME_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp PARKTIME {
      get { return pARKTIME_; }
      set {
        pARKTIME_ = value;
      }
    }

    /// <summary>Field number for the "PARK_ADR_ID" field.</summary>
    public const int PARKADRIDFieldNumber = 28;
    private string pARKADRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PARKADRID {
      get { return pARKADRID_; }
      set {
        pARKADRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IS_CYCLING" field.</summary>
    public const int ISCYCLINGFieldNumber = 29;
    private bool iSCYCLING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ISCYCLING {
      get { return iSCYCLING_; }
      set {
        iSCYCLING_ = value;
      }
    }

    /// <summary>Field number for the "CYCLERUN_TIME" field.</summary>
    public const int CYCLERUNTIMEFieldNumber = 30;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp cYCLERUNTIME_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp CYCLERUNTIME {
      get { return cYCLERUNTIME_; }
      set {
        cYCLERUNTIME_ = value;
      }
    }

    /// <summary>Field number for the "CYCLERUN_ID" field.</summary>
    public const int CYCLERUNIDFieldNumber = 31;
    private string cYCLERUNID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CYCLERUNID {
      get { return cYCLERUNID_; }
      set {
        cYCLERUNID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PredictPath" field.</summary>
    public const int PredictPathFieldNumber = 32;
    private static readonly pb::FieldCodec<string> _repeated_predictPath_codec
        = pb::FieldCodec.ForString(258);
    private readonly pbc::RepeatedField<string> predictPath_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PredictPath {
      get { return predictPath_; }
    }

    /// <summary>Field number for the "CyclingPath" field.</summary>
    public const int CyclingPathFieldNumber = 33;
    private static readonly pb::FieldCodec<string> _repeated_cyclingPath_codec
        = pb::FieldCodec.ForString(266);
    private readonly pbc::RepeatedField<string> cyclingPath_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CyclingPath {
      get { return cyclingPath_; }
    }

    /// <summary>Field number for the "startAdr" field.</summary>
    public const int StartAdrFieldNumber = 34;
    private string startAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartAdr {
      get { return startAdr_; }
      set {
        startAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 35;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 36;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 37;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "ObsVehicleID" field.</summary>
    public const int ObsVehicleIDFieldNumber = 38;
    private string obsVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObsVehicleID {
      get { return obsVehicleID_; }
      set {
        obsVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Alarms" field.</summary>
    public const int AlarmsFieldNumber = 39;
    private static readonly pb::FieldCodec<string> _repeated_alarms_codec
        = pb::FieldCodec.ForString(314);
    private readonly pbc::RepeatedField<string> alarms_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Alarms {
      get { return alarms_; }
    }

    /// <summary>Field number for the "CmdType" field.</summary>
    public const int CmdTypeFieldNumber = 40;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandType cmdType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandType CmdType {
      get { return cmdType_; }
      set {
        cmdType_ = value;
      }
    }

    /// <summary>Field number for the "vh_CMD_Status" field.</summary>
    public const int VhCMDStatusFieldNumber = 41;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandStatus vhCMDStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandStatus VhCMDStatus {
      get { return vhCMDStatus_; }
      set {
        vhCMDStatus_ = value;
      }
    }

    /// <summary>Field number for the "VhRecentTranEvent" field.</summary>
    public const int VhRecentTranEventFieldNumber = 42;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType vhRecentTranEvent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType VhRecentTranEvent {
      get { return vhRecentTranEvent_; }
      set {
        vhRecentTranEvent_ = value;
      }
    }

    /// <summary>Field number for the "WillPassSectionID" field.</summary>
    public const int WillPassSectionIDFieldNumber = 43;
    private static readonly pb::FieldCodec<string> _repeated_willPassSectionID_codec
        = pb::FieldCodec.ForString(346);
    private readonly pbc::RepeatedField<string> willPassSectionID_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WillPassSectionID {
      get { return willPassSectionID_; }
    }

    /// <summary>Field number for the "procProgress_Percen" field.</summary>
    public const int ProcProgressPercenFieldNumber = 44;
    private int procProgressPercen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcProgressPercen {
      get { return procProgressPercen_; }
      set {
        procProgressPercen_ = value;
      }
    }

    /// <summary>Field number for the "CurrentDriveDirction" field.</summary>
    public const int CurrentDriveDirctionFieldNumber = 45;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction currentDriveDirction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction CurrentDriveDirction {
      get { return currentDriveDirction_; }
      set {
        currentDriveDirction_ = value;
      }
    }

    /// <summary>Field number for the "CMD_PRIOTITY" field.</summary>
    public const int CMDPRIOTITYFieldNumber = 46;
    private int cMDPRIOTITY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CMDPRIOTITY {
      get { return cMDPRIOTITY_; }
      set {
        cMDPRIOTITY_ = value;
      }
    }

    /// <summary>Field number for the "CMD_CST_ID" field.</summary>
    public const int CMDCSTIDFieldNumber = 47;
    private string cMDCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CMDCSTID {
      get { return cMDCSTID_; }
      set {
        cMDCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 48;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 49;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "SAFETY_DOOR_PAUSE" field.</summary>
    public const int SAFETYDOORPAUSEFieldNumber = 50;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle sAFETYDOORPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle SAFETYDOORPAUSE {
      get { return sAFETYDOORPAUSE_; }
      set {
        sAFETYDOORPAUSE_ = value;
      }
    }

    /// <summary>Field number for the "EARTHQUAKE_PAUSE" field.</summary>
    public const int EARTHQUAKEPAUSEFieldNumber = 51;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle eARTHQUAKEPAUSE_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle EARTHQUAKEPAUSE {
      get { return eARTHQUAKEPAUSE_; }
      set {
        eARTHQUAKEPAUSE_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VEHICLE_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VEHICLE_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsTcpIpConnect != other.IsTcpIpConnect) return false;
      if (VEHICLEID != other.VEHICLEID) return false;
      if (VEHICLETYPE != other.VEHICLETYPE) return false;
      if (CURADRID != other.CURADRID) return false;
      if (CURSECID != other.CURSECID) return false;
      if (ACCSECDIST != other.ACCSECDIST) return false;
      if (MODESTATUS != other.MODESTATUS) return false;
      if (ACTSTATUS != other.ACTSTATUS) return false;
      if (MCSCMD != other.MCSCMD) return false;
      if (OHTCCMD != other.OHTCCMD) return false;
      if (BLOCKPAUSE != other.BLOCKPAUSE) return false;
      if (CMDPAUSE != other.CMDPAUSE) return false;
      if (OBSPAUSE != other.OBSPAUSE) return false;
      if (HIDPAUSE != other.HIDPAUSE) return false;
      if (ERROR != other.ERROR) return false;
      if (OBSDIST != other.OBSDIST) return false;
      if (HASCST != other.HASCST) return false;
      if (CSTID != other.CSTID) return false;
      if (!object.Equals(UPDTIME, other.UPDTIME)) return false;
      if (VEHICLEACCDIST != other.VEHICLEACCDIST) return false;
      if (MANTACCDIST != other.MANTACCDIST) return false;
      if (!object.Equals(MANTDATE, other.MANTDATE)) return false;
      if (GRIPCOUNT != other.GRIPCOUNT) return false;
      if (GRIPMANTCOUNT != other.GRIPMANTCOUNT) return false;
      if (!object.Equals(GRIPMANTDATE, other.GRIPMANTDATE)) return false;
      if (ISPARKING != other.ISPARKING) return false;
      if (!object.Equals(PARKTIME, other.PARKTIME)) return false;
      if (PARKADRID != other.PARKADRID) return false;
      if (ISCYCLING != other.ISCYCLING) return false;
      if (!object.Equals(CYCLERUNTIME, other.CYCLERUNTIME)) return false;
      if (CYCLERUNID != other.CYCLERUNID) return false;
      if(!predictPath_.Equals(other.predictPath_)) return false;
      if(!cyclingPath_.Equals(other.cyclingPath_)) return false;
      if (StartAdr != other.StartAdr) return false;
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (Speed != other.Speed) return false;
      if (ObsVehicleID != other.ObsVehicleID) return false;
      if(!alarms_.Equals(other.alarms_)) return false;
      if (CmdType != other.CmdType) return false;
      if (VhCMDStatus != other.VhCMDStatus) return false;
      if (VhRecentTranEvent != other.VhRecentTranEvent) return false;
      if(!willPassSectionID_.Equals(other.willPassSectionID_)) return false;
      if (ProcProgressPercen != other.ProcProgressPercen) return false;
      if (CurrentDriveDirction != other.CurrentDriveDirction) return false;
      if (CMDPRIOTITY != other.CMDPRIOTITY) return false;
      if (CMDCSTID != other.CMDCSTID) return false;
      if (State != other.State) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (SAFETYDOORPAUSE != other.SAFETYDOORPAUSE) return false;
      if (EARTHQUAKEPAUSE != other.EARTHQUAKEPAUSE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsTcpIpConnect != false) hash ^= IsTcpIpConnect.GetHashCode();
      if (VEHICLEID.Length != 0) hash ^= VEHICLEID.GetHashCode();
      if (VEHICLETYPE != 0) hash ^= VEHICLETYPE.GetHashCode();
      if (CURADRID.Length != 0) hash ^= CURADRID.GetHashCode();
      if (CURSECID.Length != 0) hash ^= CURSECID.GetHashCode();
      if (ACCSECDIST != 0D) hash ^= ACCSECDIST.GetHashCode();
      if (MODESTATUS != 0) hash ^= MODESTATUS.GetHashCode();
      if (ACTSTATUS != 0) hash ^= ACTSTATUS.GetHashCode();
      if (MCSCMD.Length != 0) hash ^= MCSCMD.GetHashCode();
      if (OHTCCMD.Length != 0) hash ^= OHTCCMD.GetHashCode();
      if (BLOCKPAUSE != 0) hash ^= BLOCKPAUSE.GetHashCode();
      if (CMDPAUSE != 0) hash ^= CMDPAUSE.GetHashCode();
      if (OBSPAUSE != 0) hash ^= OBSPAUSE.GetHashCode();
      if (HIDPAUSE != 0) hash ^= HIDPAUSE.GetHashCode();
      if (ERROR != 0) hash ^= ERROR.GetHashCode();
      if (OBSDIST != 0) hash ^= OBSDIST.GetHashCode();
      if (HASCST != 0) hash ^= HASCST.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (uPDTIME_ != null) hash ^= UPDTIME.GetHashCode();
      if (VEHICLEACCDIST != 0) hash ^= VEHICLEACCDIST.GetHashCode();
      if (MANTACCDIST != 0) hash ^= MANTACCDIST.GetHashCode();
      if (mANTDATE_ != null) hash ^= MANTDATE.GetHashCode();
      if (GRIPCOUNT != 0) hash ^= GRIPCOUNT.GetHashCode();
      if (GRIPMANTCOUNT != 0) hash ^= GRIPMANTCOUNT.GetHashCode();
      if (gRIPMANTDATE_ != null) hash ^= GRIPMANTDATE.GetHashCode();
      if (ISPARKING != false) hash ^= ISPARKING.GetHashCode();
      if (pARKTIME_ != null) hash ^= PARKTIME.GetHashCode();
      if (PARKADRID.Length != 0) hash ^= PARKADRID.GetHashCode();
      if (ISCYCLING != false) hash ^= ISCYCLING.GetHashCode();
      if (cYCLERUNTIME_ != null) hash ^= CYCLERUNTIME.GetHashCode();
      if (CYCLERUNID.Length != 0) hash ^= CYCLERUNID.GetHashCode();
      hash ^= predictPath_.GetHashCode();
      hash ^= cyclingPath_.GetHashCode();
      if (StartAdr.Length != 0) hash ^= StartAdr.GetHashCode();
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (ObsVehicleID.Length != 0) hash ^= ObsVehicleID.GetHashCode();
      hash ^= alarms_.GetHashCode();
      if (CmdType != 0) hash ^= CmdType.GetHashCode();
      if (VhCMDStatus != 0) hash ^= VhCMDStatus.GetHashCode();
      if (VhRecentTranEvent != 0) hash ^= VhRecentTranEvent.GetHashCode();
      hash ^= willPassSectionID_.GetHashCode();
      if (ProcProgressPercen != 0) hash ^= ProcProgressPercen.GetHashCode();
      if (CurrentDriveDirction != 0) hash ^= CurrentDriveDirction.GetHashCode();
      if (CMDPRIOTITY != 0) hash ^= CMDPRIOTITY.GetHashCode();
      if (CMDCSTID.Length != 0) hash ^= CMDCSTID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (SAFETYDOORPAUSE != 0) hash ^= SAFETYDOORPAUSE.GetHashCode();
      if (EARTHQUAKEPAUSE != 0) hash ^= EARTHQUAKEPAUSE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsTcpIpConnect != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsTcpIpConnect);
      }
      if (VEHICLEID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VEHICLEID);
      }
      if (VEHICLETYPE != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VEHICLETYPE);
      }
      if (CURADRID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CURADRID);
      }
      if (CURSECID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CURSECID);
      }
      if (ACCSECDIST != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ACCSECDIST);
      }
      if (MODESTATUS != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) MODESTATUS);
      }
      if (ACTSTATUS != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ACTSTATUS);
      }
      if (MCSCMD.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MCSCMD);
      }
      if (OHTCCMD.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OHTCCMD);
      }
      if (BLOCKPAUSE != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) BLOCKPAUSE);
      }
      if (CMDPAUSE != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CMDPAUSE);
      }
      if (OBSPAUSE != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) OBSPAUSE);
      }
      if (HIDPAUSE != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) HIDPAUSE);
      }
      if (ERROR != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ERROR);
      }
      if (OBSDIST != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OBSDIST);
      }
      if (HASCST != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HASCST);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CSTID);
      }
      if (uPDTIME_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(UPDTIME);
      }
      if (VEHICLEACCDIST != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(VEHICLEACCDIST);
      }
      if (MANTACCDIST != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MANTACCDIST);
      }
      if (mANTDATE_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MANTDATE);
      }
      if (GRIPCOUNT != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GRIPCOUNT);
      }
      if (GRIPMANTCOUNT != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(GRIPMANTCOUNT);
      }
      if (gRIPMANTDATE_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(GRIPMANTDATE);
      }
      if (ISPARKING != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ISPARKING);
      }
      if (pARKTIME_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(PARKTIME);
      }
      if (PARKADRID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PARKADRID);
      }
      if (ISCYCLING != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(ISCYCLING);
      }
      if (cYCLERUNTIME_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(CYCLERUNTIME);
      }
      if (CYCLERUNID.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CYCLERUNID);
      }
      predictPath_.WriteTo(output, _repeated_predictPath_codec);
      cyclingPath_.WriteTo(output, _repeated_cyclingPath_codec);
      if (StartAdr.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StartAdr);
      }
      if (FromAdr.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ToAdr);
      }
      if (Speed != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(Speed);
      }
      if (ObsVehicleID.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ObsVehicleID);
      }
      alarms_.WriteTo(output, _repeated_alarms_codec);
      if (CmdType != 0) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) CmdType);
      }
      if (VhCMDStatus != 0) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) VhCMDStatus);
      }
      if (VhRecentTranEvent != 0) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) VhRecentTranEvent);
      }
      willPassSectionID_.WriteTo(output, _repeated_willPassSectionID_codec);
      if (ProcProgressPercen != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ProcProgressPercen);
      }
      if (CurrentDriveDirction != 0) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) CurrentDriveDirction);
      }
      if (CMDPRIOTITY != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(CMDPRIOTITY);
      }
      if (CMDCSTID.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(CMDCSTID);
      }
      if (State != 0) {
        output.WriteRawTag(128, 3);
        output.WriteEnum((int) State);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(136, 3);
        output.WriteEnum((int) PauseStatus);
      }
      if (SAFETYDOORPAUSE != 0) {
        output.WriteRawTag(144, 3);
        output.WriteEnum((int) SAFETYDOORPAUSE);
      }
      if (EARTHQUAKEPAUSE != 0) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) EARTHQUAKEPAUSE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsTcpIpConnect != false) {
        size += 1 + 1;
      }
      if (VEHICLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VEHICLEID);
      }
      if (VEHICLETYPE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VEHICLETYPE);
      }
      if (CURADRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CURADRID);
      }
      if (CURSECID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CURSECID);
      }
      if (ACCSECDIST != 0D) {
        size += 1 + 8;
      }
      if (MODESTATUS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MODESTATUS);
      }
      if (ACTSTATUS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ACTSTATUS);
      }
      if (MCSCMD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MCSCMD);
      }
      if (OHTCCMD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OHTCCMD);
      }
      if (BLOCKPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BLOCKPAUSE);
      }
      if (CMDPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CMDPAUSE);
      }
      if (OBSPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OBSPAUSE);
      }
      if (HIDPAUSE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HIDPAUSE);
      }
      if (ERROR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ERROR);
      }
      if (OBSDIST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OBSDIST);
      }
      if (HASCST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HASCST);
      }
      if (CSTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (uPDTIME_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPDTIME);
      }
      if (VEHICLEACCDIST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VEHICLEACCDIST);
      }
      if (MANTACCDIST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MANTACCDIST);
      }
      if (mANTDATE_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MANTDATE);
      }
      if (GRIPCOUNT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GRIPCOUNT);
      }
      if (GRIPMANTCOUNT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GRIPMANTCOUNT);
      }
      if (gRIPMANTDATE_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GRIPMANTDATE);
      }
      if (ISPARKING != false) {
        size += 2 + 1;
      }
      if (pARKTIME_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PARKTIME);
      }
      if (PARKADRID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PARKADRID);
      }
      if (ISCYCLING != false) {
        size += 2 + 1;
      }
      if (cYCLERUNTIME_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CYCLERUNTIME);
      }
      if (CYCLERUNID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CYCLERUNID);
      }
      size += predictPath_.CalculateSize(_repeated_predictPath_codec);
      size += cyclingPath_.CalculateSize(_repeated_cyclingPath_codec);
      if (StartAdr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StartAdr);
      }
      if (FromAdr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (Speed != 0D) {
        size += 2 + 8;
      }
      if (ObsVehicleID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ObsVehicleID);
      }
      size += alarms_.CalculateSize(_repeated_alarms_codec);
      if (CmdType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmdType);
      }
      if (VhCMDStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VhCMDStatus);
      }
      if (VhRecentTranEvent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VhRecentTranEvent);
      }
      size += willPassSectionID_.CalculateSize(_repeated_willPassSectionID_codec);
      if (ProcProgressPercen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProcProgressPercen);
      }
      if (CurrentDriveDirction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentDriveDirction);
      }
      if (CMDPRIOTITY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CMDPRIOTITY);
      }
      if (CMDCSTID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CMDCSTID);
      }
      if (State != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (PauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (SAFETYDOORPAUSE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SAFETYDOORPAUSE);
      }
      if (EARTHQUAKEPAUSE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EARTHQUAKEPAUSE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VEHICLE_INFO other) {
      if (other == null) {
        return;
      }
      if (other.IsTcpIpConnect != false) {
        IsTcpIpConnect = other.IsTcpIpConnect;
      }
      if (other.VEHICLEID.Length != 0) {
        VEHICLEID = other.VEHICLEID;
      }
      if (other.VEHICLETYPE != 0) {
        VEHICLETYPE = other.VEHICLETYPE;
      }
      if (other.CURADRID.Length != 0) {
        CURADRID = other.CURADRID;
      }
      if (other.CURSECID.Length != 0) {
        CURSECID = other.CURSECID;
      }
      if (other.ACCSECDIST != 0D) {
        ACCSECDIST = other.ACCSECDIST;
      }
      if (other.MODESTATUS != 0) {
        MODESTATUS = other.MODESTATUS;
      }
      if (other.ACTSTATUS != 0) {
        ACTSTATUS = other.ACTSTATUS;
      }
      if (other.MCSCMD.Length != 0) {
        MCSCMD = other.MCSCMD;
      }
      if (other.OHTCCMD.Length != 0) {
        OHTCCMD = other.OHTCCMD;
      }
      if (other.BLOCKPAUSE != 0) {
        BLOCKPAUSE = other.BLOCKPAUSE;
      }
      if (other.CMDPAUSE != 0) {
        CMDPAUSE = other.CMDPAUSE;
      }
      if (other.OBSPAUSE != 0) {
        OBSPAUSE = other.OBSPAUSE;
      }
      if (other.HIDPAUSE != 0) {
        HIDPAUSE = other.HIDPAUSE;
      }
      if (other.ERROR != 0) {
        ERROR = other.ERROR;
      }
      if (other.OBSDIST != 0) {
        OBSDIST = other.OBSDIST;
      }
      if (other.HASCST != 0) {
        HASCST = other.HASCST;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.uPDTIME_ != null) {
        if (uPDTIME_ == null) {
          uPDTIME_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
        }
        UPDTIME.MergeFrom(other.UPDTIME);
      }
      if (other.VEHICLEACCDIST != 0) {
        VEHICLEACCDIST = other.VEHICLEACCDIST;
      }
      if (other.MANTACCDIST != 0) {
        MANTACCDIST = other.MANTACCDIST;
      }
      if (other.mANTDATE_ != null) {
        if (mANTDATE_ == null) {
          mANTDATE_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
        }
        MANTDATE.MergeFrom(other.MANTDATE);
      }
      if (other.GRIPCOUNT != 0) {
        GRIPCOUNT = other.GRIPCOUNT;
      }
      if (other.GRIPMANTCOUNT != 0) {
        GRIPMANTCOUNT = other.GRIPMANTCOUNT;
      }
      if (other.gRIPMANTDATE_ != null) {
        if (gRIPMANTDATE_ == null) {
          gRIPMANTDATE_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
        }
        GRIPMANTDATE.MergeFrom(other.GRIPMANTDATE);
      }
      if (other.ISPARKING != false) {
        ISPARKING = other.ISPARKING;
      }
      if (other.pARKTIME_ != null) {
        if (pARKTIME_ == null) {
          pARKTIME_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
        }
        PARKTIME.MergeFrom(other.PARKTIME);
      }
      if (other.PARKADRID.Length != 0) {
        PARKADRID = other.PARKADRID;
      }
      if (other.ISCYCLING != false) {
        ISCYCLING = other.ISCYCLING;
      }
      if (other.cYCLERUNTIME_ != null) {
        if (cYCLERUNTIME_ == null) {
          cYCLERUNTIME_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
        }
        CYCLERUNTIME.MergeFrom(other.CYCLERUNTIME);
      }
      if (other.CYCLERUNID.Length != 0) {
        CYCLERUNID = other.CYCLERUNID;
      }
      predictPath_.Add(other.predictPath_);
      cyclingPath_.Add(other.cyclingPath_);
      if (other.StartAdr.Length != 0) {
        StartAdr = other.StartAdr;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.ObsVehicleID.Length != 0) {
        ObsVehicleID = other.ObsVehicleID;
      }
      alarms_.Add(other.alarms_);
      if (other.CmdType != 0) {
        CmdType = other.CmdType;
      }
      if (other.VhCMDStatus != 0) {
        VhCMDStatus = other.VhCMDStatus;
      }
      if (other.VhRecentTranEvent != 0) {
        VhRecentTranEvent = other.VhRecentTranEvent;
      }
      willPassSectionID_.Add(other.willPassSectionID_);
      if (other.ProcProgressPercen != 0) {
        ProcProgressPercen = other.ProcProgressPercen;
      }
      if (other.CurrentDriveDirction != 0) {
        CurrentDriveDirction = other.CurrentDriveDirction;
      }
      if (other.CMDPRIOTITY != 0) {
        CMDPRIOTITY = other.CMDPRIOTITY;
      }
      if (other.CMDCSTID.Length != 0) {
        CMDCSTID = other.CMDCSTID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.SAFETYDOORPAUSE != 0) {
        SAFETYDOORPAUSE = other.SAFETYDOORPAUSE;
      }
      if (other.EARTHQUAKEPAUSE != 0) {
        EARTHQUAKEPAUSE = other.EARTHQUAKEPAUSE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsTcpIpConnect = input.ReadBool();
            break;
          }
          case 18: {
            VEHICLEID = input.ReadString();
            break;
          }
          case 24: {
            vEHICLETYPE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleType) input.ReadEnum();
            break;
          }
          case 34: {
            CURADRID = input.ReadString();
            break;
          }
          case 42: {
            CURSECID = input.ReadString();
            break;
          }
          case 49: {
            ACCSECDIST = input.ReadDouble();
            break;
          }
          case 56: {
            mODESTATUS_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 64: {
            aCTSTATUS_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 74: {
            MCSCMD = input.ReadString();
            break;
          }
          case 82: {
            OHTCCMD = input.ReadString();
            break;
          }
          case 88: {
            bLOCKPAUSE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 96: {
            cMDPAUSE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 104: {
            oBSPAUSE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 112: {
            hIDPAUSE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 120: {
            eRROR_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 128: {
            OBSDIST = input.ReadInt32();
            break;
          }
          case 136: {
            HASCST = input.ReadInt32();
            break;
          }
          case 146: {
            CSTID = input.ReadString();
            break;
          }
          case 154: {
            if (uPDTIME_ == null) {
              uPDTIME_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
            }
            input.ReadMessage(uPDTIME_);
            break;
          }
          case 160: {
            VEHICLEACCDIST = input.ReadInt32();
            break;
          }
          case 168: {
            MANTACCDIST = input.ReadInt32();
            break;
          }
          case 178: {
            if (mANTDATE_ == null) {
              mANTDATE_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
            }
            input.ReadMessage(mANTDATE_);
            break;
          }
          case 184: {
            GRIPCOUNT = input.ReadInt32();
            break;
          }
          case 192: {
            GRIPMANTCOUNT = input.ReadInt32();
            break;
          }
          case 202: {
            if (gRIPMANTDATE_ == null) {
              gRIPMANTDATE_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
            }
            input.ReadMessage(gRIPMANTDATE_);
            break;
          }
          case 208: {
            ISPARKING = input.ReadBool();
            break;
          }
          case 218: {
            if (pARKTIME_ == null) {
              pARKTIME_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
            }
            input.ReadMessage(pARKTIME_);
            break;
          }
          case 226: {
            PARKADRID = input.ReadString();
            break;
          }
          case 232: {
            ISCYCLING = input.ReadBool();
            break;
          }
          case 242: {
            if (cYCLERUNTIME_ == null) {
              cYCLERUNTIME_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
            }
            input.ReadMessage(cYCLERUNTIME_);
            break;
          }
          case 250: {
            CYCLERUNID = input.ReadString();
            break;
          }
          case 258: {
            predictPath_.AddEntriesFrom(input, _repeated_predictPath_codec);
            break;
          }
          case 266: {
            cyclingPath_.AddEntriesFrom(input, _repeated_cyclingPath_codec);
            break;
          }
          case 274: {
            StartAdr = input.ReadString();
            break;
          }
          case 282: {
            FromAdr = input.ReadString();
            break;
          }
          case 290: {
            ToAdr = input.ReadString();
            break;
          }
          case 297: {
            Speed = input.ReadDouble();
            break;
          }
          case 306: {
            ObsVehicleID = input.ReadString();
            break;
          }
          case 314: {
            alarms_.AddEntriesFrom(input, _repeated_alarms_codec);
            break;
          }
          case 320: {
            cmdType_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandType) input.ReadEnum();
            break;
          }
          case 328: {
            vhCMDStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.CommandStatus) input.ReadEnum();
            break;
          }
          case 336: {
            vhRecentTranEvent_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.EventType) input.ReadEnum();
            break;
          }
          case 346: {
            willPassSectionID_.AddEntriesFrom(input, _repeated_willPassSectionID_codec);
            break;
          }
          case 352: {
            ProcProgressPercen = input.ReadInt32();
            break;
          }
          case 360: {
            currentDriveDirction_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 368: {
            CMDPRIOTITY = input.ReadInt32();
            break;
          }
          case 378: {
            CMDCSTID = input.ReadString();
            break;
          }
          case 384: {
            state_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VehicleState) input.ReadEnum();
            break;
          }
          case 392: {
            pauseStatus_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 400: {
            sAFETYDOORPAUSE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 408: {
            eARTHQUAKEPAUSE_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.VhStopSingle) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PORT_INFO : pb::IMessage<PORT_INFO> {
    private static readonly pb::MessageParser<PORT_INFO> _parser = new pb::MessageParser<PORT_INFO>(() => new PORT_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PORT_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PORT_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PORT_INFO(PORT_INFO other) : this() {
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      opAutoMode_ = other.opAutoMode_;
      opManualMode_ = other.opManualMode_;
      opError_ = other.opError_;
      isInputMode_ = other.isInputMode_;
      isOutputMode_ = other.isOutputMode_;
      isModeChangable_ = other.isModeChangable_;
      isAGVMode_ = other.isAGVMode_;
      isMGVMode_ = other.isMGVMode_;
      portWaitIn_ = other.portWaitIn_;
      portWaitOut_ = other.portWaitOut_;
      isAutoMode_ = other.isAutoMode_;
      isReadyToLoad_ = other.isReadyToLoad_;
      isReadyToUnload_ = other.isReadyToUnload_;
      loadPosition1_ = other.loadPosition1_;
      loadPosition2_ = other.loadPosition2_;
      loadPosition3_ = other.loadPosition3_;
      loadPosition4_ = other.loadPosition4_;
      loadPosition5_ = other.loadPosition5_;
      loadPosition7_ = other.loadPosition7_;
      loadPosition6_ = other.loadPosition6_;
      isCSTPresence_ = other.isCSTPresence_;
      aGVPortReady_ = other.aGVPortReady_;
      canOpenBox_ = other.canOpenBox_;
      isBoxOpen_ = other.isBoxOpen_;
      bCRReadDone_ = other.bCRReadDone_;
      cSTPresenceMismatch_ = other.cSTPresenceMismatch_;
      isTransferComplete_ = other.isTransferComplete_;
      cstRemoveCheck_ = other.cstRemoveCheck_;
      errorCode_ = other.errorCode_;
      boxID_ = other.boxID_;
      cassetteID_ = other.cassetteID_;
      portID_ = other.portID_;
      loadPositionBOX1_ = other.loadPositionBOX1_;
      loadPositionBOX2_ = other.loadPositionBOX2_;
      loadPositionBOX3_ = other.loadPositionBOX3_;
      loadPositionBOX4_ = other.loadPositionBOX4_;
      loadPositionBOX5_ = other.loadPositionBOX5_;
      fireAlarm_ = other.fireAlarm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PORT_INFO Clone() {
      return new PORT_INFO(this);
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "OpAutoMode" field.</summary>
    public const int OpAutoModeFieldNumber = 2;
    private bool opAutoMode_;
    /// <summary>
    /// D6401.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpAutoMode {
      get { return opAutoMode_; }
      set {
        opAutoMode_ = value;
      }
    }

    /// <summary>Field number for the "OpManualMode" field.</summary>
    public const int OpManualModeFieldNumber = 3;
    private bool opManualMode_;
    /// <summary>
    /// D6401.1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpManualMode {
      get { return opManualMode_; }
      set {
        opManualMode_ = value;
      }
    }

    /// <summary>Field number for the "OpError" field.</summary>
    public const int OpErrorFieldNumber = 4;
    private bool opError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpError {
      get { return opError_; }
      set {
        opError_ = value;
      }
    }

    /// <summary>Field number for the "IsInputMode" field.</summary>
    public const int IsInputModeFieldNumber = 5;
    private bool isInputMode_;
    /// <summary>
    /// D6401.3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInputMode {
      get { return isInputMode_; }
      set {
        isInputMode_ = value;
      }
    }

    /// <summary>Field number for the "IsOutputMode" field.</summary>
    public const int IsOutputModeFieldNumber = 6;
    private bool isOutputMode_;
    /// <summary>
    /// D6401.4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOutputMode {
      get { return isOutputMode_; }
      set {
        isOutputMode_ = value;
      }
    }

    /// <summary>Field number for the "IsModeChangable" field.</summary>
    public const int IsModeChangableFieldNumber = 7;
    private bool isModeChangable_;
    /// <summary>
    /// D6401.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsModeChangable {
      get { return isModeChangable_; }
      set {
        isModeChangable_ = value;
      }
    }

    /// <summary>Field number for the "IsAGVMode" field.</summary>
    public const int IsAGVModeFieldNumber = 8;
    private bool isAGVMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAGVMode {
      get { return isAGVMode_; }
      set {
        isAGVMode_ = value;
      }
    }

    /// <summary>Field number for the "IsMGVMode" field.</summary>
    public const int IsMGVModeFieldNumber = 9;
    private bool isMGVMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMGVMode {
      get { return isMGVMode_; }
      set {
        isMGVMode_ = value;
      }
    }

    /// <summary>Field number for the "PortWaitIn" field.</summary>
    public const int PortWaitInFieldNumber = 10;
    private bool portWaitIn_;
    /// <summary>
    /// D6401.8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PortWaitIn {
      get { return portWaitIn_; }
      set {
        portWaitIn_ = value;
      }
    }

    /// <summary>Field number for the "PortWaitOut" field.</summary>
    public const int PortWaitOutFieldNumber = 11;
    private bool portWaitOut_;
    /// <summary>
    /// D6401.9
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PortWaitOut {
      get { return portWaitOut_; }
      set {
        portWaitOut_ = value;
      }
    }

    /// <summary>Field number for the "IsAutoMode" field.</summary>
    public const int IsAutoModeFieldNumber = 12;
    private bool isAutoMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoMode {
      get { return isAutoMode_; }
      set {
        isAutoMode_ = value;
      }
    }

    /// <summary>Field number for the "IsReadyToLoad" field.</summary>
    public const int IsReadyToLoadFieldNumber = 13;
    private bool isReadyToLoad_;
    /// <summary>
    /// D6401.12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadyToLoad {
      get { return isReadyToLoad_; }
      set {
        isReadyToLoad_ = value;
      }
    }

    /// <summary>Field number for the "IsReadyToUnload" field.</summary>
    public const int IsReadyToUnloadFieldNumber = 14;
    private bool isReadyToUnload_;
    /// <summary>
    /// D6401.13
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadyToUnload {
      get { return isReadyToUnload_; }
      set {
        isReadyToUnload_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition1" field.</summary>
    public const int LoadPosition1FieldNumber = 15;
    private bool loadPosition1_;
    /// <summary>
    /// D6402.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition1 {
      get { return loadPosition1_; }
      set {
        loadPosition1_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition2" field.</summary>
    public const int LoadPosition2FieldNumber = 16;
    private bool loadPosition2_;
    /// <summary>
    /// D6402.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition2 {
      get { return loadPosition2_; }
      set {
        loadPosition2_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition3" field.</summary>
    public const int LoadPosition3FieldNumber = 17;
    private bool loadPosition3_;
    /// <summary>
    /// D6402.2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition3 {
      get { return loadPosition3_; }
      set {
        loadPosition3_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition4" field.</summary>
    public const int LoadPosition4FieldNumber = 18;
    private bool loadPosition4_;
    /// <summary>
    /// D6402.3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition4 {
      get { return loadPosition4_; }
      set {
        loadPosition4_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition5" field.</summary>
    public const int LoadPosition5FieldNumber = 19;
    private bool loadPosition5_;
    /// <summary>
    /// D6402.4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition5 {
      get { return loadPosition5_; }
      set {
        loadPosition5_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition7" field.</summary>
    public const int LoadPosition7FieldNumber = 20;
    private bool loadPosition7_;
    /// <summary>
    /// D6402.B
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition7 {
      get { return loadPosition7_; }
      set {
        loadPosition7_ = value;
      }
    }

    /// <summary>Field number for the "LoadPosition6" field.</summary>
    public const int LoadPosition6FieldNumber = 21;
    private bool loadPosition6_;
    /// <summary>
    /// D6402.C
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadPosition6 {
      get { return loadPosition6_; }
      set {
        loadPosition6_ = value;
      }
    }

    /// <summary>Field number for the "IsCSTPresence" field.</summary>
    public const int IsCSTPresenceFieldNumber = 22;
    private bool isCSTPresence_;
    /// <summary>
    /// D6402.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCSTPresence {
      get { return isCSTPresence_; }
      set {
        isCSTPresence_ = value;
      }
    }

    /// <summary>Field number for the "AGVPortReady" field.</summary>
    public const int AGVPortReadyFieldNumber = 23;
    private bool aGVPortReady_;
    /// <summary>
    /// D6402.6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AGVPortReady {
      get { return aGVPortReady_; }
      set {
        aGVPortReady_ = value;
      }
    }

    /// <summary>Field number for the "CanOpenBox" field.</summary>
    public const int CanOpenBoxFieldNumber = 24;
    private bool canOpenBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanOpenBox {
      get { return canOpenBox_; }
      set {
        canOpenBox_ = value;
      }
    }

    /// <summary>Field number for the "IsBoxOpen" field.</summary>
    public const int IsBoxOpenFieldNumber = 25;
    private bool isBoxOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoxOpen {
      get { return isBoxOpen_; }
      set {
        isBoxOpen_ = value;
      }
    }

    /// <summary>Field number for the "BCRReadDone" field.</summary>
    public const int BCRReadDoneFieldNumber = 26;
    private bool bCRReadDone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCRReadDone {
      get { return bCRReadDone_; }
      set {
        bCRReadDone_ = value;
      }
    }

    /// <summary>Field number for the "CSTPresenceMismatch" field.</summary>
    public const int CSTPresenceMismatchFieldNumber = 27;
    private bool cSTPresenceMismatch_;
    /// <summary>
    /// D6402.A
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CSTPresenceMismatch {
      get { return cSTPresenceMismatch_; }
      set {
        cSTPresenceMismatch_ = value;
      }
    }

    /// <summary>Field number for the "IsTransferComplete" field.</summary>
    public const int IsTransferCompleteFieldNumber = 28;
    private bool isTransferComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTransferComplete {
      get { return isTransferComplete_; }
      set {
        isTransferComplete_ = value;
      }
    }

    /// <summary>Field number for the "CstRemoveCheck" field.</summary>
    public const int CstRemoveCheckFieldNumber = 29;
    private bool cstRemoveCheck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CstRemoveCheck {
      get { return cstRemoveCheck_; }
      set {
        cstRemoveCheck_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 30;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "BoxID" field.</summary>
    public const int BoxIDFieldNumber = 31;
    private string boxID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxID {
      get { return boxID_; }
      set {
        boxID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CassetteID" field.</summary>
    public const int CassetteIDFieldNumber = 32;
    private string cassetteID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CassetteID {
      get { return cassetteID_; }
      set {
        cassetteID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PortID" field.</summary>
    public const int PortIDFieldNumber = 33;
    private string portID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortID {
      get { return portID_; }
      set {
        portID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPositionBOX1" field.</summary>
    public const int LoadPositionBOX1FieldNumber = 34;
    private string loadPositionBOX1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPositionBOX1 {
      get { return loadPositionBOX1_; }
      set {
        loadPositionBOX1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPositionBOX2" field.</summary>
    public const int LoadPositionBOX2FieldNumber = 35;
    private string loadPositionBOX2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPositionBOX2 {
      get { return loadPositionBOX2_; }
      set {
        loadPositionBOX2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPositionBOX3" field.</summary>
    public const int LoadPositionBOX3FieldNumber = 36;
    private string loadPositionBOX3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPositionBOX3 {
      get { return loadPositionBOX3_; }
      set {
        loadPositionBOX3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPositionBOX4" field.</summary>
    public const int LoadPositionBOX4FieldNumber = 37;
    private string loadPositionBOX4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPositionBOX4 {
      get { return loadPositionBOX4_; }
      set {
        loadPositionBOX4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPositionBOX5" field.</summary>
    public const int LoadPositionBOX5FieldNumber = 38;
    private string loadPositionBOX5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPositionBOX5 {
      get { return loadPositionBOX5_; }
      set {
        loadPositionBOX5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireAlarm" field.</summary>
    public const int FireAlarmFieldNumber = 39;
    private bool fireAlarm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FireAlarm {
      get { return fireAlarm_; }
      set {
        fireAlarm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PORT_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PORT_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (OpAutoMode != other.OpAutoMode) return false;
      if (OpManualMode != other.OpManualMode) return false;
      if (OpError != other.OpError) return false;
      if (IsInputMode != other.IsInputMode) return false;
      if (IsOutputMode != other.IsOutputMode) return false;
      if (IsModeChangable != other.IsModeChangable) return false;
      if (IsAGVMode != other.IsAGVMode) return false;
      if (IsMGVMode != other.IsMGVMode) return false;
      if (PortWaitIn != other.PortWaitIn) return false;
      if (PortWaitOut != other.PortWaitOut) return false;
      if (IsAutoMode != other.IsAutoMode) return false;
      if (IsReadyToLoad != other.IsReadyToLoad) return false;
      if (IsReadyToUnload != other.IsReadyToUnload) return false;
      if (LoadPosition1 != other.LoadPosition1) return false;
      if (LoadPosition2 != other.LoadPosition2) return false;
      if (LoadPosition3 != other.LoadPosition3) return false;
      if (LoadPosition4 != other.LoadPosition4) return false;
      if (LoadPosition5 != other.LoadPosition5) return false;
      if (LoadPosition7 != other.LoadPosition7) return false;
      if (LoadPosition6 != other.LoadPosition6) return false;
      if (IsCSTPresence != other.IsCSTPresence) return false;
      if (AGVPortReady != other.AGVPortReady) return false;
      if (CanOpenBox != other.CanOpenBox) return false;
      if (IsBoxOpen != other.IsBoxOpen) return false;
      if (BCRReadDone != other.BCRReadDone) return false;
      if (CSTPresenceMismatch != other.CSTPresenceMismatch) return false;
      if (IsTransferComplete != other.IsTransferComplete) return false;
      if (CstRemoveCheck != other.CstRemoveCheck) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (BoxID != other.BoxID) return false;
      if (CassetteID != other.CassetteID) return false;
      if (PortID != other.PortID) return false;
      if (LoadPositionBOX1 != other.LoadPositionBOX1) return false;
      if (LoadPositionBOX2 != other.LoadPositionBOX2) return false;
      if (LoadPositionBOX3 != other.LoadPositionBOX3) return false;
      if (LoadPositionBOX4 != other.LoadPositionBOX4) return false;
      if (LoadPositionBOX5 != other.LoadPositionBOX5) return false;
      if (FireAlarm != other.FireAlarm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (OpAutoMode != false) hash ^= OpAutoMode.GetHashCode();
      if (OpManualMode != false) hash ^= OpManualMode.GetHashCode();
      if (OpError != false) hash ^= OpError.GetHashCode();
      if (IsInputMode != false) hash ^= IsInputMode.GetHashCode();
      if (IsOutputMode != false) hash ^= IsOutputMode.GetHashCode();
      if (IsModeChangable != false) hash ^= IsModeChangable.GetHashCode();
      if (IsAGVMode != false) hash ^= IsAGVMode.GetHashCode();
      if (IsMGVMode != false) hash ^= IsMGVMode.GetHashCode();
      if (PortWaitIn != false) hash ^= PortWaitIn.GetHashCode();
      if (PortWaitOut != false) hash ^= PortWaitOut.GetHashCode();
      if (IsAutoMode != false) hash ^= IsAutoMode.GetHashCode();
      if (IsReadyToLoad != false) hash ^= IsReadyToLoad.GetHashCode();
      if (IsReadyToUnload != false) hash ^= IsReadyToUnload.GetHashCode();
      if (LoadPosition1 != false) hash ^= LoadPosition1.GetHashCode();
      if (LoadPosition2 != false) hash ^= LoadPosition2.GetHashCode();
      if (LoadPosition3 != false) hash ^= LoadPosition3.GetHashCode();
      if (LoadPosition4 != false) hash ^= LoadPosition4.GetHashCode();
      if (LoadPosition5 != false) hash ^= LoadPosition5.GetHashCode();
      if (LoadPosition7 != false) hash ^= LoadPosition7.GetHashCode();
      if (LoadPosition6 != false) hash ^= LoadPosition6.GetHashCode();
      if (IsCSTPresence != false) hash ^= IsCSTPresence.GetHashCode();
      if (AGVPortReady != false) hash ^= AGVPortReady.GetHashCode();
      if (CanOpenBox != false) hash ^= CanOpenBox.GetHashCode();
      if (IsBoxOpen != false) hash ^= IsBoxOpen.GetHashCode();
      if (BCRReadDone != false) hash ^= BCRReadDone.GetHashCode();
      if (CSTPresenceMismatch != false) hash ^= CSTPresenceMismatch.GetHashCode();
      if (IsTransferComplete != false) hash ^= IsTransferComplete.GetHashCode();
      if (CstRemoveCheck != false) hash ^= CstRemoveCheck.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (BoxID.Length != 0) hash ^= BoxID.GetHashCode();
      if (CassetteID.Length != 0) hash ^= CassetteID.GetHashCode();
      if (PortID.Length != 0) hash ^= PortID.GetHashCode();
      if (LoadPositionBOX1.Length != 0) hash ^= LoadPositionBOX1.GetHashCode();
      if (LoadPositionBOX2.Length != 0) hash ^= LoadPositionBOX2.GetHashCode();
      if (LoadPositionBOX3.Length != 0) hash ^= LoadPositionBOX3.GetHashCode();
      if (LoadPositionBOX4.Length != 0) hash ^= LoadPositionBOX4.GetHashCode();
      if (LoadPositionBOX5.Length != 0) hash ^= LoadPositionBOX5.GetHashCode();
      if (FireAlarm != false) hash ^= FireAlarm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (OpAutoMode != false) {
        output.WriteRawTag(16);
        output.WriteBool(OpAutoMode);
      }
      if (OpManualMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(OpManualMode);
      }
      if (OpError != false) {
        output.WriteRawTag(32);
        output.WriteBool(OpError);
      }
      if (IsInputMode != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsInputMode);
      }
      if (IsOutputMode != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsOutputMode);
      }
      if (IsModeChangable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsModeChangable);
      }
      if (IsAGVMode != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAGVMode);
      }
      if (IsMGVMode != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsMGVMode);
      }
      if (PortWaitIn != false) {
        output.WriteRawTag(80);
        output.WriteBool(PortWaitIn);
      }
      if (PortWaitOut != false) {
        output.WriteRawTag(88);
        output.WriteBool(PortWaitOut);
      }
      if (IsAutoMode != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsAutoMode);
      }
      if (IsReadyToLoad != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsReadyToLoad);
      }
      if (IsReadyToUnload != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsReadyToUnload);
      }
      if (LoadPosition1 != false) {
        output.WriteRawTag(120);
        output.WriteBool(LoadPosition1);
      }
      if (LoadPosition2 != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LoadPosition2);
      }
      if (LoadPosition3 != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(LoadPosition3);
      }
      if (LoadPosition4 != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(LoadPosition4);
      }
      if (LoadPosition5 != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(LoadPosition5);
      }
      if (LoadPosition7 != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(LoadPosition7);
      }
      if (LoadPosition6 != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(LoadPosition6);
      }
      if (IsCSTPresence != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsCSTPresence);
      }
      if (AGVPortReady != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(AGVPortReady);
      }
      if (CanOpenBox != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CanOpenBox);
      }
      if (IsBoxOpen != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsBoxOpen);
      }
      if (BCRReadDone != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(BCRReadDone);
      }
      if (CSTPresenceMismatch != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(CSTPresenceMismatch);
      }
      if (IsTransferComplete != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsTransferComplete);
      }
      if (CstRemoveCheck != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(CstRemoveCheck);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ErrorCode);
      }
      if (BoxID.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(BoxID);
      }
      if (CassetteID.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CassetteID);
      }
      if (PortID.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PortID);
      }
      if (LoadPositionBOX1.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(LoadPositionBOX1);
      }
      if (LoadPositionBOX2.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(LoadPositionBOX2);
      }
      if (LoadPositionBOX3.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(LoadPositionBOX3);
      }
      if (LoadPositionBOX4.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(LoadPositionBOX4);
      }
      if (LoadPositionBOX5.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(LoadPositionBOX5);
      }
      if (FireAlarm != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(FireAlarm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (OpAutoMode != false) {
        size += 1 + 1;
      }
      if (OpManualMode != false) {
        size += 1 + 1;
      }
      if (OpError != false) {
        size += 1 + 1;
      }
      if (IsInputMode != false) {
        size += 1 + 1;
      }
      if (IsOutputMode != false) {
        size += 1 + 1;
      }
      if (IsModeChangable != false) {
        size += 1 + 1;
      }
      if (IsAGVMode != false) {
        size += 1 + 1;
      }
      if (IsMGVMode != false) {
        size += 1 + 1;
      }
      if (PortWaitIn != false) {
        size += 1 + 1;
      }
      if (PortWaitOut != false) {
        size += 1 + 1;
      }
      if (IsAutoMode != false) {
        size += 1 + 1;
      }
      if (IsReadyToLoad != false) {
        size += 1 + 1;
      }
      if (IsReadyToUnload != false) {
        size += 1 + 1;
      }
      if (LoadPosition1 != false) {
        size += 1 + 1;
      }
      if (LoadPosition2 != false) {
        size += 2 + 1;
      }
      if (LoadPosition3 != false) {
        size += 2 + 1;
      }
      if (LoadPosition4 != false) {
        size += 2 + 1;
      }
      if (LoadPosition5 != false) {
        size += 2 + 1;
      }
      if (LoadPosition7 != false) {
        size += 2 + 1;
      }
      if (LoadPosition6 != false) {
        size += 2 + 1;
      }
      if (IsCSTPresence != false) {
        size += 2 + 1;
      }
      if (AGVPortReady != false) {
        size += 2 + 1;
      }
      if (CanOpenBox != false) {
        size += 2 + 1;
      }
      if (IsBoxOpen != false) {
        size += 2 + 1;
      }
      if (BCRReadDone != false) {
        size += 2 + 1;
      }
      if (CSTPresenceMismatch != false) {
        size += 2 + 1;
      }
      if (IsTransferComplete != false) {
        size += 2 + 1;
      }
      if (CstRemoveCheck != false) {
        size += 2 + 1;
      }
      if (ErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (BoxID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoxID);
      }
      if (CassetteID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CassetteID);
      }
      if (PortID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PortID);
      }
      if (LoadPositionBOX1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LoadPositionBOX1);
      }
      if (LoadPositionBOX2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LoadPositionBOX2);
      }
      if (LoadPositionBOX3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LoadPositionBOX3);
      }
      if (LoadPositionBOX4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LoadPositionBOX4);
      }
      if (LoadPositionBOX5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LoadPositionBOX5);
      }
      if (FireAlarm != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PORT_INFO other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.OpAutoMode != false) {
        OpAutoMode = other.OpAutoMode;
      }
      if (other.OpManualMode != false) {
        OpManualMode = other.OpManualMode;
      }
      if (other.OpError != false) {
        OpError = other.OpError;
      }
      if (other.IsInputMode != false) {
        IsInputMode = other.IsInputMode;
      }
      if (other.IsOutputMode != false) {
        IsOutputMode = other.IsOutputMode;
      }
      if (other.IsModeChangable != false) {
        IsModeChangable = other.IsModeChangable;
      }
      if (other.IsAGVMode != false) {
        IsAGVMode = other.IsAGVMode;
      }
      if (other.IsMGVMode != false) {
        IsMGVMode = other.IsMGVMode;
      }
      if (other.PortWaitIn != false) {
        PortWaitIn = other.PortWaitIn;
      }
      if (other.PortWaitOut != false) {
        PortWaitOut = other.PortWaitOut;
      }
      if (other.IsAutoMode != false) {
        IsAutoMode = other.IsAutoMode;
      }
      if (other.IsReadyToLoad != false) {
        IsReadyToLoad = other.IsReadyToLoad;
      }
      if (other.IsReadyToUnload != false) {
        IsReadyToUnload = other.IsReadyToUnload;
      }
      if (other.LoadPosition1 != false) {
        LoadPosition1 = other.LoadPosition1;
      }
      if (other.LoadPosition2 != false) {
        LoadPosition2 = other.LoadPosition2;
      }
      if (other.LoadPosition3 != false) {
        LoadPosition3 = other.LoadPosition3;
      }
      if (other.LoadPosition4 != false) {
        LoadPosition4 = other.LoadPosition4;
      }
      if (other.LoadPosition5 != false) {
        LoadPosition5 = other.LoadPosition5;
      }
      if (other.LoadPosition7 != false) {
        LoadPosition7 = other.LoadPosition7;
      }
      if (other.LoadPosition6 != false) {
        LoadPosition6 = other.LoadPosition6;
      }
      if (other.IsCSTPresence != false) {
        IsCSTPresence = other.IsCSTPresence;
      }
      if (other.AGVPortReady != false) {
        AGVPortReady = other.AGVPortReady;
      }
      if (other.CanOpenBox != false) {
        CanOpenBox = other.CanOpenBox;
      }
      if (other.IsBoxOpen != false) {
        IsBoxOpen = other.IsBoxOpen;
      }
      if (other.BCRReadDone != false) {
        BCRReadDone = other.BCRReadDone;
      }
      if (other.CSTPresenceMismatch != false) {
        CSTPresenceMismatch = other.CSTPresenceMismatch;
      }
      if (other.IsTransferComplete != false) {
        IsTransferComplete = other.IsTransferComplete;
      }
      if (other.CstRemoveCheck != false) {
        CstRemoveCheck = other.CstRemoveCheck;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.BoxID.Length != 0) {
        BoxID = other.BoxID;
      }
      if (other.CassetteID.Length != 0) {
        CassetteID = other.CassetteID;
      }
      if (other.PortID.Length != 0) {
        PortID = other.PortID;
      }
      if (other.LoadPositionBOX1.Length != 0) {
        LoadPositionBOX1 = other.LoadPositionBOX1;
      }
      if (other.LoadPositionBOX2.Length != 0) {
        LoadPositionBOX2 = other.LoadPositionBOX2;
      }
      if (other.LoadPositionBOX3.Length != 0) {
        LoadPositionBOX3 = other.LoadPositionBOX3;
      }
      if (other.LoadPositionBOX4.Length != 0) {
        LoadPositionBOX4 = other.LoadPositionBOX4;
      }
      if (other.LoadPositionBOX5.Length != 0) {
        LoadPositionBOX5 = other.LoadPositionBOX5;
      }
      if (other.FireAlarm != false) {
        FireAlarm = other.FireAlarm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 16: {
            OpAutoMode = input.ReadBool();
            break;
          }
          case 24: {
            OpManualMode = input.ReadBool();
            break;
          }
          case 32: {
            OpError = input.ReadBool();
            break;
          }
          case 40: {
            IsInputMode = input.ReadBool();
            break;
          }
          case 48: {
            IsOutputMode = input.ReadBool();
            break;
          }
          case 56: {
            IsModeChangable = input.ReadBool();
            break;
          }
          case 64: {
            IsAGVMode = input.ReadBool();
            break;
          }
          case 72: {
            IsMGVMode = input.ReadBool();
            break;
          }
          case 80: {
            PortWaitIn = input.ReadBool();
            break;
          }
          case 88: {
            PortWaitOut = input.ReadBool();
            break;
          }
          case 96: {
            IsAutoMode = input.ReadBool();
            break;
          }
          case 104: {
            IsReadyToLoad = input.ReadBool();
            break;
          }
          case 112: {
            IsReadyToUnload = input.ReadBool();
            break;
          }
          case 120: {
            LoadPosition1 = input.ReadBool();
            break;
          }
          case 128: {
            LoadPosition2 = input.ReadBool();
            break;
          }
          case 136: {
            LoadPosition3 = input.ReadBool();
            break;
          }
          case 144: {
            LoadPosition4 = input.ReadBool();
            break;
          }
          case 152: {
            LoadPosition5 = input.ReadBool();
            break;
          }
          case 160: {
            LoadPosition7 = input.ReadBool();
            break;
          }
          case 168: {
            LoadPosition6 = input.ReadBool();
            break;
          }
          case 176: {
            IsCSTPresence = input.ReadBool();
            break;
          }
          case 184: {
            AGVPortReady = input.ReadBool();
            break;
          }
          case 192: {
            CanOpenBox = input.ReadBool();
            break;
          }
          case 200: {
            IsBoxOpen = input.ReadBool();
            break;
          }
          case 208: {
            BCRReadDone = input.ReadBool();
            break;
          }
          case 216: {
            CSTPresenceMismatch = input.ReadBool();
            break;
          }
          case 224: {
            IsTransferComplete = input.ReadBool();
            break;
          }
          case 232: {
            CstRemoveCheck = input.ReadBool();
            break;
          }
          case 240: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 250: {
            BoxID = input.ReadString();
            break;
          }
          case 258: {
            CassetteID = input.ReadString();
            break;
          }
          case 266: {
            PortID = input.ReadString();
            break;
          }
          case 274: {
            LoadPositionBOX1 = input.ReadString();
            break;
          }
          case 282: {
            LoadPositionBOX2 = input.ReadString();
            break;
          }
          case 290: {
            LoadPositionBOX3 = input.ReadString();
            break;
          }
          case 298: {
            LoadPositionBOX4 = input.ReadString();
            break;
          }
          case 306: {
            LoadPositionBOX5 = input.ReadString();
            break;
          }
          case 312: {
            FireAlarm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DEVICE_CONNECTION_INFO : pb::IMessage<DEVICE_CONNECTION_INFO> {
    private static readonly pb::MessageParser<DEVICE_CONNECTION_INFO> _parser = new pb::MessageParser<DEVICE_CONNECTION_INFO>(() => new DEVICE_CONNECTION_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DEVICE_CONNECTION_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DEVICE_CONNECTION_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DEVICE_CONNECTION_INFO(DEVICE_CONNECTION_INFO other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DEVICE_CONNECTION_INFO Clone() {
      return new DEVICE_CONNECTION_INFO(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DeviceConnectionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DeviceConnectionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ConnectionStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ConnectionStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DEVICE_CONNECTION_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DEVICE_CONNECTION_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DEVICE_CONNECTION_INFO other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DeviceConnectionType) input.ReadEnum();
            break;
          }
          case 24: {
            status_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ConnectionStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LINE_INFO : pb::IMessage<LINE_INFO> {
    private static readonly pb::MessageParser<LINE_INFO> _parser = new pb::MessageParser<LINE_INFO>(() => new LINE_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LINE_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LINE_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LINE_INFO(LINE_INFO other) : this() {
      pLC_ = other.pLC_;
      host_ = other.host_;
      hostMode_ = other.hostMode_;
      tSCState_ = other.tSCState_;
      iMS_ = other.iMS_;
      currntVehicleModeAutoRemoteCount_ = other.currntVehicleModeAutoRemoteCount_;
      currntVehicleModeAutoLoaclCount_ = other.currntVehicleModeAutoLoaclCount_;
      currntVehicleStatusIdelCount_ = other.currntVehicleStatusIdelCount_;
      currntVehicleStatusErrorCount_ = other.currntVehicleStatusErrorCount_;
      currntCSTStatueTransferCount_ = other.currntCSTStatueTransferCount_;
      currntCSTStatueWaitingCount_ = other.currntCSTStatueWaitingCount_;
      currntHostCommandTransferStatueAssignedCount_ = other.currntHostCommandTransferStatueAssignedCount_;
      currntHostCommandTransferStatueWaitingCounr_ = other.currntHostCommandTransferStatueWaitingCounr_;
      deviceConnectionInfos_ = other.deviceConnectionInfos_.Clone();
      lineID_ = other.lineID_;
      alarmHappen_ = other.alarmHappen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LINE_INFO Clone() {
      return new LINE_INFO(this);
    }

    /// <summary>Field number for the "PLC" field.</summary>
    public const int PLCFieldNumber = 1;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus pLC_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus PLC {
      get { return pLC_; }
      set {
        pLC_ = value;
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus host_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "HostMode" field.</summary>
    public const int HostModeFieldNumber = 3;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.HostMode hostMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.HostMode HostMode {
      get { return hostMode_; }
      set {
        hostMode_ = value;
      }
    }

    /// <summary>Field number for the "TSCState" field.</summary>
    public const int TSCStateFieldNumber = 4;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TSCState tSCState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TSCState TSCState {
      get { return tSCState_; }
      set {
        tSCState_ = value;
      }
    }

    /// <summary>Field number for the "IMS" field.</summary>
    public const int IMSFieldNumber = 5;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus iMS_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus IMS {
      get { return iMS_; }
      set {
        iMS_ = value;
      }
    }

    /// <summary>Field number for the "CurrntVehicleModeAutoRemoteCount" field.</summary>
    public const int CurrntVehicleModeAutoRemoteCountFieldNumber = 6;
    private int currntVehicleModeAutoRemoteCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntVehicleModeAutoRemoteCount {
      get { return currntVehicleModeAutoRemoteCount_; }
      set {
        currntVehicleModeAutoRemoteCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntVehicleModeAutoLoaclCount" field.</summary>
    public const int CurrntVehicleModeAutoLoaclCountFieldNumber = 7;
    private int currntVehicleModeAutoLoaclCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntVehicleModeAutoLoaclCount {
      get { return currntVehicleModeAutoLoaclCount_; }
      set {
        currntVehicleModeAutoLoaclCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntVehicleStatusIdelCount" field.</summary>
    public const int CurrntVehicleStatusIdelCountFieldNumber = 8;
    private int currntVehicleStatusIdelCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntVehicleStatusIdelCount {
      get { return currntVehicleStatusIdelCount_; }
      set {
        currntVehicleStatusIdelCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntVehicleStatusErrorCount" field.</summary>
    public const int CurrntVehicleStatusErrorCountFieldNumber = 9;
    private int currntVehicleStatusErrorCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntVehicleStatusErrorCount {
      get { return currntVehicleStatusErrorCount_; }
      set {
        currntVehicleStatusErrorCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntCSTStatueTransferCount" field.</summary>
    public const int CurrntCSTStatueTransferCountFieldNumber = 10;
    private int currntCSTStatueTransferCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntCSTStatueTransferCount {
      get { return currntCSTStatueTransferCount_; }
      set {
        currntCSTStatueTransferCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntCSTStatueWaitingCount" field.</summary>
    public const int CurrntCSTStatueWaitingCountFieldNumber = 11;
    private int currntCSTStatueWaitingCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntCSTStatueWaitingCount {
      get { return currntCSTStatueWaitingCount_; }
      set {
        currntCSTStatueWaitingCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntHostCommandTransferStatueAssignedCount" field.</summary>
    public const int CurrntHostCommandTransferStatueAssignedCountFieldNumber = 12;
    private int currntHostCommandTransferStatueAssignedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntHostCommandTransferStatueAssignedCount {
      get { return currntHostCommandTransferStatueAssignedCount_; }
      set {
        currntHostCommandTransferStatueAssignedCount_ = value;
      }
    }

    /// <summary>Field number for the "CurrntHostCommandTransferStatueWaitingCounr" field.</summary>
    public const int CurrntHostCommandTransferStatueWaitingCounrFieldNumber = 13;
    private int currntHostCommandTransferStatueWaitingCounr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrntHostCommandTransferStatueWaitingCounr {
      get { return currntHostCommandTransferStatueWaitingCounr_; }
      set {
        currntHostCommandTransferStatueWaitingCounr_ = value;
      }
    }

    /// <summary>Field number for the "DeviceConnectionInfos" field.</summary>
    public const int DeviceConnectionInfosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO> _repeated_deviceConnectionInfos_codec
        = pb::FieldCodec.ForMessage(114, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO> deviceConnectionInfos_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.DEVICE_CONNECTION_INFO> DeviceConnectionInfos {
      get { return deviceConnectionInfos_; }
    }

    /// <summary>Field number for the "LineID" field.</summary>
    public const int LineIDFieldNumber = 15;
    private string lineID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LineID {
      get { return lineID_; }
      set {
        lineID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AlarmHappen" field.</summary>
    public const int AlarmHappenFieldNumber = 16;
    private bool alarmHappen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AlarmHappen {
      get { return alarmHappen_; }
      set {
        alarmHappen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LINE_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LINE_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PLC != other.PLC) return false;
      if (Host != other.Host) return false;
      if (HostMode != other.HostMode) return false;
      if (TSCState != other.TSCState) return false;
      if (IMS != other.IMS) return false;
      if (CurrntVehicleModeAutoRemoteCount != other.CurrntVehicleModeAutoRemoteCount) return false;
      if (CurrntVehicleModeAutoLoaclCount != other.CurrntVehicleModeAutoLoaclCount) return false;
      if (CurrntVehicleStatusIdelCount != other.CurrntVehicleStatusIdelCount) return false;
      if (CurrntVehicleStatusErrorCount != other.CurrntVehicleStatusErrorCount) return false;
      if (CurrntCSTStatueTransferCount != other.CurrntCSTStatueTransferCount) return false;
      if (CurrntCSTStatueWaitingCount != other.CurrntCSTStatueWaitingCount) return false;
      if (CurrntHostCommandTransferStatueAssignedCount != other.CurrntHostCommandTransferStatueAssignedCount) return false;
      if (CurrntHostCommandTransferStatueWaitingCounr != other.CurrntHostCommandTransferStatueWaitingCounr) return false;
      if(!deviceConnectionInfos_.Equals(other.deviceConnectionInfos_)) return false;
      if (LineID != other.LineID) return false;
      if (AlarmHappen != other.AlarmHappen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PLC != 0) hash ^= PLC.GetHashCode();
      if (Host != 0) hash ^= Host.GetHashCode();
      if (HostMode != 0) hash ^= HostMode.GetHashCode();
      if (TSCState != 0) hash ^= TSCState.GetHashCode();
      if (IMS != 0) hash ^= IMS.GetHashCode();
      if (CurrntVehicleModeAutoRemoteCount != 0) hash ^= CurrntVehicleModeAutoRemoteCount.GetHashCode();
      if (CurrntVehicleModeAutoLoaclCount != 0) hash ^= CurrntVehicleModeAutoLoaclCount.GetHashCode();
      if (CurrntVehicleStatusIdelCount != 0) hash ^= CurrntVehicleStatusIdelCount.GetHashCode();
      if (CurrntVehicleStatusErrorCount != 0) hash ^= CurrntVehicleStatusErrorCount.GetHashCode();
      if (CurrntCSTStatueTransferCount != 0) hash ^= CurrntCSTStatueTransferCount.GetHashCode();
      if (CurrntCSTStatueWaitingCount != 0) hash ^= CurrntCSTStatueWaitingCount.GetHashCode();
      if (CurrntHostCommandTransferStatueAssignedCount != 0) hash ^= CurrntHostCommandTransferStatueAssignedCount.GetHashCode();
      if (CurrntHostCommandTransferStatueWaitingCounr != 0) hash ^= CurrntHostCommandTransferStatueWaitingCounr.GetHashCode();
      hash ^= deviceConnectionInfos_.GetHashCode();
      if (LineID.Length != 0) hash ^= LineID.GetHashCode();
      if (AlarmHappen != false) hash ^= AlarmHappen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PLC != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PLC);
      }
      if (Host != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Host);
      }
      if (HostMode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) HostMode);
      }
      if (TSCState != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TSCState);
      }
      if (IMS != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) IMS);
      }
      if (CurrntVehicleModeAutoRemoteCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrntVehicleModeAutoRemoteCount);
      }
      if (CurrntVehicleModeAutoLoaclCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurrntVehicleModeAutoLoaclCount);
      }
      if (CurrntVehicleStatusIdelCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrntVehicleStatusIdelCount);
      }
      if (CurrntVehicleStatusErrorCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurrntVehicleStatusErrorCount);
      }
      if (CurrntCSTStatueTransferCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurrntCSTStatueTransferCount);
      }
      if (CurrntCSTStatueWaitingCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrntCSTStatueWaitingCount);
      }
      if (CurrntHostCommandTransferStatueAssignedCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrntHostCommandTransferStatueAssignedCount);
      }
      if (CurrntHostCommandTransferStatueWaitingCounr != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrntHostCommandTransferStatueWaitingCounr);
      }
      deviceConnectionInfos_.WriteTo(output, _repeated_deviceConnectionInfos_codec);
      if (LineID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(LineID);
      }
      if (AlarmHappen != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AlarmHappen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PLC != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PLC);
      }
      if (Host != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Host);
      }
      if (HostMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HostMode);
      }
      if (TSCState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TSCState);
      }
      if (IMS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IMS);
      }
      if (CurrntVehicleModeAutoRemoteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntVehicleModeAutoRemoteCount);
      }
      if (CurrntVehicleModeAutoLoaclCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntVehicleModeAutoLoaclCount);
      }
      if (CurrntVehicleStatusIdelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntVehicleStatusIdelCount);
      }
      if (CurrntVehicleStatusErrorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntVehicleStatusErrorCount);
      }
      if (CurrntCSTStatueTransferCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntCSTStatueTransferCount);
      }
      if (CurrntCSTStatueWaitingCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntCSTStatueWaitingCount);
      }
      if (CurrntHostCommandTransferStatueAssignedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntHostCommandTransferStatueAssignedCount);
      }
      if (CurrntHostCommandTransferStatueWaitingCounr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrntHostCommandTransferStatueWaitingCounr);
      }
      size += deviceConnectionInfos_.CalculateSize(_repeated_deviceConnectionInfos_codec);
      if (LineID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LineID);
      }
      if (AlarmHappen != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LINE_INFO other) {
      if (other == null) {
        return;
      }
      if (other.PLC != 0) {
        PLC = other.PLC;
      }
      if (other.Host != 0) {
        Host = other.Host;
      }
      if (other.HostMode != 0) {
        HostMode = other.HostMode;
      }
      if (other.TSCState != 0) {
        TSCState = other.TSCState;
      }
      if (other.IMS != 0) {
        IMS = other.IMS;
      }
      if (other.CurrntVehicleModeAutoRemoteCount != 0) {
        CurrntVehicleModeAutoRemoteCount = other.CurrntVehicleModeAutoRemoteCount;
      }
      if (other.CurrntVehicleModeAutoLoaclCount != 0) {
        CurrntVehicleModeAutoLoaclCount = other.CurrntVehicleModeAutoLoaclCount;
      }
      if (other.CurrntVehicleStatusIdelCount != 0) {
        CurrntVehicleStatusIdelCount = other.CurrntVehicleStatusIdelCount;
      }
      if (other.CurrntVehicleStatusErrorCount != 0) {
        CurrntVehicleStatusErrorCount = other.CurrntVehicleStatusErrorCount;
      }
      if (other.CurrntCSTStatueTransferCount != 0) {
        CurrntCSTStatueTransferCount = other.CurrntCSTStatueTransferCount;
      }
      if (other.CurrntCSTStatueWaitingCount != 0) {
        CurrntCSTStatueWaitingCount = other.CurrntCSTStatueWaitingCount;
      }
      if (other.CurrntHostCommandTransferStatueAssignedCount != 0) {
        CurrntHostCommandTransferStatueAssignedCount = other.CurrntHostCommandTransferStatueAssignedCount;
      }
      if (other.CurrntHostCommandTransferStatueWaitingCounr != 0) {
        CurrntHostCommandTransferStatueWaitingCounr = other.CurrntHostCommandTransferStatueWaitingCounr;
      }
      deviceConnectionInfos_.Add(other.deviceConnectionInfos_);
      if (other.LineID.Length != 0) {
        LineID = other.LineID;
      }
      if (other.AlarmHappen != false) {
        AlarmHappen = other.AlarmHappen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pLC_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus) input.ReadEnum();
            break;
          }
          case 16: {
            host_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus) input.ReadEnum();
            break;
          }
          case 24: {
            hostMode_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.HostMode) input.ReadEnum();
            break;
          }
          case 32: {
            tSCState_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TSCState) input.ReadEnum();
            break;
          }
          case 40: {
            iMS_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.LinkStatus) input.ReadEnum();
            break;
          }
          case 48: {
            CurrntVehicleModeAutoRemoteCount = input.ReadInt32();
            break;
          }
          case 56: {
            CurrntVehicleModeAutoLoaclCount = input.ReadInt32();
            break;
          }
          case 64: {
            CurrntVehicleStatusIdelCount = input.ReadInt32();
            break;
          }
          case 72: {
            CurrntVehicleStatusErrorCount = input.ReadInt32();
            break;
          }
          case 80: {
            CurrntCSTStatueTransferCount = input.ReadInt32();
            break;
          }
          case 88: {
            CurrntCSTStatueWaitingCount = input.ReadInt32();
            break;
          }
          case 96: {
            CurrntHostCommandTransferStatueAssignedCount = input.ReadInt32();
            break;
          }
          case 104: {
            CurrntHostCommandTransferStatueWaitingCounr = input.ReadInt32();
            break;
          }
          case 114: {
            deviceConnectionInfos_.AddEntriesFrom(input, _repeated_deviceConnectionInfos_codec);
            break;
          }
          case 122: {
            LineID = input.ReadString();
            break;
          }
          case 128: {
            AlarmHappen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ONLINE_CHECK_INFO : pb::IMessage<ONLINE_CHECK_INFO> {
    private static readonly pb::MessageParser<ONLINE_CHECK_INFO> _parser = new pb::MessageParser<ONLINE_CHECK_INFO>(() => new ONLINE_CHECK_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ONLINE_CHECK_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ONLINE_CHECK_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ONLINE_CHECK_INFO(ONLINE_CHECK_INFO other) : this() {
      currentPortStateChecked_ = other.currentPortStateChecked_;
      currentStateChecked_ = other.currentStateChecked_;
      enhancedVehiclesChecked_ = other.enhancedVehiclesChecked_;
      tSCStateChecked_ = other.tSCStateChecked_;
      unitAlarmStateListChecked_ = other.unitAlarmStateListChecked_;
      enhancedTransfersChecked_ = other.enhancedTransfersChecked_;
      enhancedCarriersChecked_ = other.enhancedCarriersChecked_;
      currentPortTypesChecked_ = other.currentPortTypesChecked_;
      alarmSetChecked_ = other.alarmSetChecked_;
      currentEQPortStateChecked_ = other.currentEQPortStateChecked_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ONLINE_CHECK_INFO Clone() {
      return new ONLINE_CHECK_INFO(this);
    }

    /// <summary>Field number for the "CurrentPortStateChecked" field.</summary>
    public const int CurrentPortStateCheckedFieldNumber = 1;
    private bool currentPortStateChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurrentPortStateChecked {
      get { return currentPortStateChecked_; }
      set {
        currentPortStateChecked_ = value;
      }
    }

    /// <summary>Field number for the "CurrentStateChecked" field.</summary>
    public const int CurrentStateCheckedFieldNumber = 2;
    private bool currentStateChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurrentStateChecked {
      get { return currentStateChecked_; }
      set {
        currentStateChecked_ = value;
      }
    }

    /// <summary>Field number for the "EnhancedVehiclesChecked" field.</summary>
    public const int EnhancedVehiclesCheckedFieldNumber = 3;
    private bool enhancedVehiclesChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnhancedVehiclesChecked {
      get { return enhancedVehiclesChecked_; }
      set {
        enhancedVehiclesChecked_ = value;
      }
    }

    /// <summary>Field number for the "TSCStateChecked" field.</summary>
    public const int TSCStateCheckedFieldNumber = 4;
    private bool tSCStateChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TSCStateChecked {
      get { return tSCStateChecked_; }
      set {
        tSCStateChecked_ = value;
      }
    }

    /// <summary>Field number for the "UnitAlarmStateListChecked" field.</summary>
    public const int UnitAlarmStateListCheckedFieldNumber = 5;
    private bool unitAlarmStateListChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnitAlarmStateListChecked {
      get { return unitAlarmStateListChecked_; }
      set {
        unitAlarmStateListChecked_ = value;
      }
    }

    /// <summary>Field number for the "EnhancedTransfersChecked" field.</summary>
    public const int EnhancedTransfersCheckedFieldNumber = 6;
    private bool enhancedTransfersChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnhancedTransfersChecked {
      get { return enhancedTransfersChecked_; }
      set {
        enhancedTransfersChecked_ = value;
      }
    }

    /// <summary>Field number for the "EnhancedCarriersChecked" field.</summary>
    public const int EnhancedCarriersCheckedFieldNumber = 7;
    private bool enhancedCarriersChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnhancedCarriersChecked {
      get { return enhancedCarriersChecked_; }
      set {
        enhancedCarriersChecked_ = value;
      }
    }

    /// <summary>Field number for the "CurrentPortTypesChecked" field.</summary>
    public const int CurrentPortTypesCheckedFieldNumber = 8;
    private bool currentPortTypesChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurrentPortTypesChecked {
      get { return currentPortTypesChecked_; }
      set {
        currentPortTypesChecked_ = value;
      }
    }

    /// <summary>Field number for the "AlarmSetChecked" field.</summary>
    public const int AlarmSetCheckedFieldNumber = 9;
    private bool alarmSetChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AlarmSetChecked {
      get { return alarmSetChecked_; }
      set {
        alarmSetChecked_ = value;
      }
    }

    /// <summary>Field number for the "CurrentEQPortStateChecked" field.</summary>
    public const int CurrentEQPortStateCheckedFieldNumber = 10;
    private bool currentEQPortStateChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurrentEQPortStateChecked {
      get { return currentEQPortStateChecked_; }
      set {
        currentEQPortStateChecked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ONLINE_CHECK_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ONLINE_CHECK_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPortStateChecked != other.CurrentPortStateChecked) return false;
      if (CurrentStateChecked != other.CurrentStateChecked) return false;
      if (EnhancedVehiclesChecked != other.EnhancedVehiclesChecked) return false;
      if (TSCStateChecked != other.TSCStateChecked) return false;
      if (UnitAlarmStateListChecked != other.UnitAlarmStateListChecked) return false;
      if (EnhancedTransfersChecked != other.EnhancedTransfersChecked) return false;
      if (EnhancedCarriersChecked != other.EnhancedCarriersChecked) return false;
      if (CurrentPortTypesChecked != other.CurrentPortTypesChecked) return false;
      if (AlarmSetChecked != other.AlarmSetChecked) return false;
      if (CurrentEQPortStateChecked != other.CurrentEQPortStateChecked) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPortStateChecked != false) hash ^= CurrentPortStateChecked.GetHashCode();
      if (CurrentStateChecked != false) hash ^= CurrentStateChecked.GetHashCode();
      if (EnhancedVehiclesChecked != false) hash ^= EnhancedVehiclesChecked.GetHashCode();
      if (TSCStateChecked != false) hash ^= TSCStateChecked.GetHashCode();
      if (UnitAlarmStateListChecked != false) hash ^= UnitAlarmStateListChecked.GetHashCode();
      if (EnhancedTransfersChecked != false) hash ^= EnhancedTransfersChecked.GetHashCode();
      if (EnhancedCarriersChecked != false) hash ^= EnhancedCarriersChecked.GetHashCode();
      if (CurrentPortTypesChecked != false) hash ^= CurrentPortTypesChecked.GetHashCode();
      if (AlarmSetChecked != false) hash ^= AlarmSetChecked.GetHashCode();
      if (CurrentEQPortStateChecked != false) hash ^= CurrentEQPortStateChecked.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPortStateChecked != false) {
        output.WriteRawTag(8);
        output.WriteBool(CurrentPortStateChecked);
      }
      if (CurrentStateChecked != false) {
        output.WriteRawTag(16);
        output.WriteBool(CurrentStateChecked);
      }
      if (EnhancedVehiclesChecked != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnhancedVehiclesChecked);
      }
      if (TSCStateChecked != false) {
        output.WriteRawTag(32);
        output.WriteBool(TSCStateChecked);
      }
      if (UnitAlarmStateListChecked != false) {
        output.WriteRawTag(40);
        output.WriteBool(UnitAlarmStateListChecked);
      }
      if (EnhancedTransfersChecked != false) {
        output.WriteRawTag(48);
        output.WriteBool(EnhancedTransfersChecked);
      }
      if (EnhancedCarriersChecked != false) {
        output.WriteRawTag(56);
        output.WriteBool(EnhancedCarriersChecked);
      }
      if (CurrentPortTypesChecked != false) {
        output.WriteRawTag(64);
        output.WriteBool(CurrentPortTypesChecked);
      }
      if (AlarmSetChecked != false) {
        output.WriteRawTag(72);
        output.WriteBool(AlarmSetChecked);
      }
      if (CurrentEQPortStateChecked != false) {
        output.WriteRawTag(80);
        output.WriteBool(CurrentEQPortStateChecked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPortStateChecked != false) {
        size += 1 + 1;
      }
      if (CurrentStateChecked != false) {
        size += 1 + 1;
      }
      if (EnhancedVehiclesChecked != false) {
        size += 1 + 1;
      }
      if (TSCStateChecked != false) {
        size += 1 + 1;
      }
      if (UnitAlarmStateListChecked != false) {
        size += 1 + 1;
      }
      if (EnhancedTransfersChecked != false) {
        size += 1 + 1;
      }
      if (EnhancedCarriersChecked != false) {
        size += 1 + 1;
      }
      if (CurrentPortTypesChecked != false) {
        size += 1 + 1;
      }
      if (AlarmSetChecked != false) {
        size += 1 + 1;
      }
      if (CurrentEQPortStateChecked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ONLINE_CHECK_INFO other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPortStateChecked != false) {
        CurrentPortStateChecked = other.CurrentPortStateChecked;
      }
      if (other.CurrentStateChecked != false) {
        CurrentStateChecked = other.CurrentStateChecked;
      }
      if (other.EnhancedVehiclesChecked != false) {
        EnhancedVehiclesChecked = other.EnhancedVehiclesChecked;
      }
      if (other.TSCStateChecked != false) {
        TSCStateChecked = other.TSCStateChecked;
      }
      if (other.UnitAlarmStateListChecked != false) {
        UnitAlarmStateListChecked = other.UnitAlarmStateListChecked;
      }
      if (other.EnhancedTransfersChecked != false) {
        EnhancedTransfersChecked = other.EnhancedTransfersChecked;
      }
      if (other.EnhancedCarriersChecked != false) {
        EnhancedCarriersChecked = other.EnhancedCarriersChecked;
      }
      if (other.CurrentPortTypesChecked != false) {
        CurrentPortTypesChecked = other.CurrentPortTypesChecked;
      }
      if (other.AlarmSetChecked != false) {
        AlarmSetChecked = other.AlarmSetChecked;
      }
      if (other.CurrentEQPortStateChecked != false) {
        CurrentEQPortStateChecked = other.CurrentEQPortStateChecked;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPortStateChecked = input.ReadBool();
            break;
          }
          case 16: {
            CurrentStateChecked = input.ReadBool();
            break;
          }
          case 24: {
            EnhancedVehiclesChecked = input.ReadBool();
            break;
          }
          case 32: {
            TSCStateChecked = input.ReadBool();
            break;
          }
          case 40: {
            UnitAlarmStateListChecked = input.ReadBool();
            break;
          }
          case 48: {
            EnhancedTransfersChecked = input.ReadBool();
            break;
          }
          case 56: {
            EnhancedCarriersChecked = input.ReadBool();
            break;
          }
          case 64: {
            CurrentPortTypesChecked = input.ReadBool();
            break;
          }
          case 72: {
            AlarmSetChecked = input.ReadBool();
            break;
          }
          case 80: {
            CurrentEQPortStateChecked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PING_CHECK_INFO : pb::IMessage<PING_CHECK_INFO> {
    private static readonly pb::MessageParser<PING_CHECK_INFO> _parser = new pb::MessageParser<PING_CHECK_INFO>(() => new PING_CHECK_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PING_CHECK_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PING_CHECK_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PING_CHECK_INFO(PING_CHECK_INFO other) : this() {
      mCSConnectionSuccess_ = other.mCSConnectionSuccess_;
      routerConnectionSuccess_ = other.routerConnectionSuccess_;
      oHT1ConnectionSuccess_ = other.oHT1ConnectionSuccess_;
      oHT2ConnectionSuccess_ = other.oHT2ConnectionSuccess_;
      oHT3ConnectionSuccess_ = other.oHT3ConnectionSuccess_;
      oHT4ConnectionSuccess_ = other.oHT4ConnectionSuccess_;
      oHT5ConnectionSuccess_ = other.oHT5ConnectionSuccess_;
      oHT6ConnectionSuccess_ = other.oHT6ConnectionSuccess_;
      oHT7ConnectionSuccess_ = other.oHT7ConnectionSuccess_;
      oHT8ConnectionSuccess_ = other.oHT8ConnectionSuccess_;
      oHT9ConnectionSuccess_ = other.oHT9ConnectionSuccess_;
      oHT10ConnectionSuccess_ = other.oHT10ConnectionSuccess_;
      oHT11ConnectionSuccess_ = other.oHT11ConnectionSuccess_;
      oHT12ConnectionSuccess_ = other.oHT12ConnectionSuccess_;
      oHT13ConnectionSuccess_ = other.oHT13ConnectionSuccess_;
      oHT14ConnectionSuccess_ = other.oHT14ConnectionSuccess_;
      mTLConnectionSuccess_ = other.mTLConnectionSuccess_;
      mTSConnectionSuccess_ = other.mTSConnectionSuccess_;
      mTS2ConnectionSuccess_ = other.mTS2ConnectionSuccess_;
      hID1ConnectionSuccess_ = other.hID1ConnectionSuccess_;
      hID2ConnectionSuccess_ = other.hID2ConnectionSuccess_;
      hID3ConnectionSuccess_ = other.hID3ConnectionSuccess_;
      hID4ConnectionSuccess_ = other.hID4ConnectionSuccess_;
      adam1ConnectionSuccess_ = other.adam1ConnectionSuccess_;
      adam2ConnectionSuccess_ = other.adam2ConnectionSuccess_;
      adam3ConnectionSuccess_ = other.adam3ConnectionSuccess_;
      adam4ConnectionSuccess_ = other.adam4ConnectionSuccess_;
      aP1ConnectionSuccess_ = other.aP1ConnectionSuccess_;
      aP2ConnectionSuccess_ = other.aP2ConnectionSuccess_;
      aP3ConnectionSuccess_ = other.aP3ConnectionSuccess_;
      aP4ConnectionSuccess_ = other.aP4ConnectionSuccess_;
      aP5ConnectionSuccess_ = other.aP5ConnectionSuccess_;
      aP6ConnectionSuccess_ = other.aP6ConnectionSuccess_;
      aP7ConnectionSuccess_ = other.aP7ConnectionSuccess_;
      aP8ConnectionSuccess_ = other.aP8ConnectionSuccess_;
      aP9ConnectionSuccess_ = other.aP9ConnectionSuccess_;
      aP10ConnectionSuccess_ = other.aP10ConnectionSuccess_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PING_CHECK_INFO Clone() {
      return new PING_CHECK_INFO(this);
    }

    /// <summary>Field number for the "MCSConnectionSuccess" field.</summary>
    public const int MCSConnectionSuccessFieldNumber = 1;
    private bool mCSConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MCSConnectionSuccess {
      get { return mCSConnectionSuccess_; }
      set {
        mCSConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "RouterConnectionSuccess" field.</summary>
    public const int RouterConnectionSuccessFieldNumber = 2;
    private bool routerConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RouterConnectionSuccess {
      get { return routerConnectionSuccess_; }
      set {
        routerConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT1ConnectionSuccess" field.</summary>
    public const int OHT1ConnectionSuccessFieldNumber = 3;
    private bool oHT1ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT1ConnectionSuccess {
      get { return oHT1ConnectionSuccess_; }
      set {
        oHT1ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT2ConnectionSuccess" field.</summary>
    public const int OHT2ConnectionSuccessFieldNumber = 4;
    private bool oHT2ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT2ConnectionSuccess {
      get { return oHT2ConnectionSuccess_; }
      set {
        oHT2ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT3ConnectionSuccess" field.</summary>
    public const int OHT3ConnectionSuccessFieldNumber = 5;
    private bool oHT3ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT3ConnectionSuccess {
      get { return oHT3ConnectionSuccess_; }
      set {
        oHT3ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT4ConnectionSuccess" field.</summary>
    public const int OHT4ConnectionSuccessFieldNumber = 6;
    private bool oHT4ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT4ConnectionSuccess {
      get { return oHT4ConnectionSuccess_; }
      set {
        oHT4ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT5ConnectionSuccess" field.</summary>
    public const int OHT5ConnectionSuccessFieldNumber = 7;
    private bool oHT5ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT5ConnectionSuccess {
      get { return oHT5ConnectionSuccess_; }
      set {
        oHT5ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT6ConnectionSuccess" field.</summary>
    public const int OHT6ConnectionSuccessFieldNumber = 8;
    private bool oHT6ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT6ConnectionSuccess {
      get { return oHT6ConnectionSuccess_; }
      set {
        oHT6ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT7ConnectionSuccess" field.</summary>
    public const int OHT7ConnectionSuccessFieldNumber = 9;
    private bool oHT7ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT7ConnectionSuccess {
      get { return oHT7ConnectionSuccess_; }
      set {
        oHT7ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT8ConnectionSuccess" field.</summary>
    public const int OHT8ConnectionSuccessFieldNumber = 10;
    private bool oHT8ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT8ConnectionSuccess {
      get { return oHT8ConnectionSuccess_; }
      set {
        oHT8ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT9ConnectionSuccess" field.</summary>
    public const int OHT9ConnectionSuccessFieldNumber = 11;
    private bool oHT9ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT9ConnectionSuccess {
      get { return oHT9ConnectionSuccess_; }
      set {
        oHT9ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT10ConnectionSuccess" field.</summary>
    public const int OHT10ConnectionSuccessFieldNumber = 12;
    private bool oHT10ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT10ConnectionSuccess {
      get { return oHT10ConnectionSuccess_; }
      set {
        oHT10ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT11ConnectionSuccess" field.</summary>
    public const int OHT11ConnectionSuccessFieldNumber = 13;
    private bool oHT11ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT11ConnectionSuccess {
      get { return oHT11ConnectionSuccess_; }
      set {
        oHT11ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT12ConnectionSuccess" field.</summary>
    public const int OHT12ConnectionSuccessFieldNumber = 14;
    private bool oHT12ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT12ConnectionSuccess {
      get { return oHT12ConnectionSuccess_; }
      set {
        oHT12ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT13ConnectionSuccess" field.</summary>
    public const int OHT13ConnectionSuccessFieldNumber = 15;
    private bool oHT13ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT13ConnectionSuccess {
      get { return oHT13ConnectionSuccess_; }
      set {
        oHT13ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "OHT14ConnectionSuccess" field.</summary>
    public const int OHT14ConnectionSuccessFieldNumber = 16;
    private bool oHT14ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OHT14ConnectionSuccess {
      get { return oHT14ConnectionSuccess_; }
      set {
        oHT14ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "MTLConnectionSuccess" field.</summary>
    public const int MTLConnectionSuccessFieldNumber = 17;
    private bool mTLConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MTLConnectionSuccess {
      get { return mTLConnectionSuccess_; }
      set {
        mTLConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "MTSConnectionSuccess" field.</summary>
    public const int MTSConnectionSuccessFieldNumber = 18;
    private bool mTSConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MTSConnectionSuccess {
      get { return mTSConnectionSuccess_; }
      set {
        mTSConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "MTS2ConnectionSuccess" field.</summary>
    public const int MTS2ConnectionSuccessFieldNumber = 19;
    private bool mTS2ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MTS2ConnectionSuccess {
      get { return mTS2ConnectionSuccess_; }
      set {
        mTS2ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "HID1ConnectionSuccess" field.</summary>
    public const int HID1ConnectionSuccessFieldNumber = 20;
    private bool hID1ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HID1ConnectionSuccess {
      get { return hID1ConnectionSuccess_; }
      set {
        hID1ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "HID2ConnectionSuccess" field.</summary>
    public const int HID2ConnectionSuccessFieldNumber = 21;
    private bool hID2ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HID2ConnectionSuccess {
      get { return hID2ConnectionSuccess_; }
      set {
        hID2ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "HID3ConnectionSuccess" field.</summary>
    public const int HID3ConnectionSuccessFieldNumber = 22;
    private bool hID3ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HID3ConnectionSuccess {
      get { return hID3ConnectionSuccess_; }
      set {
        hID3ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "HID4ConnectionSuccess" field.</summary>
    public const int HID4ConnectionSuccessFieldNumber = 23;
    private bool hID4ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HID4ConnectionSuccess {
      get { return hID4ConnectionSuccess_; }
      set {
        hID4ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "Adam1ConnectionSuccess" field.</summary>
    public const int Adam1ConnectionSuccessFieldNumber = 24;
    private bool adam1ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Adam1ConnectionSuccess {
      get { return adam1ConnectionSuccess_; }
      set {
        adam1ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "Adam2ConnectionSuccess" field.</summary>
    public const int Adam2ConnectionSuccessFieldNumber = 25;
    private bool adam2ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Adam2ConnectionSuccess {
      get { return adam2ConnectionSuccess_; }
      set {
        adam2ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "Adam3ConnectionSuccess" field.</summary>
    public const int Adam3ConnectionSuccessFieldNumber = 26;
    private bool adam3ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Adam3ConnectionSuccess {
      get { return adam3ConnectionSuccess_; }
      set {
        adam3ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "Adam4ConnectionSuccess" field.</summary>
    public const int Adam4ConnectionSuccessFieldNumber = 27;
    private bool adam4ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Adam4ConnectionSuccess {
      get { return adam4ConnectionSuccess_; }
      set {
        adam4ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP1ConnectionSuccess" field.</summary>
    public const int AP1ConnectionSuccessFieldNumber = 28;
    private bool aP1ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP1ConnectionSuccess {
      get { return aP1ConnectionSuccess_; }
      set {
        aP1ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP2ConnectionSuccess" field.</summary>
    public const int AP2ConnectionSuccessFieldNumber = 29;
    private bool aP2ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP2ConnectionSuccess {
      get { return aP2ConnectionSuccess_; }
      set {
        aP2ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP3ConnectionSuccess" field.</summary>
    public const int AP3ConnectionSuccessFieldNumber = 30;
    private bool aP3ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP3ConnectionSuccess {
      get { return aP3ConnectionSuccess_; }
      set {
        aP3ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP4ConnectionSuccess" field.</summary>
    public const int AP4ConnectionSuccessFieldNumber = 31;
    private bool aP4ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP4ConnectionSuccess {
      get { return aP4ConnectionSuccess_; }
      set {
        aP4ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP5ConnectionSuccess" field.</summary>
    public const int AP5ConnectionSuccessFieldNumber = 32;
    private bool aP5ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP5ConnectionSuccess {
      get { return aP5ConnectionSuccess_; }
      set {
        aP5ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP6ConnectionSuccess" field.</summary>
    public const int AP6ConnectionSuccessFieldNumber = 33;
    private bool aP6ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP6ConnectionSuccess {
      get { return aP6ConnectionSuccess_; }
      set {
        aP6ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP7ConnectionSuccess" field.</summary>
    public const int AP7ConnectionSuccessFieldNumber = 34;
    private bool aP7ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP7ConnectionSuccess {
      get { return aP7ConnectionSuccess_; }
      set {
        aP7ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP8ConnectionSuccess" field.</summary>
    public const int AP8ConnectionSuccessFieldNumber = 35;
    private bool aP8ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP8ConnectionSuccess {
      get { return aP8ConnectionSuccess_; }
      set {
        aP8ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP9ConnectionSuccess" field.</summary>
    public const int AP9ConnectionSuccessFieldNumber = 36;
    private bool aP9ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP9ConnectionSuccess {
      get { return aP9ConnectionSuccess_; }
      set {
        aP9ConnectionSuccess_ = value;
      }
    }

    /// <summary>Field number for the "AP10ConnectionSuccess" field.</summary>
    public const int AP10ConnectionSuccessFieldNumber = 37;
    private bool aP10ConnectionSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AP10ConnectionSuccess {
      get { return aP10ConnectionSuccess_; }
      set {
        aP10ConnectionSuccess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PING_CHECK_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PING_CHECK_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MCSConnectionSuccess != other.MCSConnectionSuccess) return false;
      if (RouterConnectionSuccess != other.RouterConnectionSuccess) return false;
      if (OHT1ConnectionSuccess != other.OHT1ConnectionSuccess) return false;
      if (OHT2ConnectionSuccess != other.OHT2ConnectionSuccess) return false;
      if (OHT3ConnectionSuccess != other.OHT3ConnectionSuccess) return false;
      if (OHT4ConnectionSuccess != other.OHT4ConnectionSuccess) return false;
      if (OHT5ConnectionSuccess != other.OHT5ConnectionSuccess) return false;
      if (OHT6ConnectionSuccess != other.OHT6ConnectionSuccess) return false;
      if (OHT7ConnectionSuccess != other.OHT7ConnectionSuccess) return false;
      if (OHT8ConnectionSuccess != other.OHT8ConnectionSuccess) return false;
      if (OHT9ConnectionSuccess != other.OHT9ConnectionSuccess) return false;
      if (OHT10ConnectionSuccess != other.OHT10ConnectionSuccess) return false;
      if (OHT11ConnectionSuccess != other.OHT11ConnectionSuccess) return false;
      if (OHT12ConnectionSuccess != other.OHT12ConnectionSuccess) return false;
      if (OHT13ConnectionSuccess != other.OHT13ConnectionSuccess) return false;
      if (OHT14ConnectionSuccess != other.OHT14ConnectionSuccess) return false;
      if (MTLConnectionSuccess != other.MTLConnectionSuccess) return false;
      if (MTSConnectionSuccess != other.MTSConnectionSuccess) return false;
      if (MTS2ConnectionSuccess != other.MTS2ConnectionSuccess) return false;
      if (HID1ConnectionSuccess != other.HID1ConnectionSuccess) return false;
      if (HID2ConnectionSuccess != other.HID2ConnectionSuccess) return false;
      if (HID3ConnectionSuccess != other.HID3ConnectionSuccess) return false;
      if (HID4ConnectionSuccess != other.HID4ConnectionSuccess) return false;
      if (Adam1ConnectionSuccess != other.Adam1ConnectionSuccess) return false;
      if (Adam2ConnectionSuccess != other.Adam2ConnectionSuccess) return false;
      if (Adam3ConnectionSuccess != other.Adam3ConnectionSuccess) return false;
      if (Adam4ConnectionSuccess != other.Adam4ConnectionSuccess) return false;
      if (AP1ConnectionSuccess != other.AP1ConnectionSuccess) return false;
      if (AP2ConnectionSuccess != other.AP2ConnectionSuccess) return false;
      if (AP3ConnectionSuccess != other.AP3ConnectionSuccess) return false;
      if (AP4ConnectionSuccess != other.AP4ConnectionSuccess) return false;
      if (AP5ConnectionSuccess != other.AP5ConnectionSuccess) return false;
      if (AP6ConnectionSuccess != other.AP6ConnectionSuccess) return false;
      if (AP7ConnectionSuccess != other.AP7ConnectionSuccess) return false;
      if (AP8ConnectionSuccess != other.AP8ConnectionSuccess) return false;
      if (AP9ConnectionSuccess != other.AP9ConnectionSuccess) return false;
      if (AP10ConnectionSuccess != other.AP10ConnectionSuccess) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MCSConnectionSuccess != false) hash ^= MCSConnectionSuccess.GetHashCode();
      if (RouterConnectionSuccess != false) hash ^= RouterConnectionSuccess.GetHashCode();
      if (OHT1ConnectionSuccess != false) hash ^= OHT1ConnectionSuccess.GetHashCode();
      if (OHT2ConnectionSuccess != false) hash ^= OHT2ConnectionSuccess.GetHashCode();
      if (OHT3ConnectionSuccess != false) hash ^= OHT3ConnectionSuccess.GetHashCode();
      if (OHT4ConnectionSuccess != false) hash ^= OHT4ConnectionSuccess.GetHashCode();
      if (OHT5ConnectionSuccess != false) hash ^= OHT5ConnectionSuccess.GetHashCode();
      if (OHT6ConnectionSuccess != false) hash ^= OHT6ConnectionSuccess.GetHashCode();
      if (OHT7ConnectionSuccess != false) hash ^= OHT7ConnectionSuccess.GetHashCode();
      if (OHT8ConnectionSuccess != false) hash ^= OHT8ConnectionSuccess.GetHashCode();
      if (OHT9ConnectionSuccess != false) hash ^= OHT9ConnectionSuccess.GetHashCode();
      if (OHT10ConnectionSuccess != false) hash ^= OHT10ConnectionSuccess.GetHashCode();
      if (OHT11ConnectionSuccess != false) hash ^= OHT11ConnectionSuccess.GetHashCode();
      if (OHT12ConnectionSuccess != false) hash ^= OHT12ConnectionSuccess.GetHashCode();
      if (OHT13ConnectionSuccess != false) hash ^= OHT13ConnectionSuccess.GetHashCode();
      if (OHT14ConnectionSuccess != false) hash ^= OHT14ConnectionSuccess.GetHashCode();
      if (MTLConnectionSuccess != false) hash ^= MTLConnectionSuccess.GetHashCode();
      if (MTSConnectionSuccess != false) hash ^= MTSConnectionSuccess.GetHashCode();
      if (MTS2ConnectionSuccess != false) hash ^= MTS2ConnectionSuccess.GetHashCode();
      if (HID1ConnectionSuccess != false) hash ^= HID1ConnectionSuccess.GetHashCode();
      if (HID2ConnectionSuccess != false) hash ^= HID2ConnectionSuccess.GetHashCode();
      if (HID3ConnectionSuccess != false) hash ^= HID3ConnectionSuccess.GetHashCode();
      if (HID4ConnectionSuccess != false) hash ^= HID4ConnectionSuccess.GetHashCode();
      if (Adam1ConnectionSuccess != false) hash ^= Adam1ConnectionSuccess.GetHashCode();
      if (Adam2ConnectionSuccess != false) hash ^= Adam2ConnectionSuccess.GetHashCode();
      if (Adam3ConnectionSuccess != false) hash ^= Adam3ConnectionSuccess.GetHashCode();
      if (Adam4ConnectionSuccess != false) hash ^= Adam4ConnectionSuccess.GetHashCode();
      if (AP1ConnectionSuccess != false) hash ^= AP1ConnectionSuccess.GetHashCode();
      if (AP2ConnectionSuccess != false) hash ^= AP2ConnectionSuccess.GetHashCode();
      if (AP3ConnectionSuccess != false) hash ^= AP3ConnectionSuccess.GetHashCode();
      if (AP4ConnectionSuccess != false) hash ^= AP4ConnectionSuccess.GetHashCode();
      if (AP5ConnectionSuccess != false) hash ^= AP5ConnectionSuccess.GetHashCode();
      if (AP6ConnectionSuccess != false) hash ^= AP6ConnectionSuccess.GetHashCode();
      if (AP7ConnectionSuccess != false) hash ^= AP7ConnectionSuccess.GetHashCode();
      if (AP8ConnectionSuccess != false) hash ^= AP8ConnectionSuccess.GetHashCode();
      if (AP9ConnectionSuccess != false) hash ^= AP9ConnectionSuccess.GetHashCode();
      if (AP10ConnectionSuccess != false) hash ^= AP10ConnectionSuccess.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MCSConnectionSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(MCSConnectionSuccess);
      }
      if (RouterConnectionSuccess != false) {
        output.WriteRawTag(16);
        output.WriteBool(RouterConnectionSuccess);
      }
      if (OHT1ConnectionSuccess != false) {
        output.WriteRawTag(24);
        output.WriteBool(OHT1ConnectionSuccess);
      }
      if (OHT2ConnectionSuccess != false) {
        output.WriteRawTag(32);
        output.WriteBool(OHT2ConnectionSuccess);
      }
      if (OHT3ConnectionSuccess != false) {
        output.WriteRawTag(40);
        output.WriteBool(OHT3ConnectionSuccess);
      }
      if (OHT4ConnectionSuccess != false) {
        output.WriteRawTag(48);
        output.WriteBool(OHT4ConnectionSuccess);
      }
      if (OHT5ConnectionSuccess != false) {
        output.WriteRawTag(56);
        output.WriteBool(OHT5ConnectionSuccess);
      }
      if (OHT6ConnectionSuccess != false) {
        output.WriteRawTag(64);
        output.WriteBool(OHT6ConnectionSuccess);
      }
      if (OHT7ConnectionSuccess != false) {
        output.WriteRawTag(72);
        output.WriteBool(OHT7ConnectionSuccess);
      }
      if (OHT8ConnectionSuccess != false) {
        output.WriteRawTag(80);
        output.WriteBool(OHT8ConnectionSuccess);
      }
      if (OHT9ConnectionSuccess != false) {
        output.WriteRawTag(88);
        output.WriteBool(OHT9ConnectionSuccess);
      }
      if (OHT10ConnectionSuccess != false) {
        output.WriteRawTag(96);
        output.WriteBool(OHT10ConnectionSuccess);
      }
      if (OHT11ConnectionSuccess != false) {
        output.WriteRawTag(104);
        output.WriteBool(OHT11ConnectionSuccess);
      }
      if (OHT12ConnectionSuccess != false) {
        output.WriteRawTag(112);
        output.WriteBool(OHT12ConnectionSuccess);
      }
      if (OHT13ConnectionSuccess != false) {
        output.WriteRawTag(120);
        output.WriteBool(OHT13ConnectionSuccess);
      }
      if (OHT14ConnectionSuccess != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OHT14ConnectionSuccess);
      }
      if (MTLConnectionSuccess != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MTLConnectionSuccess);
      }
      if (MTSConnectionSuccess != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(MTSConnectionSuccess);
      }
      if (MTS2ConnectionSuccess != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(MTS2ConnectionSuccess);
      }
      if (HID1ConnectionSuccess != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HID1ConnectionSuccess);
      }
      if (HID2ConnectionSuccess != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(HID2ConnectionSuccess);
      }
      if (HID3ConnectionSuccess != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(HID3ConnectionSuccess);
      }
      if (HID4ConnectionSuccess != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(HID4ConnectionSuccess);
      }
      if (Adam1ConnectionSuccess != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Adam1ConnectionSuccess);
      }
      if (Adam2ConnectionSuccess != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Adam2ConnectionSuccess);
      }
      if (Adam3ConnectionSuccess != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Adam3ConnectionSuccess);
      }
      if (Adam4ConnectionSuccess != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Adam4ConnectionSuccess);
      }
      if (AP1ConnectionSuccess != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(AP1ConnectionSuccess);
      }
      if (AP2ConnectionSuccess != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(AP2ConnectionSuccess);
      }
      if (AP3ConnectionSuccess != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(AP3ConnectionSuccess);
      }
      if (AP4ConnectionSuccess != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(AP4ConnectionSuccess);
      }
      if (AP5ConnectionSuccess != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(AP5ConnectionSuccess);
      }
      if (AP6ConnectionSuccess != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(AP6ConnectionSuccess);
      }
      if (AP7ConnectionSuccess != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(AP7ConnectionSuccess);
      }
      if (AP8ConnectionSuccess != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(AP8ConnectionSuccess);
      }
      if (AP9ConnectionSuccess != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(AP9ConnectionSuccess);
      }
      if (AP10ConnectionSuccess != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AP10ConnectionSuccess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MCSConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (RouterConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT1ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT2ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT3ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT4ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT5ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT6ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT7ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT8ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT9ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT10ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT11ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT12ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT13ConnectionSuccess != false) {
        size += 1 + 1;
      }
      if (OHT14ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (MTLConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (MTSConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (MTS2ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (HID1ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (HID2ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (HID3ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (HID4ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (Adam1ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (Adam2ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (Adam3ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (Adam4ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP1ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP2ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP3ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP4ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP5ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP6ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP7ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP8ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP9ConnectionSuccess != false) {
        size += 2 + 1;
      }
      if (AP10ConnectionSuccess != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PING_CHECK_INFO other) {
      if (other == null) {
        return;
      }
      if (other.MCSConnectionSuccess != false) {
        MCSConnectionSuccess = other.MCSConnectionSuccess;
      }
      if (other.RouterConnectionSuccess != false) {
        RouterConnectionSuccess = other.RouterConnectionSuccess;
      }
      if (other.OHT1ConnectionSuccess != false) {
        OHT1ConnectionSuccess = other.OHT1ConnectionSuccess;
      }
      if (other.OHT2ConnectionSuccess != false) {
        OHT2ConnectionSuccess = other.OHT2ConnectionSuccess;
      }
      if (other.OHT3ConnectionSuccess != false) {
        OHT3ConnectionSuccess = other.OHT3ConnectionSuccess;
      }
      if (other.OHT4ConnectionSuccess != false) {
        OHT4ConnectionSuccess = other.OHT4ConnectionSuccess;
      }
      if (other.OHT5ConnectionSuccess != false) {
        OHT5ConnectionSuccess = other.OHT5ConnectionSuccess;
      }
      if (other.OHT6ConnectionSuccess != false) {
        OHT6ConnectionSuccess = other.OHT6ConnectionSuccess;
      }
      if (other.OHT7ConnectionSuccess != false) {
        OHT7ConnectionSuccess = other.OHT7ConnectionSuccess;
      }
      if (other.OHT8ConnectionSuccess != false) {
        OHT8ConnectionSuccess = other.OHT8ConnectionSuccess;
      }
      if (other.OHT9ConnectionSuccess != false) {
        OHT9ConnectionSuccess = other.OHT9ConnectionSuccess;
      }
      if (other.OHT10ConnectionSuccess != false) {
        OHT10ConnectionSuccess = other.OHT10ConnectionSuccess;
      }
      if (other.OHT11ConnectionSuccess != false) {
        OHT11ConnectionSuccess = other.OHT11ConnectionSuccess;
      }
      if (other.OHT12ConnectionSuccess != false) {
        OHT12ConnectionSuccess = other.OHT12ConnectionSuccess;
      }
      if (other.OHT13ConnectionSuccess != false) {
        OHT13ConnectionSuccess = other.OHT13ConnectionSuccess;
      }
      if (other.OHT14ConnectionSuccess != false) {
        OHT14ConnectionSuccess = other.OHT14ConnectionSuccess;
      }
      if (other.MTLConnectionSuccess != false) {
        MTLConnectionSuccess = other.MTLConnectionSuccess;
      }
      if (other.MTSConnectionSuccess != false) {
        MTSConnectionSuccess = other.MTSConnectionSuccess;
      }
      if (other.MTS2ConnectionSuccess != false) {
        MTS2ConnectionSuccess = other.MTS2ConnectionSuccess;
      }
      if (other.HID1ConnectionSuccess != false) {
        HID1ConnectionSuccess = other.HID1ConnectionSuccess;
      }
      if (other.HID2ConnectionSuccess != false) {
        HID2ConnectionSuccess = other.HID2ConnectionSuccess;
      }
      if (other.HID3ConnectionSuccess != false) {
        HID3ConnectionSuccess = other.HID3ConnectionSuccess;
      }
      if (other.HID4ConnectionSuccess != false) {
        HID4ConnectionSuccess = other.HID4ConnectionSuccess;
      }
      if (other.Adam1ConnectionSuccess != false) {
        Adam1ConnectionSuccess = other.Adam1ConnectionSuccess;
      }
      if (other.Adam2ConnectionSuccess != false) {
        Adam2ConnectionSuccess = other.Adam2ConnectionSuccess;
      }
      if (other.Adam3ConnectionSuccess != false) {
        Adam3ConnectionSuccess = other.Adam3ConnectionSuccess;
      }
      if (other.Adam4ConnectionSuccess != false) {
        Adam4ConnectionSuccess = other.Adam4ConnectionSuccess;
      }
      if (other.AP1ConnectionSuccess != false) {
        AP1ConnectionSuccess = other.AP1ConnectionSuccess;
      }
      if (other.AP2ConnectionSuccess != false) {
        AP2ConnectionSuccess = other.AP2ConnectionSuccess;
      }
      if (other.AP3ConnectionSuccess != false) {
        AP3ConnectionSuccess = other.AP3ConnectionSuccess;
      }
      if (other.AP4ConnectionSuccess != false) {
        AP4ConnectionSuccess = other.AP4ConnectionSuccess;
      }
      if (other.AP5ConnectionSuccess != false) {
        AP5ConnectionSuccess = other.AP5ConnectionSuccess;
      }
      if (other.AP6ConnectionSuccess != false) {
        AP6ConnectionSuccess = other.AP6ConnectionSuccess;
      }
      if (other.AP7ConnectionSuccess != false) {
        AP7ConnectionSuccess = other.AP7ConnectionSuccess;
      }
      if (other.AP8ConnectionSuccess != false) {
        AP8ConnectionSuccess = other.AP8ConnectionSuccess;
      }
      if (other.AP9ConnectionSuccess != false) {
        AP9ConnectionSuccess = other.AP9ConnectionSuccess;
      }
      if (other.AP10ConnectionSuccess != false) {
        AP10ConnectionSuccess = other.AP10ConnectionSuccess;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MCSConnectionSuccess = input.ReadBool();
            break;
          }
          case 16: {
            RouterConnectionSuccess = input.ReadBool();
            break;
          }
          case 24: {
            OHT1ConnectionSuccess = input.ReadBool();
            break;
          }
          case 32: {
            OHT2ConnectionSuccess = input.ReadBool();
            break;
          }
          case 40: {
            OHT3ConnectionSuccess = input.ReadBool();
            break;
          }
          case 48: {
            OHT4ConnectionSuccess = input.ReadBool();
            break;
          }
          case 56: {
            OHT5ConnectionSuccess = input.ReadBool();
            break;
          }
          case 64: {
            OHT6ConnectionSuccess = input.ReadBool();
            break;
          }
          case 72: {
            OHT7ConnectionSuccess = input.ReadBool();
            break;
          }
          case 80: {
            OHT8ConnectionSuccess = input.ReadBool();
            break;
          }
          case 88: {
            OHT9ConnectionSuccess = input.ReadBool();
            break;
          }
          case 96: {
            OHT10ConnectionSuccess = input.ReadBool();
            break;
          }
          case 104: {
            OHT11ConnectionSuccess = input.ReadBool();
            break;
          }
          case 112: {
            OHT12ConnectionSuccess = input.ReadBool();
            break;
          }
          case 120: {
            OHT13ConnectionSuccess = input.ReadBool();
            break;
          }
          case 128: {
            OHT14ConnectionSuccess = input.ReadBool();
            break;
          }
          case 136: {
            MTLConnectionSuccess = input.ReadBool();
            break;
          }
          case 144: {
            MTSConnectionSuccess = input.ReadBool();
            break;
          }
          case 152: {
            MTS2ConnectionSuccess = input.ReadBool();
            break;
          }
          case 160: {
            HID1ConnectionSuccess = input.ReadBool();
            break;
          }
          case 168: {
            HID2ConnectionSuccess = input.ReadBool();
            break;
          }
          case 176: {
            HID3ConnectionSuccess = input.ReadBool();
            break;
          }
          case 184: {
            HID4ConnectionSuccess = input.ReadBool();
            break;
          }
          case 192: {
            Adam1ConnectionSuccess = input.ReadBool();
            break;
          }
          case 200: {
            Adam2ConnectionSuccess = input.ReadBool();
            break;
          }
          case 208: {
            Adam3ConnectionSuccess = input.ReadBool();
            break;
          }
          case 216: {
            Adam4ConnectionSuccess = input.ReadBool();
            break;
          }
          case 224: {
            AP1ConnectionSuccess = input.ReadBool();
            break;
          }
          case 232: {
            AP2ConnectionSuccess = input.ReadBool();
            break;
          }
          case 240: {
            AP3ConnectionSuccess = input.ReadBool();
            break;
          }
          case 248: {
            AP4ConnectionSuccess = input.ReadBool();
            break;
          }
          case 256: {
            AP5ConnectionSuccess = input.ReadBool();
            break;
          }
          case 264: {
            AP6ConnectionSuccess = input.ReadBool();
            break;
          }
          case 272: {
            AP7ConnectionSuccess = input.ReadBool();
            break;
          }
          case 280: {
            AP8ConnectionSuccess = input.ReadBool();
            break;
          }
          case 288: {
            AP9ConnectionSuccess = input.ReadBool();
            break;
          }
          case 296: {
            AP10ConnectionSuccess = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SYSTEM_LOG : pb::IMessage<SYSTEM_LOG> {
    private static readonly pb::MessageParser<SYSTEM_LOG> _parser = new pb::MessageParser<SYSTEM_LOG>(() => new SYSTEM_LOG());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SYSTEM_LOG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEM_LOG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEM_LOG(SYSTEM_LOG other) : this() {
      dateTime_ = other.dateTime_;
      logLevel_ = other.logLevel_;
      process_ = other.process_;
      class_ = other.class_;
      method_ = other.method_;
      device_ = other.device_;
      logID_ = other.logID_;
      threadID_ = other.threadID_;
      data_ = other.data_;
      vHID_ = other.vHID_;
      carrierID_ = other.carrierID_;
      lot_ = other.lot_;
      level_ = other.level_;
      serviceID_ = other.serviceID_;
      xID_ = other.xID_;
      sequence_ = other.sequence_;
      transactionID_ = other.transactionID_;
      details_ = other.details_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEM_LOG Clone() {
      return new SYSTEM_LOG(this);
    }

    /// <summary>Field number for the "dateTime" field.</summary>
    public const int DateTimeFieldNumber = 1;
    private string dateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogLevel" field.</summary>
    public const int LogLevelFieldNumber = 2;
    private string logLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Process" field.</summary>
    public const int ProcessFieldNumber = 3;
    private string process_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Process {
      get { return process_; }
      set {
        process_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Class" field.</summary>
    public const int ClassFieldNumber = 4;
    private string class_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Class {
      get { return class_; }
      set {
        class_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Method" field.</summary>
    public const int MethodFieldNumber = 5;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Device" field.</summary>
    public const int DeviceFieldNumber = 6;
    private string device_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogID" field.</summary>
    public const int LogIDFieldNumber = 7;
    private string logID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogID {
      get { return logID_; }
      set {
        logID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ThreadID" field.</summary>
    public const int ThreadIDFieldNumber = 8;
    private string threadID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThreadID {
      get { return threadID_; }
      set {
        threadID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 9;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VHID" field.</summary>
    public const int VHIDFieldNumber = 10;
    private string vHID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHID {
      get { return vHID_; }
      set {
        vHID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CarrierID" field.</summary>
    public const int CarrierIDFieldNumber = 11;
    private string carrierID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierID {
      get { return carrierID_; }
      set {
        carrierID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Lot" field.</summary>
    public const int LotFieldNumber = 12;
    private string lot_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lot {
      get { return lot_; }
      set {
        lot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 13;
    private string level_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServiceID" field.</summary>
    public const int ServiceIDFieldNumber = 14;
    private string serviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceID {
      get { return serviceID_; }
      set {
        serviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "XID" field.</summary>
    public const int XIDFieldNumber = 15;
    private string xID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XID {
      get { return xID_; }
      set {
        xID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sequence" field.</summary>
    public const int SequenceFieldNumber = 16;
    private string sequence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sequence {
      get { return sequence_; }
      set {
        sequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactionID" field.</summary>
    public const int TransactionIDFieldNumber = 17;
    private string transactionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionID {
      get { return transactionID_; }
      set {
        transactionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Details" field.</summary>
    public const int DetailsFieldNumber = 18;
    private string details_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 19;
    private string index_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Index {
      get { return index_; }
      set {
        index_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SYSTEM_LOG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SYSTEM_LOG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DateTime != other.DateTime) return false;
      if (LogLevel != other.LogLevel) return false;
      if (Process != other.Process) return false;
      if (Class != other.Class) return false;
      if (Method != other.Method) return false;
      if (Device != other.Device) return false;
      if (LogID != other.LogID) return false;
      if (ThreadID != other.ThreadID) return false;
      if (Data != other.Data) return false;
      if (VHID != other.VHID) return false;
      if (CarrierID != other.CarrierID) return false;
      if (Lot != other.Lot) return false;
      if (Level != other.Level) return false;
      if (ServiceID != other.ServiceID) return false;
      if (XID != other.XID) return false;
      if (Sequence != other.Sequence) return false;
      if (TransactionID != other.TransactionID) return false;
      if (Details != other.Details) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DateTime.Length != 0) hash ^= DateTime.GetHashCode();
      if (LogLevel.Length != 0) hash ^= LogLevel.GetHashCode();
      if (Process.Length != 0) hash ^= Process.GetHashCode();
      if (Class.Length != 0) hash ^= Class.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (LogID.Length != 0) hash ^= LogID.GetHashCode();
      if (ThreadID.Length != 0) hash ^= ThreadID.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (VHID.Length != 0) hash ^= VHID.GetHashCode();
      if (CarrierID.Length != 0) hash ^= CarrierID.GetHashCode();
      if (Lot.Length != 0) hash ^= Lot.GetHashCode();
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (ServiceID.Length != 0) hash ^= ServiceID.GetHashCode();
      if (XID.Length != 0) hash ^= XID.GetHashCode();
      if (Sequence.Length != 0) hash ^= Sequence.GetHashCode();
      if (TransactionID.Length != 0) hash ^= TransactionID.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (Index.Length != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DateTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DateTime);
      }
      if (LogLevel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogLevel);
      }
      if (Process.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Process);
      }
      if (Class.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Class);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Method);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (LogID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LogID);
      }
      if (ThreadID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ThreadID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Data);
      }
      if (VHID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(VHID);
      }
      if (CarrierID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CarrierID);
      }
      if (Lot.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Lot);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Level);
      }
      if (ServiceID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ServiceID);
      }
      if (XID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(XID);
      }
      if (Sequence.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Sequence);
      }
      if (TransactionID.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TransactionID);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Details);
      }
      if (Index.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateTime);
      }
      if (LogLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogLevel);
      }
      if (Process.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Process);
      }
      if (Class.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Class);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (LogID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogID);
      }
      if (ThreadID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadID);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (VHID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHID);
      }
      if (CarrierID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierID);
      }
      if (Lot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lot);
      }
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (ServiceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceID);
      }
      if (XID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XID);
      }
      if (Sequence.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sequence);
      }
      if (TransactionID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TransactionID);
      }
      if (Details.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (Index.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SYSTEM_LOG other) {
      if (other == null) {
        return;
      }
      if (other.DateTime.Length != 0) {
        DateTime = other.DateTime;
      }
      if (other.LogLevel.Length != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.Process.Length != 0) {
        Process = other.Process;
      }
      if (other.Class.Length != 0) {
        Class = other.Class;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.LogID.Length != 0) {
        LogID = other.LogID;
      }
      if (other.ThreadID.Length != 0) {
        ThreadID = other.ThreadID;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.VHID.Length != 0) {
        VHID = other.VHID;
      }
      if (other.CarrierID.Length != 0) {
        CarrierID = other.CarrierID;
      }
      if (other.Lot.Length != 0) {
        Lot = other.Lot;
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.ServiceID.Length != 0) {
        ServiceID = other.ServiceID;
      }
      if (other.XID.Length != 0) {
        XID = other.XID;
      }
      if (other.Sequence.Length != 0) {
        Sequence = other.Sequence;
      }
      if (other.TransactionID.Length != 0) {
        TransactionID = other.TransactionID;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      if (other.Index.Length != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DateTime = input.ReadString();
            break;
          }
          case 18: {
            LogLevel = input.ReadString();
            break;
          }
          case 26: {
            Process = input.ReadString();
            break;
          }
          case 34: {
            Class = input.ReadString();
            break;
          }
          case 42: {
            Method = input.ReadString();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            LogID = input.ReadString();
            break;
          }
          case 66: {
            ThreadID = input.ReadString();
            break;
          }
          case 74: {
            Data = input.ReadString();
            break;
          }
          case 82: {
            VHID = input.ReadString();
            break;
          }
          case 90: {
            CarrierID = input.ReadString();
            break;
          }
          case 98: {
            Lot = input.ReadString();
            break;
          }
          case 106: {
            Level = input.ReadString();
            break;
          }
          case 114: {
            ServiceID = input.ReadString();
            break;
          }
          case 122: {
            XID = input.ReadString();
            break;
          }
          case 130: {
            Sequence = input.ReadString();
            break;
          }
          case 138: {
            TransactionID = input.ReadString();
            break;
          }
          case 146: {
            Details = input.ReadString();
            break;
          }
          case 154: {
            Index = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MTL_MTS_INFO : pb::IMessage<MTL_MTS_INFO> {
    private static readonly pb::MessageParser<MTL_MTS_INFO> _parser = new pb::MessageParser<MTL_MTS_INFO>(() => new MTL_MTS_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MTL_MTS_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTL_MTS_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTL_MTS_INFO(MTL_MTS_INFO other) : this() {
      stationID_ = other.stationID_;
      networkLink_ = other.networkLink_;
      alive_ = other.alive_;
      mode_ = other.mode_;
      interlock_ = other.interlock_;
      carID_ = other.carID_;
      mTLLocation_ = other.mTLLocation_;
      synchronizeTime_ = other.synchronizeTime_;
      distance_ = other.distance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTL_MTS_INFO Clone() {
      return new MTL_MTS_INFO(this);
    }

    /// <summary>Field number for the "StationID" field.</summary>
    public const int StationIDFieldNumber = 1;
    private string stationID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationID {
      get { return stationID_; }
      set {
        stationID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetworkLink" field.</summary>
    public const int NetworkLinkFieldNumber = 2;
    private bool networkLink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetworkLink {
      get { return networkLink_; }
      set {
        networkLink_ = value;
      }
    }

    /// <summary>Field number for the "Alive" field.</summary>
    public const int AliveFieldNumber = 3;
    private bool alive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alive {
      get { return alive_; }
      set {
        alive_ = value;
      }
    }

    /// <summary>Field number for the "Mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private bool mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "Interlock" field.</summary>
    public const int InterlockFieldNumber = 5;
    private bool interlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interlock {
      get { return interlock_; }
      set {
        interlock_ = value;
      }
    }

    /// <summary>Field number for the "CarID" field.</summary>
    public const int CarIDFieldNumber = 6;
    private string carID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarID {
      get { return carID_; }
      set {
        carID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MTLLocation" field.</summary>
    public const int MTLLocationFieldNumber = 7;
    private string mTLLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MTLLocation {
      get { return mTLLocation_; }
      set {
        mTLLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SynchronizeTime" field.</summary>
    public const int SynchronizeTimeFieldNumber = 8;
    private string synchronizeTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SynchronizeTime {
      get { return synchronizeTime_; }
      set {
        synchronizeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 9;
    private string distance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Distance {
      get { return distance_; }
      set {
        distance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MTL_MTS_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MTL_MTS_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationID != other.StationID) return false;
      if (NetworkLink != other.NetworkLink) return false;
      if (Alive != other.Alive) return false;
      if (Mode != other.Mode) return false;
      if (Interlock != other.Interlock) return false;
      if (CarID != other.CarID) return false;
      if (MTLLocation != other.MTLLocation) return false;
      if (SynchronizeTime != other.SynchronizeTime) return false;
      if (Distance != other.Distance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationID.Length != 0) hash ^= StationID.GetHashCode();
      if (NetworkLink != false) hash ^= NetworkLink.GetHashCode();
      if (Alive != false) hash ^= Alive.GetHashCode();
      if (Mode != false) hash ^= Mode.GetHashCode();
      if (Interlock != false) hash ^= Interlock.GetHashCode();
      if (CarID.Length != 0) hash ^= CarID.GetHashCode();
      if (MTLLocation.Length != 0) hash ^= MTLLocation.GetHashCode();
      if (SynchronizeTime.Length != 0) hash ^= SynchronizeTime.GetHashCode();
      if (Distance.Length != 0) hash ^= Distance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationID);
      }
      if (NetworkLink != false) {
        output.WriteRawTag(16);
        output.WriteBool(NetworkLink);
      }
      if (Alive != false) {
        output.WriteRawTag(24);
        output.WriteBool(Alive);
      }
      if (Mode != false) {
        output.WriteRawTag(32);
        output.WriteBool(Mode);
      }
      if (Interlock != false) {
        output.WriteRawTag(40);
        output.WriteBool(Interlock);
      }
      if (CarID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CarID);
      }
      if (MTLLocation.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MTLLocation);
      }
      if (SynchronizeTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SynchronizeTime);
      }
      if (Distance.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Distance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationID);
      }
      if (NetworkLink != false) {
        size += 1 + 1;
      }
      if (Alive != false) {
        size += 1 + 1;
      }
      if (Mode != false) {
        size += 1 + 1;
      }
      if (Interlock != false) {
        size += 1 + 1;
      }
      if (CarID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarID);
      }
      if (MTLLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MTLLocation);
      }
      if (SynchronizeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SynchronizeTime);
      }
      if (Distance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Distance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MTL_MTS_INFO other) {
      if (other == null) {
        return;
      }
      if (other.StationID.Length != 0) {
        StationID = other.StationID;
      }
      if (other.NetworkLink != false) {
        NetworkLink = other.NetworkLink;
      }
      if (other.Alive != false) {
        Alive = other.Alive;
      }
      if (other.Mode != false) {
        Mode = other.Mode;
      }
      if (other.Interlock != false) {
        Interlock = other.Interlock;
      }
      if (other.CarID.Length != 0) {
        CarID = other.CarID;
      }
      if (other.MTLLocation.Length != 0) {
        MTLLocation = other.MTLLocation;
      }
      if (other.SynchronizeTime.Length != 0) {
        SynchronizeTime = other.SynchronizeTime;
      }
      if (other.Distance.Length != 0) {
        Distance = other.Distance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationID = input.ReadString();
            break;
          }
          case 16: {
            NetworkLink = input.ReadBool();
            break;
          }
          case 24: {
            Alive = input.ReadBool();
            break;
          }
          case 32: {
            Mode = input.ReadBool();
            break;
          }
          case 40: {
            Interlock = input.ReadBool();
            break;
          }
          case 50: {
            CarID = input.ReadString();
            break;
          }
          case 58: {
            MTLLocation = input.ReadString();
            break;
          }
          case 66: {
            SynchronizeTime = input.ReadString();
            break;
          }
          case 74: {
            Distance = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TRANSFER_INFO : pb::IMessage<TRANSFER_INFO> {
    private static readonly pb::MessageParser<TRANSFER_INFO> _parser = new pb::MessageParser<TRANSFER_INFO>(() => new TRANSFER_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TRANSFER_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TRANSFER_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TRANSFER_INFO(TRANSFER_INFO other) : this() {
      mCSCommandAutoAssign_ = other.mCSCommandAutoAssign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TRANSFER_INFO Clone() {
      return new TRANSFER_INFO(this);
    }

    /// <summary>Field number for the "MCSCommandAutoAssign" field.</summary>
    public const int MCSCommandAutoAssignFieldNumber = 1;
    private bool mCSCommandAutoAssign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MCSCommandAutoAssign {
      get { return mCSCommandAutoAssign_; }
      set {
        mCSCommandAutoAssign_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TRANSFER_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TRANSFER_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MCSCommandAutoAssign != other.MCSCommandAutoAssign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MCSCommandAutoAssign != false) hash ^= MCSCommandAutoAssign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MCSCommandAutoAssign != false) {
        output.WriteRawTag(8);
        output.WriteBool(MCSCommandAutoAssign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MCSCommandAutoAssign != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TRANSFER_INFO other) {
      if (other == null) {
        return;
      }
      if (other.MCSCommandAutoAssign != false) {
        MCSCommandAutoAssign = other.MCSCommandAutoAssign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MCSCommandAutoAssign = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TIP_MESSAGE_INFO : pb::IMessage<TIP_MESSAGE_INFO> {
    private static readonly pb::MessageParser<TIP_MESSAGE_INFO> _parser = new pb::MessageParser<TIP_MESSAGE_INFO>(() => new TIP_MESSAGE_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TIP_MESSAGE_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_MESSAGE_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_MESSAGE_INFO(TIP_MESSAGE_INFO other) : this() {
      time_ = other.time_;
      msgLevel_ = other.msgLevel_;
      message_ = other.message_;
      xID_ = other.xID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_MESSAGE_INFO Clone() {
      return new TIP_MESSAGE_INFO(this);
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MsgLevel" field.</summary>
    public const int MsgLevelFieldNumber = 2;
    private global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MsgLevel msgLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MsgLevel MsgLevel {
      get { return msgLevel_; }
      set {
        msgLevel_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "XID" field.</summary>
    public const int XIDFieldNumber = 4;
    private string xID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XID {
      get { return xID_; }
      set {
        xID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TIP_MESSAGE_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TIP_MESSAGE_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (MsgLevel != other.MsgLevel) return false;
      if (Message != other.Message) return false;
      if (XID != other.XID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (MsgLevel != 0) hash ^= MsgLevel.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (XID.Length != 0) hash ^= XID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (MsgLevel != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MsgLevel);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (XID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(XID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (MsgLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgLevel);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (XID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TIP_MESSAGE_INFO other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.MsgLevel != 0) {
        MsgLevel = other.MsgLevel;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.XID.Length != 0) {
        XID = other.XID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 16: {
            msgLevel_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.MsgLevel) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            XID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TIP_MESSAGE_COLLECTION : pb::IMessage<TIP_MESSAGE_COLLECTION> {
    private static readonly pb::MessageParser<TIP_MESSAGE_COLLECTION> _parser = new pb::MessageParser<TIP_MESSAGE_COLLECTION>(() => new TIP_MESSAGE_COLLECTION());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TIP_MESSAGE_COLLECTION> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_MESSAGE_COLLECTION() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_MESSAGE_COLLECTION(TIP_MESSAGE_COLLECTION other) : this() {
      tIPMESSAGEINFOS_ = other.tIPMESSAGEINFOS_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_MESSAGE_COLLECTION Clone() {
      return new TIP_MESSAGE_COLLECTION(this);
    }

    /// <summary>Field number for the "TIP_MESSAGE_INFOS" field.</summary>
    public const int TIPMESSAGEINFOSFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO> _repeated_tIPMESSAGEINFOS_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO> tIPMESSAGEINFOS_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.TIP_MESSAGE_INFO> TIPMESSAGEINFOS {
      get { return tIPMESSAGEINFOS_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TIP_MESSAGE_COLLECTION);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TIP_MESSAGE_COLLECTION other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tIPMESSAGEINFOS_.Equals(other.tIPMESSAGEINFOS_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tIPMESSAGEINFOS_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tIPMESSAGEINFOS_.WriteTo(output, _repeated_tIPMESSAGEINFOS_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tIPMESSAGEINFOS_.CalculateSize(_repeated_tIPMESSAGEINFOS_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TIP_MESSAGE_COLLECTION other) {
      if (other == null) {
        return;
      }
      tIPMESSAGEINFOS_.Add(other.tIPMESSAGEINFOS_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tIPMESSAGEINFOS_.AddEntriesFrom(input, _repeated_tIPMESSAGEINFOS_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WrapperMessage : pb::IMessage<WrapperMessage> {
    private static readonly pb::MessageParser<WrapperMessage> _parser = new pb::MessageParser<WrapperMessage>(() => new WrapperMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WrapperMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage(WrapperMessage other) : this() {
      iD_ = other.iD_;
      seqNum_ = other.seqNum_;
      switch (other.MsgCase) {
        case MsgOneofCase.HostBasicInfoRep:
          HostBasicInfoRep = other.HostBasicInfoRep.Clone();
          break;
        case MsgOneofCase.HostBasicInfoResp:
          HostBasicInfoResp = other.HostBasicInfoResp.Clone();
          break;
        case MsgOneofCase.BasicInfoVersionRep:
          BasicInfoVersionRep = other.BasicInfoVersionRep.Clone();
          break;
        case MsgOneofCase.BasicInfoVersionResp:
          BasicInfoVersionResp = other.BasicInfoVersionResp.Clone();
          break;
        case MsgOneofCase.BasicInfoRep:
          BasicInfoRep = other.BasicInfoRep.Clone();
          break;
        case MsgOneofCase.BasicInfoResp:
          BasicInfoResp = other.BasicInfoResp.Clone();
          break;
        case MsgOneofCase.TavellingDataRep:
          TavellingDataRep = other.TavellingDataRep.Clone();
          break;
        case MsgOneofCase.TavellingDataResp:
          TavellingDataResp = other.TavellingDataResp.Clone();
          break;
        case MsgOneofCase.SectionDataRep:
          SectionDataRep = other.SectionDataRep.Clone();
          break;
        case MsgOneofCase.SectionDataResp:
          SectionDataResp = other.SectionDataResp.Clone();
          break;
        case MsgOneofCase.AddressDataRep:
          AddressDataRep = other.AddressDataRep.Clone();
          break;
        case MsgOneofCase.AddressDataResp:
          AddressDataResp = other.AddressDataResp.Clone();
          break;
        case MsgOneofCase.ScaleDataRep:
          ScaleDataRep = other.ScaleDataRep.Clone();
          break;
        case MsgOneofCase.ScaleDataResp:
          ScaleDataResp = other.ScaleDataResp.Clone();
          break;
        case MsgOneofCase.ControlDataRep:
          ControlDataRep = other.ControlDataRep.Clone();
          break;
        case MsgOneofCase.ControlDataResp:
          ControlDataResp = other.ControlDataResp.Clone();
          break;
        case MsgOneofCase.GuideDataRep:
          GuideDataRep = other.GuideDataRep.Clone();
          break;
        case MsgOneofCase.GuideDataResp:
          GuideDataResp = other.GuideDataResp.Clone();
          break;
        case MsgOneofCase.IndividualUploadReq:
          IndividualUploadReq = other.IndividualUploadReq.Clone();
          break;
        case MsgOneofCase.IndividualUploadResp:
          IndividualUploadResp = other.IndividualUploadResp.Clone();
          break;
        case MsgOneofCase.GUIDEDataUploadReq:
          GUIDEDataUploadReq = other.GUIDEDataUploadReq.Clone();
          break;
        case MsgOneofCase.GUIDEDataUploadResp:
          GUIDEDataUploadResp = other.GUIDEDataUploadResp.Clone();
          break;
        case MsgOneofCase.IndividualChangeReq:
          IndividualChangeReq = other.IndividualChangeReq.Clone();
          break;
        case MsgOneofCase.IndividualChangeResp:
          IndividualChangeResp = other.IndividualChangeResp.Clone();
          break;
        case MsgOneofCase.ModeChangeReq:
          ModeChangeReq = other.ModeChangeReq.Clone();
          break;
        case MsgOneofCase.ModeChangeResp:
          ModeChangeResp = other.ModeChangeResp.Clone();
          break;
        case MsgOneofCase.TransReq:
          TransReq = other.TransReq.Clone();
          break;
        case MsgOneofCase.TransResp:
          TransResp = other.TransResp.Clone();
          break;
        case MsgOneofCase.TranCmpRep:
          TranCmpRep = other.TranCmpRep.Clone();
          break;
        case MsgOneofCase.TranCmpResp:
          TranCmpResp = other.TranCmpResp.Clone();
          break;
        case MsgOneofCase.ControlZoneReq:
          ControlZoneReq = other.ControlZoneReq.Clone();
          break;
        case MsgOneofCase.ControlZoneResp:
          ControlZoneResp = other.ControlZoneResp.Clone();
          break;
        case MsgOneofCase.CARRIERIDRenameReq:
          CARRIERIDRenameReq = other.CARRIERIDRenameReq.Clone();
          break;
        case MsgOneofCase.CARRIERIDRenameResp:
          CARRIERIDRenameResp = other.CARRIERIDRenameResp.Clone();
          break;
        case MsgOneofCase.TransCancelReq:
          TransCancelReq = other.TransCancelReq.Clone();
          break;
        case MsgOneofCase.TransCancelResp:
          TransCancelResp = other.TransCancelResp.Clone();
          break;
        case MsgOneofCase.TransCancelFailReq:
          TransCancelFailReq = other.TransCancelFailReq.Clone();
          break;
        case MsgOneofCase.TransCancelFailResp:
          TransCancelFailResp = other.TransCancelFailResp.Clone();
          break;
        case MsgOneofCase.PauseReq:
          PauseReq = other.PauseReq.Clone();
          break;
        case MsgOneofCase.PauseResp:
          PauseResp = other.PauseResp.Clone();
          break;
        case MsgOneofCase.TransEventRep:
          TransEventRep = other.TransEventRep.Clone();
          break;
        case MsgOneofCase.ImpTransEventRep:
          ImpTransEventRep = other.ImpTransEventRep.Clone();
          break;
        case MsgOneofCase.ImpTransEventResp:
          ImpTransEventResp = other.ImpTransEventResp.Clone();
          break;
        case MsgOneofCase.StatusReq:
          StatusReq = other.StatusReq.Clone();
          break;
        case MsgOneofCase.StatusReqResp:
          StatusReqResp = other.StatusReqResp.Clone();
          break;
        case MsgOneofCase.StatueChangeRep:
          StatueChangeRep = other.StatueChangeRep.Clone();
          break;
        case MsgOneofCase.StatusChangeResp:
          StatusChangeResp = other.StatusChangeResp.Clone();
          break;
        case MsgOneofCase.PowerOpeReq:
          PowerOpeReq = other.PowerOpeReq.Clone();
          break;
        case MsgOneofCase.PowerOpeResp:
          PowerOpeResp = other.PowerOpeResp.Clone();
          break;
        case MsgOneofCase.AvoidReq:
          AvoidReq = other.AvoidReq.Clone();
          break;
        case MsgOneofCase.AvoidResp:
          AvoidResp = other.AvoidResp.Clone();
          break;
        case MsgOneofCase.AvoidCompleteRep:
          AvoidCompleteRep = other.AvoidCompleteRep.Clone();
          break;
        case MsgOneofCase.AvoidCompleteResp:
          AvoidCompleteResp = other.AvoidCompleteResp.Clone();
          break;
        case MsgOneofCase.RangeTeachingReq:
          RangeTeachingReq = other.RangeTeachingReq.Clone();
          break;
        case MsgOneofCase.RangeTeachingResp:
          RangeTeachingResp = other.RangeTeachingResp.Clone();
          break;
        case MsgOneofCase.RangeTeachingCmpRep:
          RangeTeachingCmpRep = other.RangeTeachingCmpRep.Clone();
          break;
        case MsgOneofCase.RangeTeachingCmpResp:
          RangeTeachingCmpResp = other.RangeTeachingCmpResp.Clone();
          break;
        case MsgOneofCase.AddressTeachRep:
          AddressTeachRep = other.AddressTeachRep.Clone();
          break;
        case MsgOneofCase.AddressTeachResp:
          AddressTeachResp = other.AddressTeachResp.Clone();
          break;
        case MsgOneofCase.AlarmResetReq:
          AlarmResetReq = other.AlarmResetReq.Clone();
          break;
        case MsgOneofCase.AlarmResetResp:
          AlarmResetResp = other.AlarmResetResp.Clone();
          break;
        case MsgOneofCase.AlarmRep:
          AlarmRep = other.AlarmRep.Clone();
          break;
        case MsgOneofCase.AlarmResp:
          AlarmResp = other.AlarmResp.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage Clone() {
      return new WrapperMessage(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1000;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SeqNum" field.</summary>
    public const int SeqNumFieldNumber = 1001;
    private int seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    /// <summary>Field number for the "Host_Basic_Info_Rep" field.</summary>
    public const int HostBasicInfoRepFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_1_HOST_BASIC_INFO_VERSION_REP HostBasicInfoRep {
      get { return msgCase_ == MsgOneofCase.HostBasicInfoRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_1_HOST_BASIC_INFO_VERSION_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoRep;
      }
    }

    /// <summary>Field number for the "Host_Basic_Info_Resp" field.</summary>
    public const int HostBasicInfoRespFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE HostBasicInfoResp {
      get { return msgCase_ == MsgOneofCase.HostBasicInfoResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoResp;
      }
    }

    /// <summary>Field number for the "Basic_Info_Version_Rep" field.</summary>
    public const int BasicInfoVersionRepFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_102_BASIC_INFO_VERSION_REP BasicInfoVersionRep {
      get { return msgCase_ == MsgOneofCase.BasicInfoVersionRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_102_BASIC_INFO_VERSION_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionRep;
      }
    }

    /// <summary>Field number for the "Basic_Info_Version_Resp" field.</summary>
    public const int BasicInfoVersionRespFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_2_BASIC_INFO_VERSION_RESPONSE BasicInfoVersionResp {
      get { return msgCase_ == MsgOneofCase.BasicInfoVersionResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_2_BASIC_INFO_VERSION_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionResp;
      }
    }

    /// <summary>Field number for the "Basic_Info_Rep" field.</summary>
    public const int BasicInfoRepFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_11_BASIC_INFO_REP BasicInfoRep {
      get { return msgCase_ == MsgOneofCase.BasicInfoRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_11_BASIC_INFO_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoRep;
      }
    }

    /// <summary>Field number for the "Basic_Info_Resp" field.</summary>
    public const int BasicInfoRespFieldNumber = 111;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_111_BASIC_INFO_RESPONSE BasicInfoResp {
      get { return msgCase_ == MsgOneofCase.BasicInfoResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_111_BASIC_INFO_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoResp;
      }
    }

    /// <summary>Field number for the "Tavelling_Data_Rep" field.</summary>
    public const int TavellingDataRepFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_13_TAVELLING_DATA_REP TavellingDataRep {
      get { return msgCase_ == MsgOneofCase.TavellingDataRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_13_TAVELLING_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataRep;
      }
    }

    /// <summary>Field number for the "Tavelling_Data_Resp" field.</summary>
    public const int TavellingDataRespFieldNumber = 113;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_113_TAVELLING_DATA_RESPONSE TavellingDataResp {
      get { return msgCase_ == MsgOneofCase.TavellingDataResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_113_TAVELLING_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataResp;
      }
    }

    /// <summary>Field number for the "Section_Data_Rep" field.</summary>
    public const int SectionDataRepFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP SectionDataRep {
      get { return msgCase_ == MsgOneofCase.SectionDataRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataRep;
      }
    }

    /// <summary>Field number for the "Section_Data_Resp" field.</summary>
    public const int SectionDataRespFieldNumber = 115;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_115_SECTION_DATA_RESPONSE SectionDataResp {
      get { return msgCase_ == MsgOneofCase.SectionDataResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_115_SECTION_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataResp;
      }
    }

    /// <summary>Field number for the "Address_Data_Rep" field.</summary>
    public const int AddressDataRepFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP AddressDataRep {
      get { return msgCase_ == MsgOneofCase.AddressDataRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataRep;
      }
    }

    /// <summary>Field number for the "Address_Data_Resp" field.</summary>
    public const int AddressDataRespFieldNumber = 117;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_117_ADDRESS_DATA_RESPONSE AddressDataResp {
      get { return msgCase_ == MsgOneofCase.AddressDataResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_117_ADDRESS_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataResp;
      }
    }

    /// <summary>Field number for the "Scale_Data_Rep" field.</summary>
    public const int ScaleDataRepFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_19_SCALE_DATA_REP ScaleDataRep {
      get { return msgCase_ == MsgOneofCase.ScaleDataRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_19_SCALE_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataRep;
      }
    }

    /// <summary>Field number for the "Scale_Data_Resp" field.</summary>
    public const int ScaleDataRespFieldNumber = 119;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_119_SCALE_DATA_RESPONSE ScaleDataResp {
      get { return msgCase_ == MsgOneofCase.ScaleDataResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_119_SCALE_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataResp;
      }
    }

    /// <summary>Field number for the "Control_Data_Rep" field.</summary>
    public const int ControlDataRepFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_21_CONTROL_DATA_REP ControlDataRep {
      get { return msgCase_ == MsgOneofCase.ControlDataRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_21_CONTROL_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataRep;
      }
    }

    /// <summary>Field number for the "Control_Data_Resp" field.</summary>
    public const int ControlDataRespFieldNumber = 121;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_121_CONTROL_DATA_RESPONSE ControlDataResp {
      get { return msgCase_ == MsgOneofCase.ControlDataResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_121_CONTROL_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataResp;
      }
    }

    /// <summary>Field number for the "Guide_Data_Rep" field.</summary>
    public const int GuideDataRepFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_23_GUIDE_DATA_REP GuideDataRep {
      get { return msgCase_ == MsgOneofCase.GuideDataRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_23_GUIDE_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataRep;
      }
    }

    /// <summary>Field number for the "Guide_Data_Resp" field.</summary>
    public const int GuideDataRespFieldNumber = 123;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_123_GUIDE_DATA_RESPONSE GuideDataResp {
      get { return msgCase_ == MsgOneofCase.GuideDataResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_123_GUIDE_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataResp;
      }
    }

    /// <summary>Field number for the "Individual_Upload_Req" field.</summary>
    public const int IndividualUploadReqFieldNumber = 61;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_61_INDIVIDUAL_UPLOAD_REQ IndividualUploadReq {
      get { return msgCase_ == MsgOneofCase.IndividualUploadReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_61_INDIVIDUAL_UPLOAD_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadReq;
      }
    }

    /// <summary>Field number for the "Individual_Upload_Resp" field.</summary>
    public const int IndividualUploadRespFieldNumber = 161;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE IndividualUploadResp {
      get { return msgCase_ == MsgOneofCase.IndividualUploadResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadResp;
      }
    }

    /// <summary>Field number for the "GUIDE_Data_Upload_Req" field.</summary>
    public const int GUIDEDataUploadReqFieldNumber = 162;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_162_GUIDE_DATA_UPLOAD_REP GUIDEDataUploadReq {
      get { return msgCase_ == MsgOneofCase.GUIDEDataUploadReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_162_GUIDE_DATA_UPLOAD_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GUIDEDataUploadReq;
      }
    }

    /// <summary>Field number for the "GUIDE_Data_Upload_Resp" field.</summary>
    public const int GUIDEDataUploadRespFieldNumber = 62;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE GUIDEDataUploadResp {
      get { return msgCase_ == MsgOneofCase.GUIDEDataUploadResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GUIDEDataUploadResp;
      }
    }

    /// <summary>Field number for the "Individual_Change_Req" field.</summary>
    public const int IndividualChangeReqFieldNumber = 63;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_63_INDIVIDUAL_CHANGE_REQ IndividualChangeReq {
      get { return msgCase_ == MsgOneofCase.IndividualChangeReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_63_INDIVIDUAL_CHANGE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeReq;
      }
    }

    /// <summary>Field number for the "Individual_Change_Resp" field.</summary>
    public const int IndividualChangeRespFieldNumber = 163;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE IndividualChangeResp {
      get { return msgCase_ == MsgOneofCase.IndividualChangeResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeResp;
      }
    }

    /// <summary>Field number for the "Mode_Change_Req" field.</summary>
    public const int ModeChangeReqFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_41_MODE_CHANGE_REQ ModeChangeReq {
      get { return msgCase_ == MsgOneofCase.ModeChangeReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_41_MODE_CHANGE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeReq;
      }
    }

    /// <summary>Field number for the "Mode_Change_Resp" field.</summary>
    public const int ModeChangeRespFieldNumber = 141;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_141_MODE_CHANGE_RESPONSE ModeChangeResp {
      get { return msgCase_ == MsgOneofCase.ModeChangeResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_141_MODE_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeResp;
      }
    }

    /// <summary>Field number for the "Trans_Req" field.</summary>
    public const int TransReqFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_31_TRANS_REQUEST TransReq {
      get { return msgCase_ == MsgOneofCase.TransReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_31_TRANS_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransReq;
      }
    }

    /// <summary>Field number for the "Trans_Resp" field.</summary>
    public const int TransRespFieldNumber = 131;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_131_TRANS_RESPONSE TransResp {
      get { return msgCase_ == MsgOneofCase.TransResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_131_TRANS_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransResp;
      }
    }

    /// <summary>Field number for the "Tran_Cmp_Rep" field.</summary>
    public const int TranCmpRepFieldNumber = 132;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_132_TRANS_COMPLETE_REPORT TranCmpRep {
      get { return msgCase_ == MsgOneofCase.TranCmpRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_132_TRANS_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpRep;
      }
    }

    /// <summary>Field number for the "Tran_Cmp_Resp" field.</summary>
    public const int TranCmpRespFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_32_TRANS_COMPLETE_RESPONSE TranCmpResp {
      get { return msgCase_ == MsgOneofCase.TranCmpResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_32_TRANS_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpResp;
      }
    }

    /// <summary>Field number for the "Control_Zone_Req" field.</summary>
    public const int ControlZoneReqFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST ControlZoneReq {
      get { return msgCase_ == MsgOneofCase.ControlZoneReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlZoneReq;
      }
    }

    /// <summary>Field number for the "Control_Zone_Resp" field.</summary>
    public const int ControlZoneRespFieldNumber = 133;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE ControlZoneResp {
      get { return msgCase_ == MsgOneofCase.ControlZoneResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlZoneResp;
      }
    }

    /// <summary>Field number for the "CARRIER_ID_Rename_Req" field.</summary>
    public const int CARRIERIDRenameReqFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_35_CARRIER_ID_RENAME_REQUEST CARRIERIDRenameReq {
      get { return msgCase_ == MsgOneofCase.CARRIERIDRenameReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_35_CARRIER_ID_RENAME_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CARRIERIDRenameReq;
      }
    }

    /// <summary>Field number for the "CARRIER_ID_Rename_Resp" field.</summary>
    public const int CARRIERIDRenameRespFieldNumber = 135;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_135_CARRIER_ID_RENAME_RESPONSE CARRIERIDRenameResp {
      get { return msgCase_ == MsgOneofCase.CARRIERIDRenameResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_135_CARRIER_ID_RENAME_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CARRIERIDRenameResp;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Req" field.</summary>
    public const int TransCancelReqFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_37_TRANS_CANCEL_REQUEST TransCancelReq {
      get { return msgCase_ == MsgOneofCase.TransCancelReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_37_TRANS_CANCEL_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelReq;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Resp" field.</summary>
    public const int TransCancelRespFieldNumber = 137;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_137_TRANS_CANCEL_RESPONSE TransCancelResp {
      get { return msgCase_ == MsgOneofCase.TransCancelResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_137_TRANS_CANCEL_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelResp;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Fail_Req" field.</summary>
    public const int TransCancelFailReqFieldNumber = 138;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_138_TRANS_CANCEL_FAIL_REQUEST TransCancelFailReq {
      get { return msgCase_ == MsgOneofCase.TransCancelFailReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_138_TRANS_CANCEL_FAIL_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelFailReq;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Fail_Resp" field.</summary>
    public const int TransCancelFailRespFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_38_TRANS_CANCEL_FAIL_RESPONSE TransCancelFailResp {
      get { return msgCase_ == MsgOneofCase.TransCancelFailResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_38_TRANS_CANCEL_FAIL_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelFailResp;
      }
    }

    /// <summary>Field number for the "Pause_Req" field.</summary>
    public const int PauseReqFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_39_PAUSE_REQUEST PauseReq {
      get { return msgCase_ == MsgOneofCase.PauseReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_39_PAUSE_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseReq;
      }
    }

    /// <summary>Field number for the "Pause_Resp" field.</summary>
    public const int PauseRespFieldNumber = 139;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_139_PAUSE_RESPONSE PauseResp {
      get { return msgCase_ == MsgOneofCase.PauseResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_139_PAUSE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseResp;
      }
    }

    /// <summary>Field number for the "Trans_Event_Rep" field.</summary>
    public const int TransEventRepFieldNumber = 134;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_134_TRANS_EVENT_REP TransEventRep {
      get { return msgCase_ == MsgOneofCase.TransEventRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_134_TRANS_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransEventRep;
      }
    }

    /// <summary>Field number for the "Imp_Trans_Event_Rep" field.</summary>
    public const int ImpTransEventRepFieldNumber = 136;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_136_TRANS_EVENT_REP ImpTransEventRep {
      get { return msgCase_ == MsgOneofCase.ImpTransEventRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_136_TRANS_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventRep;
      }
    }

    /// <summary>Field number for the "Imp_Trans_Event_Resp" field.</summary>
    public const int ImpTransEventRespFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_36_TRANS_EVENT_RESPONSE ImpTransEventResp {
      get { return msgCase_ == MsgOneofCase.ImpTransEventResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_36_TRANS_EVENT_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventResp;
      }
    }

    /// <summary>Field number for the "Status_Req" field.</summary>
    public const int StatusReqFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_43_STATUS_REQUEST StatusReq {
      get { return msgCase_ == MsgOneofCase.StatusReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_43_STATUS_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReq;
      }
    }

    /// <summary>Field number for the "Status_Req_Resp" field.</summary>
    public const int StatusReqRespFieldNumber = 143;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_143_STATUS_RESPONSE StatusReqResp {
      get { return msgCase_ == MsgOneofCase.StatusReqResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_143_STATUS_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReqResp;
      }
    }

    /// <summary>Field number for the "Statue_Change_Rep" field.</summary>
    public const int StatueChangeRepFieldNumber = 144;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_144_STATUS_CHANGE_REP StatueChangeRep {
      get { return msgCase_ == MsgOneofCase.StatueChangeRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_144_STATUS_CHANGE_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatueChangeRep;
      }
    }

    /// <summary>Field number for the "Status_Change_Resp" field.</summary>
    public const int StatusChangeRespFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_44_STATUS_CHANGE_RESPONSE StatusChangeResp {
      get { return msgCase_ == MsgOneofCase.StatusChangeResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_44_STATUS_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusChangeResp;
      }
    }

    /// <summary>Field number for the "Power_Ope_Req" field.</summary>
    public const int PowerOpeReqFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_45_POWER_OPE_REQ PowerOpeReq {
      get { return msgCase_ == MsgOneofCase.PowerOpeReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_45_POWER_OPE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeReq;
      }
    }

    /// <summary>Field number for the "Power_Ope_Resp" field.</summary>
    public const int PowerOpeRespFieldNumber = 145;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_145_POWER_OPE_RESPONSE PowerOpeResp {
      get { return msgCase_ == MsgOneofCase.PowerOpeResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_145_POWER_OPE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeResp;
      }
    }

    /// <summary>Field number for the "Avoid_Req" field.</summary>
    public const int AvoidReqFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_51_AVOID_REQUEST AvoidReq {
      get { return msgCase_ == MsgOneofCase.AvoidReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_51_AVOID_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidReq;
      }
    }

    /// <summary>Field number for the "Avoid_Resp" field.</summary>
    public const int AvoidRespFieldNumber = 151;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_151_AVOID_RESPONSE AvoidResp {
      get { return msgCase_ == MsgOneofCase.AvoidResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_151_AVOID_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidResp;
      }
    }

    /// <summary>Field number for the "Avoid_Complete_Rep" field.</summary>
    public const int AvoidCompleteRepFieldNumber = 152;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_152_AVOID_COMPLETE_REPORT AvoidCompleteRep {
      get { return msgCase_ == MsgOneofCase.AvoidCompleteRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_152_AVOID_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidCompleteRep;
      }
    }

    /// <summary>Field number for the "Avoid_Complete_Resp" field.</summary>
    public const int AvoidCompleteRespFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_52_AVOID_COMPLETE_RESPONSE AvoidCompleteResp {
      get { return msgCase_ == MsgOneofCase.AvoidCompleteResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_52_AVOID_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidCompleteResp;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Req" field.</summary>
    public const int RangeTeachingReqFieldNumber = 71;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_71_RANGE_TEACHING_REQUEST RangeTeachingReq {
      get { return msgCase_ == MsgOneofCase.RangeTeachingReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_71_RANGE_TEACHING_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingReq;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Resp" field.</summary>
    public const int RangeTeachingRespFieldNumber = 171;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_171_RANGE_TEACHING_RESPONSE RangeTeachingResp {
      get { return msgCase_ == MsgOneofCase.RangeTeachingResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_171_RANGE_TEACHING_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingResp;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Cmp_Rep" field.</summary>
    public const int RangeTeachingCmpRepFieldNumber = 172;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT RangeTeachingCmpRep {
      get { return msgCase_ == MsgOneofCase.RangeTeachingCmpRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpRep;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Cmp_Resp" field.</summary>
    public const int RangeTeachingCmpRespFieldNumber = 72;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE RangeTeachingCmpResp {
      get { return msgCase_ == MsgOneofCase.RangeTeachingCmpResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpResp;
      }
    }

    /// <summary>Field number for the "Address_Teach_Rep" field.</summary>
    public const int AddressTeachRepFieldNumber = 174;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_174_ADDRESS_TEACH_REPORT AddressTeachRep {
      get { return msgCase_ == MsgOneofCase.AddressTeachRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_174_ADDRESS_TEACH_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachRep;
      }
    }

    /// <summary>Field number for the "Address_Teach_Resp" field.</summary>
    public const int AddressTeachRespFieldNumber = 74;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_74_ADDRESS_TEACH_RESPONSE AddressTeachResp {
      get { return msgCase_ == MsgOneofCase.AddressTeachResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_74_ADDRESS_TEACH_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachResp;
      }
    }

    /// <summary>Field number for the "Alarm_Reset_Req" field.</summary>
    public const int AlarmResetReqFieldNumber = 91;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_91_ALARM_RESET_REQUEST AlarmResetReq {
      get { return msgCase_ == MsgOneofCase.AlarmResetReq ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_91_ALARM_RESET_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetReq;
      }
    }

    /// <summary>Field number for the "Alarm_Reset_Resp" field.</summary>
    public const int AlarmResetRespFieldNumber = 191;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_191_ALARM_RESET_RESPONSE AlarmResetResp {
      get { return msgCase_ == MsgOneofCase.AlarmResetResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_191_ALARM_RESET_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetResp;
      }
    }

    /// <summary>Field number for the "Alarm_Rep" field.</summary>
    public const int AlarmRepFieldNumber = 194;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_194_ALARM_REPORT AlarmRep {
      get { return msgCase_ == MsgOneofCase.AlarmRep ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_194_ALARM_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmRep;
      }
    }

    /// <summary>Field number for the "Alarm_Resp" field.</summary>
    public const int AlarmRespFieldNumber = 94;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_94_ALARM_RESPONSE AlarmResp {
      get { return msgCase_ == MsgOneofCase.AlarmResp ? (global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_94_ALARM_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResp;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      HostBasicInfoRep = 1,
      HostBasicInfoResp = 101,
      BasicInfoVersionRep = 102,
      BasicInfoVersionResp = 2,
      BasicInfoRep = 11,
      BasicInfoResp = 111,
      TavellingDataRep = 13,
      TavellingDataResp = 113,
      SectionDataRep = 15,
      SectionDataResp = 115,
      AddressDataRep = 17,
      AddressDataResp = 117,
      ScaleDataRep = 19,
      ScaleDataResp = 119,
      ControlDataRep = 21,
      ControlDataResp = 121,
      GuideDataRep = 23,
      GuideDataResp = 123,
      IndividualUploadReq = 61,
      IndividualUploadResp = 161,
      GUIDEDataUploadReq = 162,
      GUIDEDataUploadResp = 62,
      IndividualChangeReq = 63,
      IndividualChangeResp = 163,
      ModeChangeReq = 41,
      ModeChangeResp = 141,
      TransReq = 31,
      TransResp = 131,
      TranCmpRep = 132,
      TranCmpResp = 32,
      ControlZoneReq = 33,
      ControlZoneResp = 133,
      CARRIERIDRenameReq = 35,
      CARRIERIDRenameResp = 135,
      TransCancelReq = 37,
      TransCancelResp = 137,
      TransCancelFailReq = 138,
      TransCancelFailResp = 38,
      PauseReq = 39,
      PauseResp = 139,
      TransEventRep = 134,
      ImpTransEventRep = 136,
      ImpTransEventResp = 36,
      StatusReq = 43,
      StatusReqResp = 143,
      StatueChangeRep = 144,
      StatusChangeResp = 44,
      PowerOpeReq = 45,
      PowerOpeResp = 145,
      AvoidReq = 51,
      AvoidResp = 151,
      AvoidCompleteRep = 152,
      AvoidCompleteResp = 52,
      RangeTeachingReq = 71,
      RangeTeachingResp = 171,
      RangeTeachingCmpRep = 172,
      RangeTeachingCmpResp = 72,
      AddressTeachRep = 174,
      AddressTeachResp = 74,
      AlarmResetReq = 91,
      AlarmResetResp = 191,
      AlarmRep = 194,
      AlarmResp = 94,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WrapperMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WrapperMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (SeqNum != other.SeqNum) return false;
      if (!object.Equals(HostBasicInfoRep, other.HostBasicInfoRep)) return false;
      if (!object.Equals(HostBasicInfoResp, other.HostBasicInfoResp)) return false;
      if (!object.Equals(BasicInfoVersionRep, other.BasicInfoVersionRep)) return false;
      if (!object.Equals(BasicInfoVersionResp, other.BasicInfoVersionResp)) return false;
      if (!object.Equals(BasicInfoRep, other.BasicInfoRep)) return false;
      if (!object.Equals(BasicInfoResp, other.BasicInfoResp)) return false;
      if (!object.Equals(TavellingDataRep, other.TavellingDataRep)) return false;
      if (!object.Equals(TavellingDataResp, other.TavellingDataResp)) return false;
      if (!object.Equals(SectionDataRep, other.SectionDataRep)) return false;
      if (!object.Equals(SectionDataResp, other.SectionDataResp)) return false;
      if (!object.Equals(AddressDataRep, other.AddressDataRep)) return false;
      if (!object.Equals(AddressDataResp, other.AddressDataResp)) return false;
      if (!object.Equals(ScaleDataRep, other.ScaleDataRep)) return false;
      if (!object.Equals(ScaleDataResp, other.ScaleDataResp)) return false;
      if (!object.Equals(ControlDataRep, other.ControlDataRep)) return false;
      if (!object.Equals(ControlDataResp, other.ControlDataResp)) return false;
      if (!object.Equals(GuideDataRep, other.GuideDataRep)) return false;
      if (!object.Equals(GuideDataResp, other.GuideDataResp)) return false;
      if (!object.Equals(IndividualUploadReq, other.IndividualUploadReq)) return false;
      if (!object.Equals(IndividualUploadResp, other.IndividualUploadResp)) return false;
      if (!object.Equals(GUIDEDataUploadReq, other.GUIDEDataUploadReq)) return false;
      if (!object.Equals(GUIDEDataUploadResp, other.GUIDEDataUploadResp)) return false;
      if (!object.Equals(IndividualChangeReq, other.IndividualChangeReq)) return false;
      if (!object.Equals(IndividualChangeResp, other.IndividualChangeResp)) return false;
      if (!object.Equals(ModeChangeReq, other.ModeChangeReq)) return false;
      if (!object.Equals(ModeChangeResp, other.ModeChangeResp)) return false;
      if (!object.Equals(TransReq, other.TransReq)) return false;
      if (!object.Equals(TransResp, other.TransResp)) return false;
      if (!object.Equals(TranCmpRep, other.TranCmpRep)) return false;
      if (!object.Equals(TranCmpResp, other.TranCmpResp)) return false;
      if (!object.Equals(ControlZoneReq, other.ControlZoneReq)) return false;
      if (!object.Equals(ControlZoneResp, other.ControlZoneResp)) return false;
      if (!object.Equals(CARRIERIDRenameReq, other.CARRIERIDRenameReq)) return false;
      if (!object.Equals(CARRIERIDRenameResp, other.CARRIERIDRenameResp)) return false;
      if (!object.Equals(TransCancelReq, other.TransCancelReq)) return false;
      if (!object.Equals(TransCancelResp, other.TransCancelResp)) return false;
      if (!object.Equals(TransCancelFailReq, other.TransCancelFailReq)) return false;
      if (!object.Equals(TransCancelFailResp, other.TransCancelFailResp)) return false;
      if (!object.Equals(PauseReq, other.PauseReq)) return false;
      if (!object.Equals(PauseResp, other.PauseResp)) return false;
      if (!object.Equals(TransEventRep, other.TransEventRep)) return false;
      if (!object.Equals(ImpTransEventRep, other.ImpTransEventRep)) return false;
      if (!object.Equals(ImpTransEventResp, other.ImpTransEventResp)) return false;
      if (!object.Equals(StatusReq, other.StatusReq)) return false;
      if (!object.Equals(StatusReqResp, other.StatusReqResp)) return false;
      if (!object.Equals(StatueChangeRep, other.StatueChangeRep)) return false;
      if (!object.Equals(StatusChangeResp, other.StatusChangeResp)) return false;
      if (!object.Equals(PowerOpeReq, other.PowerOpeReq)) return false;
      if (!object.Equals(PowerOpeResp, other.PowerOpeResp)) return false;
      if (!object.Equals(AvoidReq, other.AvoidReq)) return false;
      if (!object.Equals(AvoidResp, other.AvoidResp)) return false;
      if (!object.Equals(AvoidCompleteRep, other.AvoidCompleteRep)) return false;
      if (!object.Equals(AvoidCompleteResp, other.AvoidCompleteResp)) return false;
      if (!object.Equals(RangeTeachingReq, other.RangeTeachingReq)) return false;
      if (!object.Equals(RangeTeachingResp, other.RangeTeachingResp)) return false;
      if (!object.Equals(RangeTeachingCmpRep, other.RangeTeachingCmpRep)) return false;
      if (!object.Equals(RangeTeachingCmpResp, other.RangeTeachingCmpResp)) return false;
      if (!object.Equals(AddressTeachRep, other.AddressTeachRep)) return false;
      if (!object.Equals(AddressTeachResp, other.AddressTeachResp)) return false;
      if (!object.Equals(AlarmResetReq, other.AlarmResetReq)) return false;
      if (!object.Equals(AlarmResetResp, other.AlarmResetResp)) return false;
      if (!object.Equals(AlarmRep, other.AlarmRep)) return false;
      if (!object.Equals(AlarmResp, other.AlarmResp)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (SeqNum != 0) hash ^= SeqNum.GetHashCode();
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) hash ^= HostBasicInfoRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) hash ^= HostBasicInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) hash ^= BasicInfoVersionRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) hash ^= BasicInfoVersionResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoRep) hash ^= BasicInfoRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoResp) hash ^= BasicInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TavellingDataRep) hash ^= TavellingDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.TavellingDataResp) hash ^= TavellingDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.SectionDataRep) hash ^= SectionDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.SectionDataResp) hash ^= SectionDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressDataRep) hash ^= AddressDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressDataResp) hash ^= AddressDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScaleDataRep) hash ^= ScaleDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScaleDataResp) hash ^= ScaleDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlDataRep) hash ^= ControlDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlDataResp) hash ^= ControlDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideDataRep) hash ^= GuideDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideDataResp) hash ^= GuideDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) hash ^= IndividualUploadReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) hash ^= IndividualUploadResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) hash ^= GUIDEDataUploadReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) hash ^= GUIDEDataUploadResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) hash ^= IndividualChangeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) hash ^= IndividualChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ModeChangeReq) hash ^= ModeChangeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.ModeChangeResp) hash ^= ModeChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransReq) hash ^= TransReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransResp) hash ^= TransResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TranCmpRep) hash ^= TranCmpRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.TranCmpResp) hash ^= TranCmpResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlZoneReq) hash ^= ControlZoneReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlZoneResp) hash ^= ControlZoneResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) hash ^= CARRIERIDRenameReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) hash ^= CARRIERIDRenameResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelReq) hash ^= TransCancelReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelResp) hash ^= TransCancelResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelFailReq) hash ^= TransCancelFailReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelFailResp) hash ^= TransCancelFailResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.PauseReq) hash ^= PauseReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.PauseResp) hash ^= PauseResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransEventRep) hash ^= TransEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) hash ^= ImpTransEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) hash ^= ImpTransEventResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusReq) hash ^= StatusReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusReqResp) hash ^= StatusReqResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatueChangeRep) hash ^= StatueChangeRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusChangeResp) hash ^= StatusChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.PowerOpeReq) hash ^= PowerOpeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.PowerOpeResp) hash ^= PowerOpeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidReq) hash ^= AvoidReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidResp) hash ^= AvoidResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) hash ^= AvoidCompleteRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) hash ^= AvoidCompleteResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) hash ^= RangeTeachingReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) hash ^= RangeTeachingResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) hash ^= RangeTeachingCmpRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) hash ^= RangeTeachingCmpResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressTeachRep) hash ^= AddressTeachRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressTeachResp) hash ^= AddressTeachResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResetReq) hash ^= AlarmResetReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResetResp) hash ^= AlarmResetResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmRep) hash ^= AlarmRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResp) hash ^= AlarmResp.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
        output.WriteRawTag(10);
        output.WriteMessage(HostBasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
        output.WriteRawTag(18);
        output.WriteMessage(BasicInfoVersionResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoRep) {
        output.WriteRawTag(90);
        output.WriteMessage(BasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataRep) {
        output.WriteRawTag(106);
        output.WriteMessage(TavellingDataRep);
      }
      if (msgCase_ == MsgOneofCase.SectionDataRep) {
        output.WriteRawTag(122);
        output.WriteMessage(SectionDataRep);
      }
      if (msgCase_ == MsgOneofCase.AddressDataRep) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(AddressDataRep);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataRep) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ScaleDataRep);
      }
      if (msgCase_ == MsgOneofCase.ControlDataRep) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ControlDataRep);
      }
      if (msgCase_ == MsgOneofCase.GuideDataRep) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GuideDataRep);
      }
      if (msgCase_ == MsgOneofCase.TransReq) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransReq);
      }
      if (msgCase_ == MsgOneofCase.TranCmpResp) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TranCmpResp);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneReq) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(ControlZoneReq);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(CARRIERIDRenameReq);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(ImpTransEventResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelReq) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TransCancelReq);
      }
      if (msgCase_ == MsgOneofCase.TransCancelFailResp) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(TransCancelFailResp);
      }
      if (msgCase_ == MsgOneofCase.PauseReq) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(PauseReq);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeReq) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ModeChangeReq);
      }
      if (msgCase_ == MsgOneofCase.StatusReq) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(StatusReq);
      }
      if (msgCase_ == MsgOneofCase.StatusChangeResp) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(StatusChangeResp);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeReq) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(PowerOpeReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidReq) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(AvoidReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AvoidCompleteResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(IndividualUploadReq);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(GUIDEDataUploadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(IndividualChangeReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(RangeTeachingReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(RangeTeachingCmpResp);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachResp) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(AddressTeachResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetReq) {
        output.WriteRawTag(218, 5);
        output.WriteMessage(AlarmResetReq);
      }
      if (msgCase_ == MsgOneofCase.AlarmResp) {
        output.WriteRawTag(242, 5);
        output.WriteMessage(AlarmResp);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(HostBasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(BasicInfoVersionRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoResp) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(BasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataResp) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(TavellingDataResp);
      }
      if (msgCase_ == MsgOneofCase.SectionDataResp) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(SectionDataResp);
      }
      if (msgCase_ == MsgOneofCase.AddressDataResp) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(AddressDataResp);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataResp) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(ScaleDataResp);
      }
      if (msgCase_ == MsgOneofCase.ControlDataResp) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(ControlDataResp);
      }
      if (msgCase_ == MsgOneofCase.GuideDataResp) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(GuideDataResp);
      }
      if (msgCase_ == MsgOneofCase.TransResp) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(TransResp);
      }
      if (msgCase_ == MsgOneofCase.TranCmpRep) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(TranCmpRep);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneResp) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(ControlZoneResp);
      }
      if (msgCase_ == MsgOneofCase.TransEventRep) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(TransEventRep);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(CARRIERIDRenameResp);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(ImpTransEventRep);
      }
      if (msgCase_ == MsgOneofCase.TransCancelResp) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(TransCancelResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelFailReq) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(TransCancelFailReq);
      }
      if (msgCase_ == MsgOneofCase.PauseResp) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(PauseResp);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeResp) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(ModeChangeResp);
      }
      if (msgCase_ == MsgOneofCase.StatusReqResp) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(StatusReqResp);
      }
      if (msgCase_ == MsgOneofCase.StatueChangeRep) {
        output.WriteRawTag(130, 9);
        output.WriteMessage(StatueChangeRep);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeResp) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(PowerOpeResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidResp) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(AvoidResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
        output.WriteRawTag(194, 9);
        output.WriteMessage(AvoidCompleteRep);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
        output.WriteRawTag(138, 10);
        output.WriteMessage(IndividualUploadResp);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) {
        output.WriteRawTag(146, 10);
        output.WriteMessage(GUIDEDataUploadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(IndividualChangeResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
        output.WriteRawTag(218, 10);
        output.WriteMessage(RangeTeachingResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
        output.WriteRawTag(226, 10);
        output.WriteMessage(RangeTeachingCmpRep);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachRep) {
        output.WriteRawTag(242, 10);
        output.WriteMessage(AddressTeachRep);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetResp) {
        output.WriteRawTag(250, 11);
        output.WriteMessage(AlarmResetResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmRep) {
        output.WriteRawTag(146, 12);
        output.WriteMessage(AlarmRep);
      }
      if (ID != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(ID);
      }
      if (SeqNum != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(SeqNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (SeqNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeqNum);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataRep);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataResp);
      }
      if (msgCase_ == MsgOneofCase.SectionDataRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SectionDataRep);
      }
      if (msgCase_ == MsgOneofCase.SectionDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SectionDataResp);
      }
      if (msgCase_ == MsgOneofCase.AddressDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataRep);
      }
      if (msgCase_ == MsgOneofCase.AddressDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataResp);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataRep);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataResp);
      }
      if (msgCase_ == MsgOneofCase.ControlDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataRep);
      }
      if (msgCase_ == MsgOneofCase.ControlDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataResp);
      }
      if (msgCase_ == MsgOneofCase.GuideDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataRep);
      }
      if (msgCase_ == MsgOneofCase.GuideDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadResp);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GUIDEDataUploadReq);
      }
      if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GUIDEDataUploadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeResp);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeReq);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeResp);
      }
      if (msgCase_ == MsgOneofCase.TransReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransReq);
      }
      if (msgCase_ == MsgOneofCase.TransResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransResp);
      }
      if (msgCase_ == MsgOneofCase.TranCmpRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpRep);
      }
      if (msgCase_ == MsgOneofCase.TranCmpResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpResp);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlZoneReq);
      }
      if (msgCase_ == MsgOneofCase.ControlZoneResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlZoneResp);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CARRIERIDRenameReq);
      }
      if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CARRIERIDRenameResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelReq);
      }
      if (msgCase_ == MsgOneofCase.TransCancelResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelFailReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelFailReq);
      }
      if (msgCase_ == MsgOneofCase.TransCancelFailResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelFailResp);
      }
      if (msgCase_ == MsgOneofCase.PauseReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseReq);
      }
      if (msgCase_ == MsgOneofCase.PauseResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseResp);
      }
      if (msgCase_ == MsgOneofCase.TransEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransEventRep);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventRep);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventResp);
      }
      if (msgCase_ == MsgOneofCase.StatusReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReq);
      }
      if (msgCase_ == MsgOneofCase.StatusReqResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReqResp);
      }
      if (msgCase_ == MsgOneofCase.StatueChangeRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatueChangeRep);
      }
      if (msgCase_ == MsgOneofCase.StatusChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusChangeResp);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeReq);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidCompleteRep);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidCompleteResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpRep);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpResp);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachRep);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetReq);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmRep);
      }
      if (msgCase_ == MsgOneofCase.AlarmResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WrapperMessage other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.SeqNum != 0) {
        SeqNum = other.SeqNum;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.HostBasicInfoRep:
          HostBasicInfoRep = other.HostBasicInfoRep;
          break;
        case MsgOneofCase.HostBasicInfoResp:
          HostBasicInfoResp = other.HostBasicInfoResp;
          break;
        case MsgOneofCase.BasicInfoVersionRep:
          BasicInfoVersionRep = other.BasicInfoVersionRep;
          break;
        case MsgOneofCase.BasicInfoVersionResp:
          BasicInfoVersionResp = other.BasicInfoVersionResp;
          break;
        case MsgOneofCase.BasicInfoRep:
          BasicInfoRep = other.BasicInfoRep;
          break;
        case MsgOneofCase.BasicInfoResp:
          BasicInfoResp = other.BasicInfoResp;
          break;
        case MsgOneofCase.TavellingDataRep:
          TavellingDataRep = other.TavellingDataRep;
          break;
        case MsgOneofCase.TavellingDataResp:
          TavellingDataResp = other.TavellingDataResp;
          break;
        case MsgOneofCase.SectionDataRep:
          SectionDataRep = other.SectionDataRep;
          break;
        case MsgOneofCase.SectionDataResp:
          SectionDataResp = other.SectionDataResp;
          break;
        case MsgOneofCase.AddressDataRep:
          AddressDataRep = other.AddressDataRep;
          break;
        case MsgOneofCase.AddressDataResp:
          AddressDataResp = other.AddressDataResp;
          break;
        case MsgOneofCase.ScaleDataRep:
          ScaleDataRep = other.ScaleDataRep;
          break;
        case MsgOneofCase.ScaleDataResp:
          ScaleDataResp = other.ScaleDataResp;
          break;
        case MsgOneofCase.ControlDataRep:
          ControlDataRep = other.ControlDataRep;
          break;
        case MsgOneofCase.ControlDataResp:
          ControlDataResp = other.ControlDataResp;
          break;
        case MsgOneofCase.GuideDataRep:
          GuideDataRep = other.GuideDataRep;
          break;
        case MsgOneofCase.GuideDataResp:
          GuideDataResp = other.GuideDataResp;
          break;
        case MsgOneofCase.IndividualUploadReq:
          IndividualUploadReq = other.IndividualUploadReq;
          break;
        case MsgOneofCase.IndividualUploadResp:
          IndividualUploadResp = other.IndividualUploadResp;
          break;
        case MsgOneofCase.GUIDEDataUploadReq:
          GUIDEDataUploadReq = other.GUIDEDataUploadReq;
          break;
        case MsgOneofCase.GUIDEDataUploadResp:
          GUIDEDataUploadResp = other.GUIDEDataUploadResp;
          break;
        case MsgOneofCase.IndividualChangeReq:
          IndividualChangeReq = other.IndividualChangeReq;
          break;
        case MsgOneofCase.IndividualChangeResp:
          IndividualChangeResp = other.IndividualChangeResp;
          break;
        case MsgOneofCase.ModeChangeReq:
          ModeChangeReq = other.ModeChangeReq;
          break;
        case MsgOneofCase.ModeChangeResp:
          ModeChangeResp = other.ModeChangeResp;
          break;
        case MsgOneofCase.TransReq:
          TransReq = other.TransReq;
          break;
        case MsgOneofCase.TransResp:
          TransResp = other.TransResp;
          break;
        case MsgOneofCase.TranCmpRep:
          TranCmpRep = other.TranCmpRep;
          break;
        case MsgOneofCase.TranCmpResp:
          TranCmpResp = other.TranCmpResp;
          break;
        case MsgOneofCase.ControlZoneReq:
          ControlZoneReq = other.ControlZoneReq;
          break;
        case MsgOneofCase.ControlZoneResp:
          ControlZoneResp = other.ControlZoneResp;
          break;
        case MsgOneofCase.CARRIERIDRenameReq:
          CARRIERIDRenameReq = other.CARRIERIDRenameReq;
          break;
        case MsgOneofCase.CARRIERIDRenameResp:
          CARRIERIDRenameResp = other.CARRIERIDRenameResp;
          break;
        case MsgOneofCase.TransCancelReq:
          TransCancelReq = other.TransCancelReq;
          break;
        case MsgOneofCase.TransCancelResp:
          TransCancelResp = other.TransCancelResp;
          break;
        case MsgOneofCase.TransCancelFailReq:
          TransCancelFailReq = other.TransCancelFailReq;
          break;
        case MsgOneofCase.TransCancelFailResp:
          TransCancelFailResp = other.TransCancelFailResp;
          break;
        case MsgOneofCase.PauseReq:
          PauseReq = other.PauseReq;
          break;
        case MsgOneofCase.PauseResp:
          PauseResp = other.PauseResp;
          break;
        case MsgOneofCase.TransEventRep:
          TransEventRep = other.TransEventRep;
          break;
        case MsgOneofCase.ImpTransEventRep:
          ImpTransEventRep = other.ImpTransEventRep;
          break;
        case MsgOneofCase.ImpTransEventResp:
          ImpTransEventResp = other.ImpTransEventResp;
          break;
        case MsgOneofCase.StatusReq:
          StatusReq = other.StatusReq;
          break;
        case MsgOneofCase.StatusReqResp:
          StatusReqResp = other.StatusReqResp;
          break;
        case MsgOneofCase.StatueChangeRep:
          StatueChangeRep = other.StatueChangeRep;
          break;
        case MsgOneofCase.StatusChangeResp:
          StatusChangeResp = other.StatusChangeResp;
          break;
        case MsgOneofCase.PowerOpeReq:
          PowerOpeReq = other.PowerOpeReq;
          break;
        case MsgOneofCase.PowerOpeResp:
          PowerOpeResp = other.PowerOpeResp;
          break;
        case MsgOneofCase.AvoidReq:
          AvoidReq = other.AvoidReq;
          break;
        case MsgOneofCase.AvoidResp:
          AvoidResp = other.AvoidResp;
          break;
        case MsgOneofCase.AvoidCompleteRep:
          AvoidCompleteRep = other.AvoidCompleteRep;
          break;
        case MsgOneofCase.AvoidCompleteResp:
          AvoidCompleteResp = other.AvoidCompleteResp;
          break;
        case MsgOneofCase.RangeTeachingReq:
          RangeTeachingReq = other.RangeTeachingReq;
          break;
        case MsgOneofCase.RangeTeachingResp:
          RangeTeachingResp = other.RangeTeachingResp;
          break;
        case MsgOneofCase.RangeTeachingCmpRep:
          RangeTeachingCmpRep = other.RangeTeachingCmpRep;
          break;
        case MsgOneofCase.RangeTeachingCmpResp:
          RangeTeachingCmpResp = other.RangeTeachingCmpResp;
          break;
        case MsgOneofCase.AddressTeachRep:
          AddressTeachRep = other.AddressTeachRep;
          break;
        case MsgOneofCase.AddressTeachResp:
          AddressTeachResp = other.AddressTeachResp;
          break;
        case MsgOneofCase.AlarmResetReq:
          AlarmResetReq = other.AlarmResetReq;
          break;
        case MsgOneofCase.AlarmResetResp:
          AlarmResetResp = other.AlarmResetResp;
          break;
        case MsgOneofCase.AlarmRep:
          AlarmRep = other.AlarmRep;
          break;
        case MsgOneofCase.AlarmResp:
          AlarmResp = other.AlarmResp;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_1_HOST_BASIC_INFO_VERSION_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_1_HOST_BASIC_INFO_VERSION_REP();
            if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
              subBuilder.MergeFrom(HostBasicInfoRep);
            }
            input.ReadMessage(subBuilder);
            HostBasicInfoRep = subBuilder;
            break;
          }
          case 18: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_2_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_2_BASIC_INFO_VERSION_RESPONSE();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
              subBuilder.MergeFrom(BasicInfoVersionResp);
            }
            input.ReadMessage(subBuilder);
            BasicInfoVersionResp = subBuilder;
            break;
          }
          case 90: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_11_BASIC_INFO_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_11_BASIC_INFO_REP();
            if (msgCase_ == MsgOneofCase.BasicInfoRep) {
              subBuilder.MergeFrom(BasicInfoRep);
            }
            input.ReadMessage(subBuilder);
            BasicInfoRep = subBuilder;
            break;
          }
          case 106: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_13_TAVELLING_DATA_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_13_TAVELLING_DATA_REP();
            if (msgCase_ == MsgOneofCase.TavellingDataRep) {
              subBuilder.MergeFrom(TavellingDataRep);
            }
            input.ReadMessage(subBuilder);
            TavellingDataRep = subBuilder;
            break;
          }
          case 122: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_15_SECTION_DATA_REP();
            if (msgCase_ == MsgOneofCase.SectionDataRep) {
              subBuilder.MergeFrom(SectionDataRep);
            }
            input.ReadMessage(subBuilder);
            SectionDataRep = subBuilder;
            break;
          }
          case 138: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_17_ADDRESS_DATA_REP();
            if (msgCase_ == MsgOneofCase.AddressDataRep) {
              subBuilder.MergeFrom(AddressDataRep);
            }
            input.ReadMessage(subBuilder);
            AddressDataRep = subBuilder;
            break;
          }
          case 154: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_19_SCALE_DATA_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_19_SCALE_DATA_REP();
            if (msgCase_ == MsgOneofCase.ScaleDataRep) {
              subBuilder.MergeFrom(ScaleDataRep);
            }
            input.ReadMessage(subBuilder);
            ScaleDataRep = subBuilder;
            break;
          }
          case 170: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_21_CONTROL_DATA_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_21_CONTROL_DATA_REP();
            if (msgCase_ == MsgOneofCase.ControlDataRep) {
              subBuilder.MergeFrom(ControlDataRep);
            }
            input.ReadMessage(subBuilder);
            ControlDataRep = subBuilder;
            break;
          }
          case 186: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_23_GUIDE_DATA_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_23_GUIDE_DATA_REP();
            if (msgCase_ == MsgOneofCase.GuideDataRep) {
              subBuilder.MergeFrom(GuideDataRep);
            }
            input.ReadMessage(subBuilder);
            GuideDataRep = subBuilder;
            break;
          }
          case 250: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_31_TRANS_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_31_TRANS_REQUEST();
            if (msgCase_ == MsgOneofCase.TransReq) {
              subBuilder.MergeFrom(TransReq);
            }
            input.ReadMessage(subBuilder);
            TransReq = subBuilder;
            break;
          }
          case 258: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_32_TRANS_COMPLETE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_32_TRANS_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.TranCmpResp) {
              subBuilder.MergeFrom(TranCmpResp);
            }
            input.ReadMessage(subBuilder);
            TranCmpResp = subBuilder;
            break;
          }
          case 266: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST();
            if (msgCase_ == MsgOneofCase.ControlZoneReq) {
              subBuilder.MergeFrom(ControlZoneReq);
            }
            input.ReadMessage(subBuilder);
            ControlZoneReq = subBuilder;
            break;
          }
          case 282: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_35_CARRIER_ID_RENAME_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_35_CARRIER_ID_RENAME_REQUEST();
            if (msgCase_ == MsgOneofCase.CARRIERIDRenameReq) {
              subBuilder.MergeFrom(CARRIERIDRenameReq);
            }
            input.ReadMessage(subBuilder);
            CARRIERIDRenameReq = subBuilder;
            break;
          }
          case 290: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_36_TRANS_EVENT_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_36_TRANS_EVENT_RESPONSE();
            if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
              subBuilder.MergeFrom(ImpTransEventResp);
            }
            input.ReadMessage(subBuilder);
            ImpTransEventResp = subBuilder;
            break;
          }
          case 298: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_37_TRANS_CANCEL_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_37_TRANS_CANCEL_REQUEST();
            if (msgCase_ == MsgOneofCase.TransCancelReq) {
              subBuilder.MergeFrom(TransCancelReq);
            }
            input.ReadMessage(subBuilder);
            TransCancelReq = subBuilder;
            break;
          }
          case 306: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_38_TRANS_CANCEL_FAIL_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_38_TRANS_CANCEL_FAIL_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransCancelFailResp) {
              subBuilder.MergeFrom(TransCancelFailResp);
            }
            input.ReadMessage(subBuilder);
            TransCancelFailResp = subBuilder;
            break;
          }
          case 314: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_39_PAUSE_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_39_PAUSE_REQUEST();
            if (msgCase_ == MsgOneofCase.PauseReq) {
              subBuilder.MergeFrom(PauseReq);
            }
            input.ReadMessage(subBuilder);
            PauseReq = subBuilder;
            break;
          }
          case 330: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_41_MODE_CHANGE_REQ subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_41_MODE_CHANGE_REQ();
            if (msgCase_ == MsgOneofCase.ModeChangeReq) {
              subBuilder.MergeFrom(ModeChangeReq);
            }
            input.ReadMessage(subBuilder);
            ModeChangeReq = subBuilder;
            break;
          }
          case 346: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_43_STATUS_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_43_STATUS_REQUEST();
            if (msgCase_ == MsgOneofCase.StatusReq) {
              subBuilder.MergeFrom(StatusReq);
            }
            input.ReadMessage(subBuilder);
            StatusReq = subBuilder;
            break;
          }
          case 354: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_44_STATUS_CHANGE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_44_STATUS_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.StatusChangeResp) {
              subBuilder.MergeFrom(StatusChangeResp);
            }
            input.ReadMessage(subBuilder);
            StatusChangeResp = subBuilder;
            break;
          }
          case 362: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_45_POWER_OPE_REQ subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_45_POWER_OPE_REQ();
            if (msgCase_ == MsgOneofCase.PowerOpeReq) {
              subBuilder.MergeFrom(PowerOpeReq);
            }
            input.ReadMessage(subBuilder);
            PowerOpeReq = subBuilder;
            break;
          }
          case 410: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_51_AVOID_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_51_AVOID_REQUEST();
            if (msgCase_ == MsgOneofCase.AvoidReq) {
              subBuilder.MergeFrom(AvoidReq);
            }
            input.ReadMessage(subBuilder);
            AvoidReq = subBuilder;
            break;
          }
          case 418: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_52_AVOID_COMPLETE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_52_AVOID_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
              subBuilder.MergeFrom(AvoidCompleteResp);
            }
            input.ReadMessage(subBuilder);
            AvoidCompleteResp = subBuilder;
            break;
          }
          case 490: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_61_INDIVIDUAL_UPLOAD_REQ subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_61_INDIVIDUAL_UPLOAD_REQ();
            if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
              subBuilder.MergeFrom(IndividualUploadReq);
            }
            input.ReadMessage(subBuilder);
            IndividualUploadReq = subBuilder;
            break;
          }
          case 498: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_62_GUID_DATA_UPLOAD_RESPONSE();
            if (msgCase_ == MsgOneofCase.GUIDEDataUploadResp) {
              subBuilder.MergeFrom(GUIDEDataUploadResp);
            }
            input.ReadMessage(subBuilder);
            GUIDEDataUploadResp = subBuilder;
            break;
          }
          case 506: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_63_INDIVIDUAL_CHANGE_REQ subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_63_INDIVIDUAL_CHANGE_REQ();
            if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
              subBuilder.MergeFrom(IndividualChangeReq);
            }
            input.ReadMessage(subBuilder);
            IndividualChangeReq = subBuilder;
            break;
          }
          case 570: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_71_RANGE_TEACHING_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_71_RANGE_TEACHING_REQUEST();
            if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
              subBuilder.MergeFrom(RangeTeachingReq);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingReq = subBuilder;
            break;
          }
          case 578: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
              subBuilder.MergeFrom(RangeTeachingCmpResp);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingCmpResp = subBuilder;
            break;
          }
          case 594: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_74_ADDRESS_TEACH_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_74_ADDRESS_TEACH_RESPONSE();
            if (msgCase_ == MsgOneofCase.AddressTeachResp) {
              subBuilder.MergeFrom(AddressTeachResp);
            }
            input.ReadMessage(subBuilder);
            AddressTeachResp = subBuilder;
            break;
          }
          case 730: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_91_ALARM_RESET_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_91_ALARM_RESET_REQUEST();
            if (msgCase_ == MsgOneofCase.AlarmResetReq) {
              subBuilder.MergeFrom(AlarmResetReq);
            }
            input.ReadMessage(subBuilder);
            AlarmResetReq = subBuilder;
            break;
          }
          case 754: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_94_ALARM_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_94_ALARM_RESPONSE();
            if (msgCase_ == MsgOneofCase.AlarmResp) {
              subBuilder.MergeFrom(AlarmResp);
            }
            input.ReadMessage(subBuilder);
            AlarmResp = subBuilder;
            break;
          }
          case 810: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE();
            if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
              subBuilder.MergeFrom(HostBasicInfoResp);
            }
            input.ReadMessage(subBuilder);
            HostBasicInfoResp = subBuilder;
            break;
          }
          case 818: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_102_BASIC_INFO_VERSION_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_102_BASIC_INFO_VERSION_REP();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
              subBuilder.MergeFrom(BasicInfoVersionRep);
            }
            input.ReadMessage(subBuilder);
            BasicInfoVersionRep = subBuilder;
            break;
          }
          case 890: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_111_BASIC_INFO_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_111_BASIC_INFO_RESPONSE();
            if (msgCase_ == MsgOneofCase.BasicInfoResp) {
              subBuilder.MergeFrom(BasicInfoResp);
            }
            input.ReadMessage(subBuilder);
            BasicInfoResp = subBuilder;
            break;
          }
          case 906: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_113_TAVELLING_DATA_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_113_TAVELLING_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.TavellingDataResp) {
              subBuilder.MergeFrom(TavellingDataResp);
            }
            input.ReadMessage(subBuilder);
            TavellingDataResp = subBuilder;
            break;
          }
          case 922: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_115_SECTION_DATA_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_115_SECTION_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.SectionDataResp) {
              subBuilder.MergeFrom(SectionDataResp);
            }
            input.ReadMessage(subBuilder);
            SectionDataResp = subBuilder;
            break;
          }
          case 938: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_117_ADDRESS_DATA_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_117_ADDRESS_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.AddressDataResp) {
              subBuilder.MergeFrom(AddressDataResp);
            }
            input.ReadMessage(subBuilder);
            AddressDataResp = subBuilder;
            break;
          }
          case 954: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_119_SCALE_DATA_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_119_SCALE_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.ScaleDataResp) {
              subBuilder.MergeFrom(ScaleDataResp);
            }
            input.ReadMessage(subBuilder);
            ScaleDataResp = subBuilder;
            break;
          }
          case 970: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_121_CONTROL_DATA_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_121_CONTROL_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.ControlDataResp) {
              subBuilder.MergeFrom(ControlDataResp);
            }
            input.ReadMessage(subBuilder);
            ControlDataResp = subBuilder;
            break;
          }
          case 986: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_123_GUIDE_DATA_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_123_GUIDE_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.GuideDataResp) {
              subBuilder.MergeFrom(GuideDataResp);
            }
            input.ReadMessage(subBuilder);
            GuideDataResp = subBuilder;
            break;
          }
          case 1050: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_131_TRANS_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_131_TRANS_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransResp) {
              subBuilder.MergeFrom(TransResp);
            }
            input.ReadMessage(subBuilder);
            TransResp = subBuilder;
            break;
          }
          case 1058: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_132_TRANS_COMPLETE_REPORT subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_132_TRANS_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.TranCmpRep) {
              subBuilder.MergeFrom(TranCmpRep);
            }
            input.ReadMessage(subBuilder);
            TranCmpRep = subBuilder;
            break;
          }
          case 1066: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE();
            if (msgCase_ == MsgOneofCase.ControlZoneResp) {
              subBuilder.MergeFrom(ControlZoneResp);
            }
            input.ReadMessage(subBuilder);
            ControlZoneResp = subBuilder;
            break;
          }
          case 1074: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_134_TRANS_EVENT_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_134_TRANS_EVENT_REP();
            if (msgCase_ == MsgOneofCase.TransEventRep) {
              subBuilder.MergeFrom(TransEventRep);
            }
            input.ReadMessage(subBuilder);
            TransEventRep = subBuilder;
            break;
          }
          case 1082: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_135_CARRIER_ID_RENAME_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_135_CARRIER_ID_RENAME_RESPONSE();
            if (msgCase_ == MsgOneofCase.CARRIERIDRenameResp) {
              subBuilder.MergeFrom(CARRIERIDRenameResp);
            }
            input.ReadMessage(subBuilder);
            CARRIERIDRenameResp = subBuilder;
            break;
          }
          case 1090: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_136_TRANS_EVENT_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_136_TRANS_EVENT_REP();
            if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
              subBuilder.MergeFrom(ImpTransEventRep);
            }
            input.ReadMessage(subBuilder);
            ImpTransEventRep = subBuilder;
            break;
          }
          case 1098: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_137_TRANS_CANCEL_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_137_TRANS_CANCEL_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransCancelResp) {
              subBuilder.MergeFrom(TransCancelResp);
            }
            input.ReadMessage(subBuilder);
            TransCancelResp = subBuilder;
            break;
          }
          case 1106: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_138_TRANS_CANCEL_FAIL_REQUEST subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_138_TRANS_CANCEL_FAIL_REQUEST();
            if (msgCase_ == MsgOneofCase.TransCancelFailReq) {
              subBuilder.MergeFrom(TransCancelFailReq);
            }
            input.ReadMessage(subBuilder);
            TransCancelFailReq = subBuilder;
            break;
          }
          case 1114: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_139_PAUSE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_139_PAUSE_RESPONSE();
            if (msgCase_ == MsgOneofCase.PauseResp) {
              subBuilder.MergeFrom(PauseResp);
            }
            input.ReadMessage(subBuilder);
            PauseResp = subBuilder;
            break;
          }
          case 1130: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_141_MODE_CHANGE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_141_MODE_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.ModeChangeResp) {
              subBuilder.MergeFrom(ModeChangeResp);
            }
            input.ReadMessage(subBuilder);
            ModeChangeResp = subBuilder;
            break;
          }
          case 1146: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_143_STATUS_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_143_STATUS_RESPONSE();
            if (msgCase_ == MsgOneofCase.StatusReqResp) {
              subBuilder.MergeFrom(StatusReqResp);
            }
            input.ReadMessage(subBuilder);
            StatusReqResp = subBuilder;
            break;
          }
          case 1154: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_144_STATUS_CHANGE_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_144_STATUS_CHANGE_REP();
            if (msgCase_ == MsgOneofCase.StatueChangeRep) {
              subBuilder.MergeFrom(StatueChangeRep);
            }
            input.ReadMessage(subBuilder);
            StatueChangeRep = subBuilder;
            break;
          }
          case 1162: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_145_POWER_OPE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_145_POWER_OPE_RESPONSE();
            if (msgCase_ == MsgOneofCase.PowerOpeResp) {
              subBuilder.MergeFrom(PowerOpeResp);
            }
            input.ReadMessage(subBuilder);
            PowerOpeResp = subBuilder;
            break;
          }
          case 1210: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_151_AVOID_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_151_AVOID_RESPONSE();
            if (msgCase_ == MsgOneofCase.AvoidResp) {
              subBuilder.MergeFrom(AvoidResp);
            }
            input.ReadMessage(subBuilder);
            AvoidResp = subBuilder;
            break;
          }
          case 1218: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_152_AVOID_COMPLETE_REPORT subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_152_AVOID_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
              subBuilder.MergeFrom(AvoidCompleteRep);
            }
            input.ReadMessage(subBuilder);
            AvoidCompleteRep = subBuilder;
            break;
          }
          case 1290: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
              subBuilder.MergeFrom(IndividualUploadResp);
            }
            input.ReadMessage(subBuilder);
            IndividualUploadResp = subBuilder;
            break;
          }
          case 1298: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_162_GUIDE_DATA_UPLOAD_REP subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_162_GUIDE_DATA_UPLOAD_REP();
            if (msgCase_ == MsgOneofCase.GUIDEDataUploadReq) {
              subBuilder.MergeFrom(GUIDEDataUploadReq);
            }
            input.ReadMessage(subBuilder);
            GUIDEDataUploadReq = subBuilder;
            break;
          }
          case 1306: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
              subBuilder.MergeFrom(IndividualChangeResp);
            }
            input.ReadMessage(subBuilder);
            IndividualChangeResp = subBuilder;
            break;
          }
          case 1370: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_171_RANGE_TEACHING_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_171_RANGE_TEACHING_RESPONSE();
            if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
              subBuilder.MergeFrom(RangeTeachingResp);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingResp = subBuilder;
            break;
          }
          case 1378: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
              subBuilder.MergeFrom(RangeTeachingCmpRep);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingCmpRep = subBuilder;
            break;
          }
          case 1394: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_174_ADDRESS_TEACH_REPORT subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_174_ADDRESS_TEACH_REPORT();
            if (msgCase_ == MsgOneofCase.AddressTeachRep) {
              subBuilder.MergeFrom(AddressTeachRep);
            }
            input.ReadMessage(subBuilder);
            AddressTeachRep = subBuilder;
            break;
          }
          case 1530: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_191_ALARM_RESET_RESPONSE subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_191_ALARM_RESET_RESPONSE();
            if (msgCase_ == MsgOneofCase.AlarmResetResp) {
              subBuilder.MergeFrom(AlarmResetResp);
            }
            input.ReadMessage(subBuilder);
            AlarmResetResp = subBuilder;
            break;
          }
          case 1554: {
            global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_194_ALARM_REPORT subBuilder = new global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.ID_194_ALARM_REPORT();
            if (msgCase_ == MsgOneofCase.AlarmRep) {
              subBuilder.MergeFrom(AlarmRep);
            }
            input.ReadMessage(subBuilder);
            AlarmRep = subBuilder;
            break;
          }
          case 8000: {
            ID = input.ReadInt32();
            break;
          }
          case 8008: {
            SeqNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SYSTEMPROCESS_INFO : pb::IMessage<SYSTEMPROCESS_INFO> {
    private static readonly pb::MessageParser<SYSTEMPROCESS_INFO> _parser = new pb::MessageParser<SYSTEMPROCESS_INFO>(() => new SYSTEMPROCESS_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SYSTEMPROCESS_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMPROCESS_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMPROCESS_INFO(SYSTEMPROCESS_INFO other) : this() {
      tIME_ = other.tIME_;
      sEQ_ = other.sEQ_;
      lOGLEVEL_ = other.lOGLEVEL_;
      cLASS_ = other.cLASS_;
      mETHOD_ = other.mETHOD_;
      dEVICE_ = other.dEVICE_;
      dATA_ = other.dATA_;
      vHID_ = other.vHID_;
      cRRID_ = other.cRRID_;
      tYPE_ = other.tYPE_;
      lOGID_ = other.lOGID_;
      tHREADID_ = other.tHREADID_;
      lOT_ = other.lOT_;
      lEVEL_ = other.lEVEL_;
      xID_ = other.xID_;
      tRXID_ = other.tRXID_;
      dETAILS_ = other.dETAILS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMPROCESS_INFO Clone() {
      return new SYSTEMPROCESS_INFO(this);
    }

    /// <summary>Field number for the "TIME" field.</summary>
    public const int TIMEFieldNumber = 1;
    private string tIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TIME {
      get { return tIME_; }
      set {
        tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEQ" field.</summary>
    public const int SEQFieldNumber = 2;
    private ulong sEQ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SEQ {
      get { return sEQ_; }
      set {
        sEQ_ = value;
      }
    }

    /// <summary>Field number for the "LOG_LEVEL" field.</summary>
    public const int LOGLEVELFieldNumber = 3;
    private string lOGLEVEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOGLEVEL {
      get { return lOGLEVEL_; }
      set {
        lOGLEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CLASS" field.</summary>
    public const int CLASSFieldNumber = 4;
    private string cLASS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CLASS {
      get { return cLASS_; }
      set {
        cLASS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "METHOD" field.</summary>
    public const int METHODFieldNumber = 5;
    private string mETHOD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string METHOD {
      get { return mETHOD_; }
      set {
        mETHOD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DEVICE" field.</summary>
    public const int DEVICEFieldNumber = 6;
    private string dEVICE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DEVICE {
      get { return dEVICE_; }
      set {
        dEVICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DATA" field.</summary>
    public const int DATAFieldNumber = 7;
    private string dATA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DATA {
      get { return dATA_; }
      set {
        dATA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VH_ID" field.</summary>
    public const int VHIDFieldNumber = 8;
    private string vHID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHID {
      get { return vHID_; }
      set {
        vHID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CRR_ID" field.</summary>
    public const int CRRIDFieldNumber = 9;
    private string cRRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CRRID {
      get { return cRRID_; }
      set {
        cRRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TYPE" field.</summary>
    public const int TYPEFieldNumber = 10;
    private string tYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TYPE {
      get { return tYPE_; }
      set {
        tYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOG_ID" field.</summary>
    public const int LOGIDFieldNumber = 11;
    private string lOGID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOGID {
      get { return lOGID_; }
      set {
        lOGID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "THREAD_ID" field.</summary>
    public const int THREADIDFieldNumber = 12;
    private string tHREADID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string THREADID {
      get { return tHREADID_; }
      set {
        tHREADID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOT" field.</summary>
    public const int LOTFieldNumber = 13;
    private string lOT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOT {
      get { return lOT_; }
      set {
        lOT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LEVEL" field.</summary>
    public const int LEVELFieldNumber = 14;
    private string lEVEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LEVEL {
      get { return lEVEL_; }
      set {
        lEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "XID" field.</summary>
    public const int XIDFieldNumber = 15;
    private string xID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XID {
      get { return xID_; }
      set {
        xID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRX_ID" field.</summary>
    public const int TRXIDFieldNumber = 16;
    private string tRXID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRXID {
      get { return tRXID_; }
      set {
        tRXID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DETAILS" field.</summary>
    public const int DETAILSFieldNumber = 17;
    private string dETAILS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DETAILS {
      get { return dETAILS_; }
      set {
        dETAILS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SYSTEMPROCESS_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SYSTEMPROCESS_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TIME != other.TIME) return false;
      if (SEQ != other.SEQ) return false;
      if (LOGLEVEL != other.LOGLEVEL) return false;
      if (CLASS != other.CLASS) return false;
      if (METHOD != other.METHOD) return false;
      if (DEVICE != other.DEVICE) return false;
      if (DATA != other.DATA) return false;
      if (VHID != other.VHID) return false;
      if (CRRID != other.CRRID) return false;
      if (TYPE != other.TYPE) return false;
      if (LOGID != other.LOGID) return false;
      if (THREADID != other.THREADID) return false;
      if (LOT != other.LOT) return false;
      if (LEVEL != other.LEVEL) return false;
      if (XID != other.XID) return false;
      if (TRXID != other.TRXID) return false;
      if (DETAILS != other.DETAILS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TIME.Length != 0) hash ^= TIME.GetHashCode();
      if (SEQ != 0UL) hash ^= SEQ.GetHashCode();
      if (LOGLEVEL.Length != 0) hash ^= LOGLEVEL.GetHashCode();
      if (CLASS.Length != 0) hash ^= CLASS.GetHashCode();
      if (METHOD.Length != 0) hash ^= METHOD.GetHashCode();
      if (DEVICE.Length != 0) hash ^= DEVICE.GetHashCode();
      if (DATA.Length != 0) hash ^= DATA.GetHashCode();
      if (VHID.Length != 0) hash ^= VHID.GetHashCode();
      if (CRRID.Length != 0) hash ^= CRRID.GetHashCode();
      if (TYPE.Length != 0) hash ^= TYPE.GetHashCode();
      if (LOGID.Length != 0) hash ^= LOGID.GetHashCode();
      if (THREADID.Length != 0) hash ^= THREADID.GetHashCode();
      if (LOT.Length != 0) hash ^= LOT.GetHashCode();
      if (LEVEL.Length != 0) hash ^= LEVEL.GetHashCode();
      if (XID.Length != 0) hash ^= XID.GetHashCode();
      if (TRXID.Length != 0) hash ^= TRXID.GetHashCode();
      if (DETAILS.Length != 0) hash ^= DETAILS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TIME.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TIME);
      }
      if (SEQ != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SEQ);
      }
      if (LOGLEVEL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LOGLEVEL);
      }
      if (CLASS.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CLASS);
      }
      if (METHOD.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(METHOD);
      }
      if (DEVICE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DEVICE);
      }
      if (DATA.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DATA);
      }
      if (VHID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VHID);
      }
      if (CRRID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CRRID);
      }
      if (TYPE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TYPE);
      }
      if (LOGID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LOGID);
      }
      if (THREADID.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(THREADID);
      }
      if (LOT.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LOT);
      }
      if (LEVEL.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LEVEL);
      }
      if (XID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(XID);
      }
      if (TRXID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(TRXID);
      }
      if (DETAILS.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DETAILS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
      }
      if (SEQ != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SEQ);
      }
      if (LOGLEVEL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOGLEVEL);
      }
      if (CLASS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CLASS);
      }
      if (METHOD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(METHOD);
      }
      if (DEVICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DEVICE);
      }
      if (DATA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DATA);
      }
      if (VHID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHID);
      }
      if (CRRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CRRID);
      }
      if (TYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TYPE);
      }
      if (LOGID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOGID);
      }
      if (THREADID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(THREADID);
      }
      if (LOT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOT);
      }
      if (LEVEL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LEVEL);
      }
      if (XID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XID);
      }
      if (TRXID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TRXID);
      }
      if (DETAILS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DETAILS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SYSTEMPROCESS_INFO other) {
      if (other == null) {
        return;
      }
      if (other.TIME.Length != 0) {
        TIME = other.TIME;
      }
      if (other.SEQ != 0UL) {
        SEQ = other.SEQ;
      }
      if (other.LOGLEVEL.Length != 0) {
        LOGLEVEL = other.LOGLEVEL;
      }
      if (other.CLASS.Length != 0) {
        CLASS = other.CLASS;
      }
      if (other.METHOD.Length != 0) {
        METHOD = other.METHOD;
      }
      if (other.DEVICE.Length != 0) {
        DEVICE = other.DEVICE;
      }
      if (other.DATA.Length != 0) {
        DATA = other.DATA;
      }
      if (other.VHID.Length != 0) {
        VHID = other.VHID;
      }
      if (other.CRRID.Length != 0) {
        CRRID = other.CRRID;
      }
      if (other.TYPE.Length != 0) {
        TYPE = other.TYPE;
      }
      if (other.LOGID.Length != 0) {
        LOGID = other.LOGID;
      }
      if (other.THREADID.Length != 0) {
        THREADID = other.THREADID;
      }
      if (other.LOT.Length != 0) {
        LOT = other.LOT;
      }
      if (other.LEVEL.Length != 0) {
        LEVEL = other.LEVEL;
      }
      if (other.XID.Length != 0) {
        XID = other.XID;
      }
      if (other.TRXID.Length != 0) {
        TRXID = other.TRXID;
      }
      if (other.DETAILS.Length != 0) {
        DETAILS = other.DETAILS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TIME = input.ReadString();
            break;
          }
          case 16: {
            SEQ = input.ReadUInt64();
            break;
          }
          case 26: {
            LOGLEVEL = input.ReadString();
            break;
          }
          case 34: {
            CLASS = input.ReadString();
            break;
          }
          case 42: {
            METHOD = input.ReadString();
            break;
          }
          case 50: {
            DEVICE = input.ReadString();
            break;
          }
          case 58: {
            DATA = input.ReadString();
            break;
          }
          case 66: {
            VHID = input.ReadString();
            break;
          }
          case 74: {
            CRRID = input.ReadString();
            break;
          }
          case 82: {
            TYPE = input.ReadString();
            break;
          }
          case 90: {
            LOGID = input.ReadString();
            break;
          }
          case 98: {
            THREADID = input.ReadString();
            break;
          }
          case 106: {
            LOT = input.ReadString();
            break;
          }
          case 114: {
            LEVEL = input.ReadString();
            break;
          }
          case 122: {
            XID = input.ReadString();
            break;
          }
          case 130: {
            TRXID = input.ReadString();
            break;
          }
          case 138: {
            DETAILS = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HOSTLOG_INFO : pb::IMessage<HOSTLOG_INFO> {
    private static readonly pb::MessageParser<HOSTLOG_INFO> _parser = new pb::MessageParser<HOSTLOG_INFO>(() => new HOSTLOG_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HOSTLOG_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HOSTLOG_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HOSTLOG_INFO(HOSTLOG_INFO other) : this() {
      tIME_ = other.tIME_;
      eQID_ = other.eQID_;
      sENDRECEIVE_ = other.sENDRECEIVE_;
      sX_ = other.sX_;
      fY_ = other.fY_;
      dEVICE_ = other.dEVICE_;
      fUNNAME_ = other.fUNNAME_;
      mESSAGE_ = other.mESSAGE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HOSTLOG_INFO Clone() {
      return new HOSTLOG_INFO(this);
    }

    /// <summary>Field number for the "TIME" field.</summary>
    public const int TIMEFieldNumber = 1;
    private string tIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TIME {
      get { return tIME_; }
      set {
        tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQ_ID" field.</summary>
    public const int EQIDFieldNumber = 2;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEND_RECEIVE" field.</summary>
    public const int SENDRECEIVEFieldNumber = 3;
    private string sENDRECEIVE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SENDRECEIVE {
      get { return sENDRECEIVE_; }
      set {
        sENDRECEIVE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SX" field.</summary>
    public const int SXFieldNumber = 4;
    private string sX_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SX {
      get { return sX_; }
      set {
        sX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FY" field.</summary>
    public const int FYFieldNumber = 5;
    private string fY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FY {
      get { return fY_; }
      set {
        fY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DEVICE" field.</summary>
    public const int DEVICEFieldNumber = 6;
    private string dEVICE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DEVICE {
      get { return dEVICE_; }
      set {
        dEVICE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUN_NAME" field.</summary>
    public const int FUNNAMEFieldNumber = 7;
    private string fUNNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNNAME {
      get { return fUNNAME_; }
      set {
        fUNNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MESSAGE" field.</summary>
    public const int MESSAGEFieldNumber = 8;
    private string mESSAGE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MESSAGE {
      get { return mESSAGE_; }
      set {
        mESSAGE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HOSTLOG_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HOSTLOG_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TIME != other.TIME) return false;
      if (EQID != other.EQID) return false;
      if (SENDRECEIVE != other.SENDRECEIVE) return false;
      if (SX != other.SX) return false;
      if (FY != other.FY) return false;
      if (DEVICE != other.DEVICE) return false;
      if (FUNNAME != other.FUNNAME) return false;
      if (MESSAGE != other.MESSAGE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TIME.Length != 0) hash ^= TIME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (SENDRECEIVE.Length != 0) hash ^= SENDRECEIVE.GetHashCode();
      if (SX.Length != 0) hash ^= SX.GetHashCode();
      if (FY.Length != 0) hash ^= FY.GetHashCode();
      if (DEVICE.Length != 0) hash ^= DEVICE.GetHashCode();
      if (FUNNAME.Length != 0) hash ^= FUNNAME.GetHashCode();
      if (MESSAGE.Length != 0) hash ^= MESSAGE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TIME.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TIME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EQID);
      }
      if (SENDRECEIVE.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SENDRECEIVE);
      }
      if (SX.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SX);
      }
      if (FY.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FY);
      }
      if (DEVICE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DEVICE);
      }
      if (FUNNAME.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FUNNAME);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MESSAGE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (SENDRECEIVE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SENDRECEIVE);
      }
      if (SX.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SX);
      }
      if (FY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FY);
      }
      if (DEVICE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DEVICE);
      }
      if (FUNNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNNAME);
      }
      if (MESSAGE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MESSAGE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HOSTLOG_INFO other) {
      if (other == null) {
        return;
      }
      if (other.TIME.Length != 0) {
        TIME = other.TIME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.SENDRECEIVE.Length != 0) {
        SENDRECEIVE = other.SENDRECEIVE;
      }
      if (other.SX.Length != 0) {
        SX = other.SX;
      }
      if (other.FY.Length != 0) {
        FY = other.FY;
      }
      if (other.DEVICE.Length != 0) {
        DEVICE = other.DEVICE;
      }
      if (other.FUNNAME.Length != 0) {
        FUNNAME = other.FUNNAME;
      }
      if (other.MESSAGE.Length != 0) {
        MESSAGE = other.MESSAGE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TIME = input.ReadString();
            break;
          }
          case 18: {
            EQID = input.ReadString();
            break;
          }
          case 26: {
            SENDRECEIVE = input.ReadString();
            break;
          }
          case 34: {
            SX = input.ReadString();
            break;
          }
          case 42: {
            FY = input.ReadString();
            break;
          }
          case 50: {
            DEVICE = input.ReadString();
            break;
          }
          case 58: {
            FUNNAME = input.ReadString();
            break;
          }
          case 66: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EQLOG_INFO : pb::IMessage<EQLOG_INFO> {
    private static readonly pb::MessageParser<EQLOG_INFO> _parser = new pb::MessageParser<EQLOG_INFO>(() => new EQLOG_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EQLOG_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.OHTMessage.OhtmessageReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQLOG_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQLOG_INFO(EQLOG_INFO other) : this() {
      tIME_ = other.tIME_;
      sENDRECEIVE_ = other.sENDRECEIVE_;
      fUNNAME_ = other.fUNNAME_;
      sEQNO_ = other.sEQNO_;
      vHID_ = other.vHID_;
      oHTCCMDID_ = other.oHTCCMDID_;
      aCTTYPE_ = other.aCTTYPE_;
      mCSCMDID_ = other.mCSCMDID_;
      eVENTTYPE_ = other.eVENTTYPE_;
      vHSTATUS_ = other.vHSTATUS_;
      mESSAGE_ = other.mESSAGE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQLOG_INFO Clone() {
      return new EQLOG_INFO(this);
    }

    /// <summary>Field number for the "TIME" field.</summary>
    public const int TIMEFieldNumber = 1;
    private string tIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TIME {
      get { return tIME_; }
      set {
        tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEND_RECEIVE" field.</summary>
    public const int SENDRECEIVEFieldNumber = 2;
    private string sENDRECEIVE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SENDRECEIVE {
      get { return sENDRECEIVE_; }
      set {
        sENDRECEIVE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUN_NAME" field.</summary>
    public const int FUNNAMEFieldNumber = 3;
    private string fUNNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNNAME {
      get { return fUNNAME_; }
      set {
        fUNNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SEQ_NO" field.</summary>
    public const int SEQNOFieldNumber = 4;
    private int sEQNO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SEQNO {
      get { return sEQNO_; }
      set {
        sEQNO_ = value;
      }
    }

    /// <summary>Field number for the "VH_ID" field.</summary>
    public const int VHIDFieldNumber = 5;
    private string vHID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHID {
      get { return vHID_; }
      set {
        vHID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OHTC_CMD_ID" field.</summary>
    public const int OHTCCMDIDFieldNumber = 6;
    private string oHTCCMDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OHTCCMDID {
      get { return oHTCCMDID_; }
      set {
        oHTCCMDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ACT_TYPE" field.</summary>
    public const int ACTTYPEFieldNumber = 7;
    private string aCTTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ACTTYPE {
      get { return aCTTYPE_; }
      set {
        aCTTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MCS_CMD_ID" field.</summary>
    public const int MCSCMDIDFieldNumber = 8;
    private string mCSCMDID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MCSCMDID {
      get { return mCSCMDID_; }
      set {
        mCSCMDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EVENT_TYPE" field.</summary>
    public const int EVENTTYPEFieldNumber = 9;
    private string eVENTTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EVENTTYPE {
      get { return eVENTTYPE_; }
      set {
        eVENTTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VH_STATUS" field.</summary>
    public const int VHSTATUSFieldNumber = 10;
    private string vHSTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VHSTATUS {
      get { return vHSTATUS_; }
      set {
        vHSTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MESSAGE" field.</summary>
    public const int MESSAGEFieldNumber = 11;
    private string mESSAGE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MESSAGE {
      get { return mESSAGE_; }
      set {
        mESSAGE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EQLOG_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EQLOG_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TIME != other.TIME) return false;
      if (SENDRECEIVE != other.SENDRECEIVE) return false;
      if (FUNNAME != other.FUNNAME) return false;
      if (SEQNO != other.SEQNO) return false;
      if (VHID != other.VHID) return false;
      if (OHTCCMDID != other.OHTCCMDID) return false;
      if (ACTTYPE != other.ACTTYPE) return false;
      if (MCSCMDID != other.MCSCMDID) return false;
      if (EVENTTYPE != other.EVENTTYPE) return false;
      if (VHSTATUS != other.VHSTATUS) return false;
      if (MESSAGE != other.MESSAGE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TIME.Length != 0) hash ^= TIME.GetHashCode();
      if (SENDRECEIVE.Length != 0) hash ^= SENDRECEIVE.GetHashCode();
      if (FUNNAME.Length != 0) hash ^= FUNNAME.GetHashCode();
      if (SEQNO != 0) hash ^= SEQNO.GetHashCode();
      if (VHID.Length != 0) hash ^= VHID.GetHashCode();
      if (OHTCCMDID.Length != 0) hash ^= OHTCCMDID.GetHashCode();
      if (ACTTYPE.Length != 0) hash ^= ACTTYPE.GetHashCode();
      if (MCSCMDID.Length != 0) hash ^= MCSCMDID.GetHashCode();
      if (EVENTTYPE.Length != 0) hash ^= EVENTTYPE.GetHashCode();
      if (VHSTATUS.Length != 0) hash ^= VHSTATUS.GetHashCode();
      if (MESSAGE.Length != 0) hash ^= MESSAGE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TIME.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TIME);
      }
      if (SENDRECEIVE.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SENDRECEIVE);
      }
      if (FUNNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNNAME);
      }
      if (SEQNO != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SEQNO);
      }
      if (VHID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VHID);
      }
      if (OHTCCMDID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OHTCCMDID);
      }
      if (ACTTYPE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ACTTYPE);
      }
      if (MCSCMDID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MCSCMDID);
      }
      if (EVENTTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EVENTTYPE);
      }
      if (VHSTATUS.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(VHSTATUS);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MESSAGE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
      }
      if (SENDRECEIVE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SENDRECEIVE);
      }
      if (FUNNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNNAME);
      }
      if (SEQNO != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SEQNO);
      }
      if (VHID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHID);
      }
      if (OHTCCMDID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OHTCCMDID);
      }
      if (ACTTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ACTTYPE);
      }
      if (MCSCMDID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MCSCMDID);
      }
      if (EVENTTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EVENTTYPE);
      }
      if (VHSTATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VHSTATUS);
      }
      if (MESSAGE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MESSAGE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EQLOG_INFO other) {
      if (other == null) {
        return;
      }
      if (other.TIME.Length != 0) {
        TIME = other.TIME;
      }
      if (other.SENDRECEIVE.Length != 0) {
        SENDRECEIVE = other.SENDRECEIVE;
      }
      if (other.FUNNAME.Length != 0) {
        FUNNAME = other.FUNNAME;
      }
      if (other.SEQNO != 0) {
        SEQNO = other.SEQNO;
      }
      if (other.VHID.Length != 0) {
        VHID = other.VHID;
      }
      if (other.OHTCCMDID.Length != 0) {
        OHTCCMDID = other.OHTCCMDID;
      }
      if (other.ACTTYPE.Length != 0) {
        ACTTYPE = other.ACTTYPE;
      }
      if (other.MCSCMDID.Length != 0) {
        MCSCMDID = other.MCSCMDID;
      }
      if (other.EVENTTYPE.Length != 0) {
        EVENTTYPE = other.EVENTTYPE;
      }
      if (other.VHSTATUS.Length != 0) {
        VHSTATUS = other.VHSTATUS;
      }
      if (other.MESSAGE.Length != 0) {
        MESSAGE = other.MESSAGE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TIME = input.ReadString();
            break;
          }
          case 18: {
            SENDRECEIVE = input.ReadString();
            break;
          }
          case 26: {
            FUNNAME = input.ReadString();
            break;
          }
          case 32: {
            SEQNO = input.ReadInt32();
            break;
          }
          case 42: {
            VHID = input.ReadString();
            break;
          }
          case 50: {
            OHTCCMDID = input.ReadString();
            break;
          }
          case 58: {
            ACTTYPE = input.ReadString();
            break;
          }
          case 66: {
            MCSCMDID = input.ReadString();
            break;
          }
          case 74: {
            EVENTTYPE = input.ReadString();
            break;
          }
          case 82: {
            VHSTATUS = input.ReadString();
            break;
          }
          case 90: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
